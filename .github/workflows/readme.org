* Nix

We use mostly nix, with the current environment

#+begin_src yaml :noweb-ref nix-env
WITH_SHELL: nix-shell /home/runner/work/sisi4s/sisi4s/etc/env/nix/shell.nix --argstr compiler ${{matrix.compiler}} --arg cuda ${{matrix.cuda}} --run
NJ: 4
#+end_src

and with the current action
#+begin_src yaml :noweb-ref nix-action
- name: Install Nix
  uses: cachix/install-nix-action@v15
  with:
    nix_path: nixpkgs=channel:nixos-unstable
#+end_src



* Building

#+begin_src yaml :tangle main.yml :noweb yes 
name: ci

on:
  push:
    branches: [ master, newbuild ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      <<nix-env>>

    strategy:
      matrix:
        compiler:
          - gcc11
          - gcc10
          - gcc9
          - gcc8
          - gcc7
          - gcc6
          - clang13
          - clang12
          - clang11
          - clang10
          - clang9
          - clang8
          - clang7
          - clang6
          - clang5
        cuda:
          - false

    steps:
    - uses: actions/checkout@v2.3.4

    <<nix-action>>

    - name: Install nix dependencies
      run: $WITH_SHELL 'env'

    - name: Bootstraping
      run: $WITH_SHELL './bootstrap.sh'

    - name: Configure
      run: |
        mkdir -p build/${{matrix.compiler}}
        cd build/${{matrix.compiler}}
        $WITH_SHELL '../../configure'

    - name: CTF
      run: |
        mkdir -p build/${{matrix.compiler}}
        cd build/${{matrix.compiler}}
        $WITH_SHELL 'make -j$NJ -C extern/ctf'

    - name: LIBINT
      run: |
        mkdir -p build/${{matrix.compiler}}
        cd build/${{matrix.compiler}}
        $WITH_SHELL 'make -j$NJ -C extern/libint'

    - name: EIGEN
      run: |
        mkdir -p build/${{matrix.compiler}}
        cd build/${{matrix.compiler}}
        $WITH_SHELL 'make -j$NJ -C extern/eigen'

    - name: YAMLCPP
      run: |
        mkdir -p build/${{matrix.compiler}}
        cd build/${{matrix.compiler}}
        $WITH_SHELL 'make -j$NJ -C extern/yaml-cpp'

    - name: Extern
      run: |
        mkdir -p build/${{matrix.compiler}}
        cd build/${{matrix.compiler}}
        $WITH_SHELL 'make -j$NJ extern'

    - name: sisi4s
      run: |
        mkdir -p build/${{matrix.compiler}}
        cd build/${{matrix.compiler}}
        $WITH_SHELL 'make -j$NJ sisi4s'

    - name: Run integration tests
      run: |
        mkdir -p build/${{matrix.compiler}}
        cd build/${{matrix.compiler}}
        $WITH_SHELL 'make -C integration-tests/ pyyaml run'
#+end_src

* Documentation

#+begin_src yaml :tangle documentation.yaml :noweb yes 
name: Documentation

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  documentation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler:
          - gcc11
        cuda:
          - false
    env:
      <<nix-env>>
    steps:
    - uses: actions/checkout@v2.3.4

    - name: pwd
      run: |
        pwd

    <<nix-action>>

    - name: Configure
      run: |
        mkdir -p build && cd build
        ${WITH_SHELL} '../bootstrap.sh'
        ${WITH_SHELL} '../configure --enable-docs'
        ${WITH_SHELL} 'emacs --version'
        ${WITH_SHELL} 'python --version'
        ${WITH_SHELL} 'sphinx-build --version'

    - name: doxygen
      run: |
        mkdir -p build && cd build
        ${WITH_SHELL} 'make -C docs doxygen'

    - name: sphinx
      run: |
        mkdir -p build && cd build
        ${WITH_SHELL} 'make -C docs sphinx'

    - name: nojekyll
      run: |
        touch build/docs/build/.nojekyll

    - name: Deploy
      uses: JamesIves/github-pages-deploy-action@4.1.0
      with:
         branch: gh-pages
         folder: ./build/docs/build
#+end_src

* Code formatting

#+begin_src yaml :tangle format.yaml :noweb yes 
name: format

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  clang-format:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler:
          - clang13
        cuda:
          - false
    env:
      <<nix-env>>
    steps:
    - uses: actions/checkout@v2.3.4

    - name: pwd
      run: |
        pwd

    <<nix-action>>

    - name: Format
      run: |
        ${WITH_SHELL} './tools/ci-format.sh'

    - name: Format
      run: |
        ${WITH_SHELL} './tools/ci-format.sh'

    - name: Files changed
      run: |
        files="$(git diff --name-only)"
        if [[ -n "$files" ]]; then
          echo files changed
          echo $files
          exit 1
        fi
#+end_src

* CodeQL

#+begin_src yaml :tangle codeql.yml :noweb yes 
name: "CodeQL"

on:
  push:
    branches: [ "master" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "master" ]

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    env:
      <<nix-env>>
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]
        compiler:
          - gcc11
        cuda:
          - false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    <<nix-action>>

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    - name: Build
      run: |
        ${WITH_SHELL} "./bootstrap.sh"
        ${WITH_SHELL} "./configure"
        ${WITH_SHELL} "make -j$NJ"

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"
#+end_src
