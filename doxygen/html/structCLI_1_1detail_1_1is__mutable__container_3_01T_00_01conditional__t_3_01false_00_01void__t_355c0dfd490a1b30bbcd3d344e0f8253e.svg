<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 7.0.0 (0)
 -->
<!-- Title: CLI::detail::is_mutable_container&lt; T, conditional_t&lt; false, void_t&lt; typename T::value_type, decltype(std::declval&lt; T &gt;().end()), decltype(std::declval&lt; T &gt;().clear()), decltype(std::declval&lt; T &gt;().insert(std::declval&lt; decltype(std::declval&lt; T &gt;().end())&gt;(), std::declval&lt; const typename T::value_type &amp; &gt;()))&gt;, void &gt; &gt; Pages: 1 -->
<svg width="245pt" height="236pt"
 viewBox="0.00 0.00 245.00 236.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 232)">
<title>CLI::detail::is_mutable_container&lt; T, conditional_t&lt; false, void_t&lt; typename T::value_type, decltype(std::declval&lt; T &gt;().end()), decltype(std::declval&lt; T &gt;().clear()), decltype(std::declval&lt; T &gt;().insert(std::declval&lt; decltype(std::declval&lt; T &gt;().end())&gt;(), std::declval&lt; const typename T::value_type &amp; &gt;()))&gt;, void &gt; &gt;</title>
<!-- Node1 -->
<g id="node1" class="node">
<title>Node1</title>
<g id="a_node1"><a xlink:title=" ">
<polygon fill="#999999" stroke="#666666" points="237,-129 0,-129 0,0 237,0 237,-129"/>
<text text-anchor="start" x="8" y="-117" font-family="Helvetica,sans-Serif" font-size="10.00">{CLI::detail::is_mutable</text>
<text text-anchor="start" x="8" y="-106" font-family="Helvetica,sans-Serif" font-size="10.00">_container&lt; T, conditional</text>
<text text-anchor="start" x="8" y="-95" font-family="Helvetica,sans-Serif" font-size="10.00">_t&lt; false, void_t&lt; typename</text>
<text text-anchor="start" x="8" y="-84" font-family="Helvetica,sans-Serif" font-size="10.00"> T::value_type, decltype(std</text>
<text text-anchor="start" x="8" y="-73" font-family="Helvetica,sans-Serif" font-size="10.00">::declval&lt; T &gt;().end()), decltype</text>
<text text-anchor="start" x="8" y="-62" font-family="Helvetica,sans-Serif" font-size="10.00">(std::declval&lt; T &gt;().clear()), decltype</text>
<text text-anchor="start" x="8" y="-51" font-family="Helvetica,sans-Serif" font-size="10.00">(std::declval&lt; T &gt;().insert(std::declval</text>
<text text-anchor="start" x="8" y="-40" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; decltype(std::declval&lt; T &gt;().end())&gt;()</text>
<text text-anchor="start" x="8" y="-29" font-family="Helvetica,sans-Serif" font-size="10.00">, std::declval&lt; const typename T::value_type</text>
<text text-anchor="middle" x="118.5" y="-18" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp; &gt;()))&gt;, void &gt; &gt;</text>
<text text-anchor="middle" x="118.5" y="-7" font-family="Helvetica,sans-Serif" font-size="10.00">||}</text>
</a>
</g>
</g>
<!-- Node2 -->
<g id="node2" class="node">
<title>Node2</title>
<g id="a_node2"><a xlink:title=" ">
<polygon fill="white" stroke="#666666" points="206.5,-228 30.5,-228 30.5,-165 206.5,-165 206.5,-228"/>
<text text-anchor="start" x="38.5" y="-216" font-family="Helvetica,sans-Serif" font-size="10.00">{conditional_t&lt; std</text>
<text text-anchor="start" x="38.5" y="-205" font-family="Helvetica,sans-Serif" font-size="10.00">::is_constructible&lt;</text>
<text text-anchor="start" x="38.5" y="-194" font-family="Helvetica,sans-Serif" font-size="10.00"> T, std::string &gt;::value,</text>
<text text-anchor="middle" x="118.5" y="-183" font-family="Helvetica,sans-Serif" font-size="10.00"> std::false_type, std::true_type &gt;</text>
<text text-anchor="middle" x="118.5" y="-172" font-family="Helvetica,sans-Serif" font-size="10.00">||}</text>
</a>
</g>
</g>
<!-- Node2&#45;&gt;Node1 -->
<g id="edge1" class="edge">
<title>Node2&#45;&gt;Node1</title>
<path fill="none" stroke="#63b8ff" d="M118.5,-153.43C118.5,-145.72 118.5,-137.51 118.5,-129.33"/>
<polygon fill="none" stroke="#63b8ff" points="115,-153.18 118.5,-163.18 122,-153.18 115,-153.18"/>
</g>
</g>
</svg>
