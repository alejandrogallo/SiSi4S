<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="CcsdPreconditioner_8cxx" kind="file" language="C++">
    <compoundname>CcsdPreconditioner.cxx</compoundname>
    <includes refid="CcsdPreconditioner_8hpp" local="no">algorithms/CcsdPreconditioner.hpp</includes>
    <includes refid="RandomTensor_8hpp" local="no">math/RandomTensor.hpp</includes>
    <includes refid="MpiCommunicator_8hpp" local="no">util/MpiCommunicator.hpp</includes>
    <includes refid="MathFunctions_8hpp" local="no">math/MathFunctions.hpp</includes>
    <includes refid="FockVector_8hpp" local="no">math/FockVector.hpp</includes>
    <includes refid="ComplexTensor_8hpp" local="no">math/ComplexTensor.hpp</includes>
    <includes refid="Log_8hpp" local="no">util/Log.hpp</includes>
    <includes refid="TensorIo_8hpp" local="no">util/TensorIo.hpp</includes>
    <includes refid="Exception_8hpp" local="no">util/Exception.hpp</includes>
    <includes refid="Tensor_8hpp" local="no">util/Tensor.hpp</includes>
    <includes refid="Sisi4s_8hpp" local="no">Sisi4s.hpp</includes>
    <includes refid="SharedPointer_8hpp" local="no">util/SharedPointer.hpp</includes>
    <incdepgraph>
      <node id="4">
        <label>Data.hpp</label>
        <link refid="Data_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>Options.hpp</label>
        <link refid="Options_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>Sisi4s.hpp</label>
        <link refid="Sisi4s_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>algorithms/Algorithm.hpp</label>
        <link refid="Algorithm_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>CcsdPreconditioner.cxx</label>
        <link refid="CcsdPreconditioner_8cxx"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algorithms/CcsdPreconditioner.hpp</label>
        <link refid="CcsdPreconditioner_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>extern/CLI11.hpp</label>
        <link refid="CLI11_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>math/Complex.hpp</label>
        <link refid="Complex_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>math/ComplexTensor.hpp</label>
        <link refid="ComplexTensor_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>math/Float.hpp</label>
        <link refid="Float_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>math/FockVector.hpp</label>
        <link refid="FockVector_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>math/MathFunctions.hpp</label>
        <link refid="MathFunctions_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>math/RandomTensor.hpp</label>
        <link refid="RandomTensor_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>math/Vector.hpp</label>
        <link refid="Vector_8hpp"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>util/CTF.hpp</label>
        <link refid="CTF_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>util/Exception.hpp</label>
        <link refid="Exception_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>util/Log.hpp</label>
        <link refid="Log_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>util/MpiCommunicator.hpp</label>
        <link refid="MpiCommunicator_8hpp"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>util/Scanner.hpp</label>
        <link refid="Scanner_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>util/SharedPointer.hpp</label>
        <link refid="SharedPointer_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>util/Tensor.hpp</label>
        <link refid="Tensor_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>util/TensorIo.hpp</label>
        <link refid="TensorIo_8hpp"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>util/Time.hpp</label>
        <link refid="Time_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>algorithm</label>
      </node>
      <node id="12">
        <label>cmath</label>
      </node>
      <node id="19">
        <label>complex</label>
      </node>
      <node id="8">
        <label>cstdint</label>
      </node>
      <node id="56">
        <label>cstring</label>
      </node>
      <node id="24">
        <label>ctf.hpp</label>
      </node>
      <node id="7">
        <label>ctime</label>
      </node>
      <node id="45">
        <label>exception</label>
      </node>
      <node id="16">
        <label>fstream</label>
      </node>
      <node id="34">
        <label>functional</label>
      </node>
      <node id="10">
        <label>iomanip</label>
      </node>
      <node id="14">
        <label>iostream</label>
      </node>
      <node id="55">
        <label>istream</label>
      </node>
      <node id="42">
        <label>iterator</label>
      </node>
      <node id="44">
        <label>limits</label>
      </node>
      <node id="38">
        <label>locale</label>
      </node>
      <node id="20">
        <label>map</label>
      </node>
      <node id="30">
        <label>memory</label>
      </node>
      <node id="51">
        <label>mpi.h</label>
      </node>
      <node id="35">
        <label>numeric</label>
      </node>
      <node id="9">
        <label>ostream</label>
      </node>
      <node id="49">
        <label>random</label>
      </node>
      <node id="40">
        <label>set</label>
      </node>
      <node id="11">
        <label>sstream</label>
      </node>
      <node id="43">
        <label>stdexcept</label>
      </node>
      <node id="15">
        <label>streambuf</label>
      </node>
      <node id="13">
        <label>string</label>
      </node>
      <node id="46">
        <label>sys/stat.h</label>
      </node>
      <node id="47">
        <label>sys/types.h</label>
      </node>
      <node id="36">
        <label>tuple</label>
      </node>
      <node id="41">
        <label>type_traits</label>
      </node>
      <node id="37">
        <label>utility</label>
      </node>
      <node id="21">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classEomDiagonalValueComparator" prot="public">EomDiagonalValueComparator</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="CcsdPreconditioner_8cxx_1a279086f8f72e73ab4de59fe05b1fd760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void filterOutSpinFlipEntries</definition>
        <argsstring>(Tensor&lt; F &gt; &amp;t)</argsstring>
        <name>filterOutSpinFlipEntries</name>
        <param>
          <type><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor</ref>&lt; F &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/sisi4s/sisi4s/src/algorithms/CcsdPreconditioner.cxx" line="18" column="6" bodyfile="/home/runner/work/sisi4s/sisi4s/src/algorithms/CcsdPreconditioner.cxx" bodystart="18" bodyend="52"/>
        <references refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" compoundref="AngularMomentum_8hpp" startline="8">am::F</references>
        <referencedby refid="classsisi4s_1_1CcsdPreconditioner_1a885a0ffef1ab5a039a69e40e8e8b1c09" compoundref="CcsdPreconditioner_8cxx" startline="162" endline="318">sisi4s::CcsdPreconditioner&lt; F &gt;::getInitialBasis</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="CcsdPreconditioner_8hpp" kindref="compound">algorithms/CcsdPreconditioner.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="RandomTensor_8hpp" kindref="compound">math/RandomTensor.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="MpiCommunicator_8hpp" kindref="compound">util/MpiCommunicator.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="MathFunctions_8hpp" kindref="compound">math/MathFunctions.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="FockVector_8hpp" kindref="compound">math/FockVector.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ComplexTensor_8hpp" kindref="compound">math/ComplexTensor.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Log_8hpp" kindref="compound">util/Log.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="TensorIo_8hpp" kindref="compound">util/TensorIo.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Exception_8hpp" kindref="compound">util/Exception.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Tensor_8hpp" kindref="compound">util/Tensor.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Sisi4s_8hpp" kindref="compound">Sisi4s.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="SharedPointer_8hpp" kindref="compound">util/SharedPointer.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesisi4s" kindref="compound">sisi4s</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="18" refid="CcsdPreconditioner_8cxx_1a279086f8f72e73ab4de59fe05b1fd760" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CcsdPreconditioner_8cxx_1a279086f8f72e73ab4de59fe05b1fd760" kindref="member">filterOutSpinFlipEntries</ref>(<ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref><sp/>&amp;t){</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>int64_t<sp/>nValues;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>int64_t<sp/>*globalIndices;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>*values;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order(t.order);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>values<sp/>of<sp/>the<sp/>tensor<sp/>in<sp/>the<sp/>current<sp/>processor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>t.read_local(&amp;nValues,<sp/>&amp;globalIndices,<sp/>&amp;values);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nValues;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>globalIndices[i];</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>global<sp/>index<sp/>&quot;carry&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gc<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>selector<sp/>for<sp/>the<sp/>case<sp/>where<sp/>crossterms<sp/>appear</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>up(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>down(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>o(0);<sp/>o<sp/>&lt;<sp/>order;<sp/>o++)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modulizer<sp/>=<sp/>t.lens[o];</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ijk<sp/>=<sp/>gc<sp/>%<sp/>modulizer;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>up<sp/>=<sp/>up<sp/>&amp;&amp;<sp/>(ijk<sp/>%<sp/>2<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>down<sp/>=<sp/>down<sp/>&amp;&amp;<sp/>((ijk<sp/>%<sp/>2<sp/>+<sp/>1)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gc<sp/>/=<sp/>modulizer;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>up<sp/>and<sp/>down<sp/>are<sp/>zero,<sp/>it<sp/>means<sp/>that<sp/>at<sp/>some<sp/>point<sp/>the<sp/>the<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>were<sp/>part<sp/>of<sp/>a<sp/>cross-term<sp/>element,<sp/>this<sp/>should<sp/>the<sp/>be<sp/>set<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>we&apos;re<sp/>filtering<sp/>out<sp/>the<sp/>terms<sp/>of<sp/>this<sp/>kind.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(up<sp/>||<sp/>down))<sp/>{<sp/>values[i]<sp/>=<sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref>(0);<sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>we<sp/>have<sp/>to<sp/>write<sp/>the<sp/>values<sp/>back<sp/>into<sp/>the<sp/>tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>t.write(nValues,<sp/>globalIndices,<sp/>values);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clean<sp/>up<sp/>the<sp/>mess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>values;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>globalIndices;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="61" refid="classEomDiagonalValueComparator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classEomDiagonalValueComparator" kindref="compound">EomDiagonalValueComparator</ref><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="63" refid="classEomDiagonalValueComparator_1afea547026c2f888a54dca308ccaae0bf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classEomDiagonalValueComparator_1afea547026c2f888a54dca308ccaae0bf" kindref="member">operator ()</ref>(</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;int,<sp/>F&gt;<sp/>&amp;a,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;int,<sp/>F&gt;<sp/>&amp;b</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>A(</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">std::abs</ref>(a.second)<sp/>&lt;<sp/>1E-13<sp/>?</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;F&gt;::infinity()<sp/>:<sp/>a.second</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>B(</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">std::abs</ref>(b.second)<sp/>&lt;<sp/>1E-13<sp/>?</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;F&gt;::infinity()<sp/>:<sp/>b.second</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diff(<ref refid="classEomDiagonalValueComparator_1a7d3a474a133d3406978510d400ad4809" kindref="member">computeDifference</ref>(A,<sp/>B));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>maintain<sp/>magnitude<sp/>finite!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>magnitude(<ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">std::abs</ref>(a.second)+<ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">std::abs</ref>(b.second));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff<sp/>&gt;<sp/>+1E-13*magnitude)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff<sp/>&lt;<sp/>-1E-13*magnitude)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.first<sp/>&lt;<sp/>b.first;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="classEomDiagonalValueComparator_1a7d3a474a133d3406978510d400ad4809" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classEomDiagonalValueComparator_1a7d3a474a133d3406978510d400ad4809" kindref="member">computeDifference</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>-<sp/>a;<sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">};</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="88" refid="classEomDiagonalValueComparator_1a36d700a963e58dc20e6584fa96ad94fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classEomDiagonalValueComparator_1a7d3a474a133d3406978510d400ad4809" kindref="member">EomDiagonalValueComparator&lt;sisi4s::complex&gt;::computeDifference</ref>(</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1ad0bccf74d238a6fc69868a9439dd9e7f" kindref="member">sisi4s::complex</ref><sp/>&amp;a,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1ad0bccf74d238a6fc69868a9439dd9e7f" kindref="member">sisi4s::complex</ref><sp/>&amp;b</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diff(b.imag()<sp/>+<sp/>b.real()<sp/>-<sp/>a.imag()<sp/>-<sp/>a.real());</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>diff;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="98" refid="classsisi4s_1_1CcsdPreconditioner_1a19116638d58b82947dc20c9d75e2fa36" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1CcsdPreconditioner" kindref="compound">CcsdPreconditioner&lt;F&gt;::calculateDiagonal</ref>(){</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>diagonalH<sp/>=<sp/><ref refid="SharedPointer_8hpp_1a106f61c342cfd013eb570c37328070ae" kindref="member">NEW</ref>(<ref refid="classsisi4s_1_1SDFockVector" kindref="compound">V</ref>,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<ref refid="SharedPointer_8hpp_1a741e091aff51aed5f16b309962085404" kindref="member">PTR</ref>(<ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref>)&gt;(</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<ref refid="SharedPointer_8hpp_1a106f61c342cfd013eb570c37328070ae" kindref="member">NEW</ref>(<ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref>,<sp/>*Tai),<sp/><ref refid="SharedPointer_8hpp_1a106f61c342cfd013eb570c37328070ae" kindref="member">NEW</ref>(<ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref>,<sp/>*Tabij)}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>),</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;({</highlight><highlight class="stringliteral">&quot;ai&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;abij&quot;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pointers<sp/>to<sp/>singles<sp/>and<sp/>doubles<sp/>tensors<sp/>of<sp/>diagonal<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Dai(<sp/>diagonalH-&gt;get(0)<sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Dabij(<sp/>diagonalH-&gt;get(1)<sp/>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Maybe<sp/>insert<sp/>the<sp/>Tai<sp/>part<sp/>to<sp/>the<sp/>diagonal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>diagonal<sp/>elements<sp/>of<sp/>H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>(*Dai)[</highlight><highlight class="stringliteral">&quot;bi&quot;</highlight><highlight class="normal">]<sp/>=<sp/><sp/>(<sp/>-<sp/>1.0<sp/>)<sp/>*<sp/>(*Fij)[</highlight><highlight class="stringliteral">&quot;ii&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>(*Dai)[</highlight><highlight class="stringliteral">&quot;bi&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>(<sp/>+<sp/>1.0<sp/>)<sp/>*<sp/>(*Fab)[</highlight><highlight class="stringliteral">&quot;bb&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/>if<sp/>(Viajb)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dai)[&quot;bi&quot;]<sp/>+=<sp/>(<sp/>-<sp/>1.0<sp/>)<sp/>*<sp/>(*Viajb)[&quot;ibib&quot;];</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/>if<sp/>(Vijab)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dai)[&quot;bi&quot;]<sp/>+=<sp/>(<sp/>+<sp/>1.0<sp/>)<sp/>*<sp/>(*Tabij)[&quot;cbli&quot;]<sp/>*<sp/>(*Vijab)[&quot;licb&quot;];</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dai)[&quot;bi&quot;]<sp/>+=<sp/>(<sp/>-<sp/>0.5<sp/>)<sp/>*<sp/>(*Tabij)[&quot;cdmi&quot;]<sp/>*<sp/>(*Vijab)[&quot;micd&quot;];</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dai)[&quot;bi&quot;]<sp/>+=<sp/>(<sp/>-<sp/>0.5<sp/>)<sp/>*<sp/>(*Tabij)[&quot;cblm&quot;]<sp/>*<sp/>(*Vijab)[&quot;lmcb&quot;];</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>(*Dabij)[</highlight><highlight class="stringliteral">&quot;cdij&quot;</highlight><highlight class="normal">]<sp/>=<sp/><sp/>(<sp/>-<sp/>1.0<sp/>)<sp/>*<sp/>(*Fij)[</highlight><highlight class="stringliteral">&quot;ii&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>(*Dabij)[</highlight><highlight class="stringliteral">&quot;cdij&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>(<sp/>-<sp/>1.0<sp/>)<sp/>*<sp/>(*Fij)[</highlight><highlight class="stringliteral">&quot;jj&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>(*Dabij)[</highlight><highlight class="stringliteral">&quot;cdij&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>(<sp/>+<sp/>1.0<sp/>)<sp/>*<sp/>(*Fab)[</highlight><highlight class="stringliteral">&quot;cc&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>(*Dabij)[</highlight><highlight class="stringliteral">&quot;cdij&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>(<sp/>+<sp/>1.0<sp/>)<sp/>*<sp/>(*Fab)[</highlight><highlight class="stringliteral">&quot;dd&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/>if<sp/>(Vijkl)<sp/>(*Dabij)[&quot;cdij&quot;]<sp/>+=<sp/>(<sp/>+<sp/>0.5<sp/>)<sp/>*<sp/>(*Vijkl)[&quot;ijij&quot;];</highlight></codeline>
<codeline lineno="131"><highlight class="comment"></highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/>if<sp/>(Viajb)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dabij)[&quot;ccij&quot;]<sp/>+=<sp/>(<sp/>+<sp/>1.0<sp/>)<sp/>*<sp/>(*Viajb)[&quot;icic&quot;];</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dabij)[&quot;cdij&quot;]<sp/>+=<sp/>(<sp/>-<sp/>1.0<sp/>)<sp/>*<sp/>(*Viajb)[&quot;icic&quot;];</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dabij)[&quot;ccii&quot;]<sp/>+=<sp/>(<sp/>-<sp/>1.0<sp/>)<sp/>*<sp/>(*Viajb)[&quot;icic&quot;];</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dabij)[&quot;cdii&quot;]<sp/>+=<sp/>(<sp/>+<sp/>1.0<sp/>)<sp/>*<sp/>(*Viajb)[&quot;icic&quot;];</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="comment"></highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/>if<sp/>(Vabcd)<sp/>(*Dabij)[&quot;cdij&quot;]<sp/>+=<sp/>(<sp/>+<sp/>0.5<sp/>)<sp/>*<sp/>(*Vabcd)[&quot;cdcd&quot;];</highlight></codeline>
<codeline lineno="140"><highlight class="comment"></highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/>if<sp/>(Vijab)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dabij)[&quot;ccij&quot;]<sp/>+=<sp/>(<sp/>+<sp/>0.5<sp/>)<sp/>*<sp/>(*Tabij)[&quot;ecij&quot;]<sp/>*<sp/>(*Vijab)[&quot;ijec&quot;];</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dabij)[&quot;cdij&quot;]<sp/>+=<sp/>(<sp/>-<sp/>0.5<sp/>)<sp/>*<sp/>(*Tabij)[&quot;ecij&quot;]<sp/>*<sp/>(*Vijab)[&quot;ijec&quot;];</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dabij)[&quot;cdij&quot;]<sp/>+=<sp/>(<sp/>+<sp/>0.25)<sp/>*<sp/>(*Tabij)[&quot;efij&quot;]<sp/>*<sp/>(*Vijab)[&quot;ijef&quot;];</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dabij)[&quot;cdij&quot;]<sp/>+=<sp/>(<sp/>-<sp/>0.5<sp/>)<sp/>*<sp/>(*Tabij)[&quot;cdmi&quot;]<sp/>*<sp/>(*Vijab)[&quot;micd&quot;];</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dabij)[&quot;cdii&quot;]<sp/>+=<sp/>(<sp/>+<sp/>0.5<sp/>)<sp/>*<sp/>(*Tabij)[&quot;cdmi&quot;]<sp/>*<sp/>(*Vijab)[&quot;micd&quot;];</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dabij)[&quot;ccij&quot;]<sp/>+=<sp/>(<sp/>-<sp/>1.0<sp/>)<sp/>*<sp/>(*Tabij)[&quot;ecni&quot;]<sp/>*<sp/>(*Vijab)[&quot;niec&quot;];</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dabij)[&quot;cdij&quot;]<sp/>+=<sp/>(<sp/>+<sp/>1.0<sp/>)<sp/>*<sp/>(*Tabij)[&quot;ecni&quot;]<sp/>*<sp/>(*Vijab)[&quot;niec&quot;];</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dabij)[&quot;ccii&quot;]<sp/>+=<sp/>(<sp/>+<sp/>1.0<sp/>)<sp/>*<sp/>(*Tabij)[&quot;ecni&quot;]<sp/>*<sp/>(*Vijab)[&quot;niec&quot;];</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dabij)[&quot;cdii&quot;]<sp/>+=<sp/>(<sp/>-<sp/>1.0<sp/>)<sp/>*<sp/>(*Tabij)[&quot;ecni&quot;]<sp/>*<sp/>(*Vijab)[&quot;niec&quot;];</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dabij)[&quot;cdij&quot;]<sp/>+=<sp/>(<sp/>-<sp/>0.5<sp/>)<sp/>*<sp/>(*Tabij)[&quot;efoi&quot;]<sp/>*<sp/>(*Vijab)[&quot;oief&quot;];</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dabij)[&quot;cdii&quot;]<sp/>+=<sp/>(<sp/>+<sp/>0.5<sp/>)<sp/>*<sp/>(*Tabij)[&quot;efoi&quot;]<sp/>*<sp/>(*Vijab)[&quot;oief&quot;];</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dabij)[&quot;cdij&quot;]<sp/>+=<sp/>(<sp/>+<sp/>0.25)<sp/>*<sp/>(*Tabij)[&quot;cdmn&quot;]<sp/>*<sp/>(*Vijab)[&quot;mncd&quot;];</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dabij)[&quot;ccij&quot;]<sp/>+=<sp/>(<sp/>+<sp/>0.5<sp/>)<sp/>*<sp/>(*Tabij)[&quot;ecno&quot;]<sp/>*<sp/>(*Vijab)[&quot;noec&quot;];</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/>(*Dabij)[&quot;cdij&quot;]<sp/>+=<sp/>(<sp/>-<sp/>0.5<sp/>)<sp/>*<sp/>(*Tabij)[&quot;ecno&quot;]<sp/>*<sp/>(*Vijab)[&quot;noec&quot;];</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">std::vector&lt;SDFockVector&lt;F&gt;&gt;</highlight></codeline>
<codeline lineno="162" refid="classsisi4s_1_1CcsdPreconditioner_1a885a0ffef1ab5a039a69e40e8e8b1c09" refkind="member"><highlight class="normal"><ref refid="classsisi4s_1_1CcsdPreconditioner" kindref="compound">CcsdPreconditioner&lt;F&gt;::getInitialBasis</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eigenVectorsCount)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>calculateDiagonal();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;CcsdPreconditioner&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Getting<sp/>initial<sp/>basis<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(preconditionerRandom)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;CcsdPreconditioner&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Randomizing<sp/>initial<sp/>guess&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1DefaultRandomEngine" kindref="compound">DefaultRandomEngine</ref><sp/>randomEngine;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>std::normal_distribution&lt;double&gt;<sp/>normalDistribution(</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>0.0,<sp/>preconditionerRandomSigma</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>K=eigenVectorsCount<sp/>lowest<sp/>diagonal<sp/>elements<sp/>at<sp/>each<sp/>processor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>std::vector&lt;std::pair&lt;size_t,<sp/>F&gt;&gt;<sp/>localElements(<sp/>diagonalH-&gt;readLocal()<sp/>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>the<sp/>local<sp/>elements<sp/>according<sp/>to<sp/>the<sp/>eom<sp/>comparator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>std::sort(</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>localElements.begin(),<sp/>localElements.end(),</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEomDiagonalValueComparator" kindref="compound">EomDiagonalValueComparator&lt;F&gt;</ref>()</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>localElementsSize(<sp/>localElements.size()<sp/>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gather<sp/>all<sp/>K<sp/>elements<sp/>of<sp/>all<sp/>processors<sp/>at<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>convert<sp/>into<sp/>homogeneous<sp/>arrays<sp/>for<sp/>MPI<sp/>gather</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>trialEigenVectorsCount(10*eigenVectorsCount);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>std::vector&lt;size_t&gt;<sp/>localLowestElementIndices(trialEigenVectorsCount);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>std::vector&lt;F&gt;<sp/>localLowestElementValues(trialEigenVectorsCount);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>local<sp/>elements<sp/>indices<sp/>and<sp/>values<sp/>into<sp/>their<sp/>own<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>&lt;<sp/>std::min(localElementsSize,<sp/>trialEigenVectorsCount);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>++i</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>localLowestElementIndices[i]<sp/>=<sp/>localElements[i].first;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>localLowestElementValues[i]<sp/>=<sp/>localElements[i].second;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1MpiCommunicator" kindref="compound">MpiCommunicator</ref><sp/>communicator(*Sisi4s::world);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>std::vector&lt;size_t&gt;<sp/>lowestElementIndices;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>std::vector&lt;F&gt;<sp/>lowestElementValues;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>local<sp/>lowest<sp/>(indices<sp/>or<sp/>values)<sp/>into<sp/>a<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>communicator.<ref refid="classsisi4s_1_1MpiCommunicator_1a4920d7e68dfa8c38de024795a264527f" kindref="member">gather</ref>(localLowestElementIndices,<sp/>lowestElementIndices);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>communicator.<ref refid="classsisi4s_1_1MpiCommunicator_1a4920d7e68dfa8c38de024795a264527f" kindref="member">gather</ref>(localLowestElementValues,<sp/>lowestElementValues);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>convert<sp/>back<sp/>into<sp/>(index,value)<sp/>pairs<sp/>for<sp/>sorting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>std::vector&lt;std::pair&lt;size_t,<sp/>F&gt;&gt;<sp/>lowestElements(lowestElementValues.size());</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>lowestElementValues.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>lowestElements[i].first<sp/>=<sp/>lowestElementIndices[i];</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>lowestElements[i].second<sp/>=<sp/>lowestElementValues[i];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>globally<sp/>lowest<sp/>K<sp/>diagonal<sp/>elements<sp/>among<sp/>the<sp/>gathered<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>std::sort(</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>lowestElements.begin(),<sp/>lowestElements.end(),</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEomDiagonalValueComparator" kindref="compound">EomDiagonalValueComparator&lt;F&gt;</ref>()</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>rank==0<sp/>(root)<sp/>lowestElements<sp/>contains<sp/>K*Np<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rank<sp/>&gt;<sp/>0<sp/>has<sp/>an<sp/>empty<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>basis<sp/>vectors<sp/>for<sp/>each<sp/>lowest<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>std::vector&lt;V&gt;<sp/>basis;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentEigenVectorCount(0);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loopCount(0);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zeroVectorCount(0);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(currentEigenVectorCount<sp/>&lt;<sp/>eigenVectorsCount)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1SDFockVector" kindref="compound">V</ref><sp/>basisElement(*diagonalH);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>basisElement<sp/>*=<sp/>0.0;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;size_t,F&gt;&gt;<sp/>elements;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(communicator.<ref refid="classsisi4s_1_1MpiCommunicator_1a0e6f9439058e7c3685f2f05a40cda46a" kindref="member">getRank</ref>()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>loopCount<sp/>&gt;=<sp/>lowestElements.size()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="Exception_8hpp_1aa49c727f91093a79c46ee6ecd83548bb" kindref="member">EXCEPTION</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>more<sp/>elements<sp/>to<sp/>create<sp/>initial<sp/>basis&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>a<sp/>a<sp/>pair<sp/>in<sp/>the<sp/>elements<sp/>(globalIndex,<sp/>1.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elements.push_back(</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(lowestElements[loopCount].first,<sp/>1.0)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>basisElement.<ref refid="classsisi4s_1_1FockVector_1af3f1a3e793e9dc55958b795c7672f9de" kindref="member">write</ref>(elements);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>random<sp/>transformation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(preconditionerRandom)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Rai(*basisElement.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(0));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Rabij(*basisElement.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1));</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesisi4s_1adb5622106d23e3d14c736c4793512e5c" kindref="member">setRandomTensor</ref>(Rai,<sp/>normalDistribution,<sp/>randomEngine);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesisi4s_1adb5622106d23e3d14c736c4793512e5c" kindref="member">setRandomTensor</ref>(Rabij,<sp/>normalDistribution,<sp/>randomEngine);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*basisElement.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(0))[</highlight><highlight class="stringliteral">&quot;ai&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>Rai[</highlight><highlight class="stringliteral">&quot;ai&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*basisElement.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;abij&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>Rabij[</highlight><highlight class="stringliteral">&quot;abij&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FILTER:<sp/>unphysical<sp/>components<sp/>from<sp/>the<sp/>basisElement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>(*basisElement.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;abii&quot;</highlight><highlight class="normal">]=0.0;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>(*basisElement.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;aaij&quot;</highlight><highlight class="normal">]=0.0;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>(*basisElement.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;aaii&quot;</highlight><highlight class="normal">]=0.0;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FILTER:<sp/>Antisymmetrize<sp/>the<sp/>new<sp/>basis<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>(*basisElement.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;abij&quot;</highlight><highlight class="normal">]<sp/>-=<sp/>(*basisElement.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;abji&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>(*basisElement.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;abij&quot;</highlight><highlight class="normal">]<sp/>-=<sp/>(*basisElement.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;baij&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FILTER:<sp/>Spin<sp/>Flip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spinFlip)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;CcsdPreconditioner&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Filtering<sp/>out<sp/>spin<sp/>flip&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;t:<sp/>basisElement.<ref refid="classsisi4s_1_1FockVector_1a76a336f18f4fc9a70c6b31406b8d6717" kindref="member">componentTensors</ref>)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CcsdPreconditioner_8cxx_1a279086f8f72e73ab4de59fe05b1fd760" kindref="member">filterOutSpinFlipEntries</ref>(*t);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FILTER:<sp/>Grams-schmidt<sp/>it<sp/>with<sp/>the<sp/>other<sp/>elements<sp/>of<sp/>the<sp/>basis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j(0);<sp/>j<sp/>&lt;<sp/>basis.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>basisElement<sp/>-=<sp/>basis[j]<sp/>*<sp/>basis[j].<ref refid="classsisi4s_1_1FockVector_1a7f7a9ea49d5eb503a988858d1b9e76cb" kindref="member">dot</ref>(basisElement);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalize<sp/>basisElement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>basisElementNorm(<ref refid="namespacesisi4s_1a40947d88c4989cacff153a78af67f686" kindref="member">std::sqrt</ref>(basisElement.<ref refid="classsisi4s_1_1FockVector_1a7f7a9ea49d5eb503a988858d1b9e76cb" kindref="member">dot</ref>(basisElement)));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>basisElementNorm<sp/>is<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">std::abs</ref>(basisElementNorm)<sp/>&lt;<sp/>1e-10<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zeroVectorCount++;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>loopCount++;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a8839cdf651ee7aca0c558a57fbcca7a1" kindref="member">OUT</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tbasisSize=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>basis.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>basisElement<sp/>=<sp/>1.0<sp/>/<sp/><ref refid="namespacesisi4s_1a40947d88c4989cacff153a78af67f686" kindref="member">std::sqrt</ref>(basisElement.<ref refid="classsisi4s_1_1FockVector_1a7f7a9ea49d5eb503a988858d1b9e76cb" kindref="member">dot</ref>(basisElement))*basisElement;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>basisElementNorm<sp/>=<sp/><ref refid="namespacesisi4s_1a40947d88c4989cacff153a78af67f686" kindref="member">std::sqrt</ref>(basisElement.<ref refid="classsisi4s_1_1FockVector_1a7f7a9ea49d5eb503a988858d1b9e76cb" kindref="member">dot</ref>(basisElement));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>loopCount++;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">std::abs</ref>(basisElementNorm<sp/>-<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(1))<sp/>&gt;<sp/>1e-10<sp/>*<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(1))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>currentEigenVectorCount++;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>got<sp/>here,<sp/>basisElement<sp/>is<sp/>a<sp/>valid<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>basis.push_back(basisElement);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>make<sp/>sure<sp/>that<sp/>you<sp/>are<sp/>giving<sp/>an<sp/>antisymmetric<sp/>basis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>also<sp/>that<sp/>it<sp/>is<sp/>grammschmited<sp/>afterwards</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//LOG(1,&quot;CcsdPreconditioner&quot;)<sp/>&lt;&lt;<sp/>&quot;Antisymmetrize<sp/>basis&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//for<sp/>(unsigned<sp/>int<sp/>j(0);<sp/>j<sp/>&lt;<sp/>basis.size();<sp/>++j)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*basis[j].get(1))[&quot;abij&quot;]<sp/>-=<sp/>(*basis[j].get(1))[&quot;abji&quot;];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*basis[j].get(1))[&quot;abij&quot;]<sp/>-=<sp/>(*basis[j].get(1))[&quot;baij&quot;];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//LOG(1,&quot;CcsdPreconditioner&quot;)<sp/>&lt;&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&quot;Performing<sp/>Gramm<sp/>Schmidt<sp/>in<sp/>the<sp/>initial<sp/>basis&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//for<sp/>(unsigned<sp/>int<sp/>b(0);<sp/>b<sp/>&lt;<sp/>basis.size();<sp/>++b)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//V<sp/>newVector(basis[b]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>(unsigned<sp/>int<sp/>j(0);<sp/>j<sp/>&lt;<sp/>b;<sp/>++j)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//newVector<sp/>-=<sp/>basis[j]<sp/>*<sp/>basis[j].dot(basis[b]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight></codeline>
<codeline lineno="312"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//basis[b]<sp/>=<sp/>1<sp/>/<sp/>std::sqrt(newVector.dot(newVector))<sp/>*<sp/>newVector;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a8839cdf651ee7aca0c558a57fbcca7a1" kindref="member">OUT</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\treturning<sp/>vecs<sp/>=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>basis.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>basis;</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><ref refid="classsisi4s_1_1SDTFockVector" kindref="compound">SDTFockVector&lt;F&gt;</ref></highlight></codeline>
<codeline lineno="322" refid="classsisi4s_1_1CcsdPreconditioner_1a29ac0b00a098edfe1d72c32a009f2b99" refkind="member"><highlight class="normal"><ref refid="classsisi4s_1_1CcsdPreconditioner" kindref="compound">CcsdPreconditioner&lt;F&gt;::getCorrection</ref>(</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1ad0bccf74d238a6fc69868a9439dd9e7f" kindref="member">sisi4s::complex</ref><sp/>lambda,<sp/><ref refid="classsisi4s_1_1SDTFockVector" kindref="compound">SDTFockVector&lt;F&gt;</ref><sp/>&amp;residuum</highlight></codeline>
<codeline lineno="324"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cast<sp/>ccsdt<sp/>into<sp/>ccsd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1SDFockVector" kindref="compound">V</ref><sp/>w(residuum);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>the<sp/>old<sp/>getCorrection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>cast<sp/>again<sp/>into<sp/>a<sp/>ccsdt<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1SDTFockVector" kindref="compound">SDTFockVector&lt;F&gt;</ref><sp/>result(getCorrection(lambda,<sp/>w));</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>et<sp/>voila</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><ref refid="classsisi4s_1_1SFockVector" kindref="compound">SFockVector&lt;F&gt;</ref></highlight></codeline>
<codeline lineno="336" refid="classsisi4s_1_1CcsdPreconditioner_1a4c7be99d9f26627b2a51cc34cd1d750c" refkind="member"><highlight class="normal"><ref refid="classsisi4s_1_1CcsdPreconditioner" kindref="compound">CcsdPreconditioner&lt;F&gt;::getCorrection</ref>(</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1ad0bccf74d238a6fc69868a9439dd9e7f" kindref="member">sisi4s::complex</ref><sp/>lambda,<sp/><ref refid="classsisi4s_1_1SFockVector" kindref="compound">SFockVector&lt;F&gt;</ref><sp/>&amp;residuum</highlight></codeline>
<codeline lineno="338"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cast<sp/>s<sp/>into<sp/>sd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1SDFockVector" kindref="compound">SDFockVector&lt;F&gt;</ref><sp/>w(residuum);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>the<sp/>old<sp/>getCorrection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>cast<sp/>again<sp/>into<sp/>a<sp/>ccsdt<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1SFockVector" kindref="compound">SFockVector&lt;F&gt;</ref><sp/>result(getCorrection(lambda,<sp/>w));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>et<sp/>voila</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><ref refid="classsisi4s_1_1SDFockVector" kindref="compound">SDFockVector&lt;F&gt;</ref></highlight></codeline>
<codeline lineno="350" refid="classsisi4s_1_1CcsdPreconditioner_1a8aefba0b3f2b4c128f69d6e5eaf5a1fc" refkind="member"><highlight class="normal"><ref refid="classsisi4s_1_1CcsdPreconditioner" kindref="compound">CcsdPreconditioner&lt;F&gt;::getCorrection</ref>(</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1ad0bccf74d238a6fc69868a9439dd9e7f" kindref="member">sisi4s::complex</ref><sp/>lambda,<sp/><ref refid="classsisi4s_1_1SDFockVector" kindref="compound">SDFockVector&lt;F&gt;</ref><sp/>&amp;residuum</highlight></codeline>
<codeline lineno="352"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1SDFockVector" kindref="compound">SDFockVector&lt;F&gt;</ref><sp/>w(*diagonalH);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>singleton<sp/>helping<sp/>class<sp/>for<sp/>the<sp/>diagonal<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DiagonalCorrection<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DiagonalCorrection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda_):<sp/>lambda(lambda_)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>operator<sp/>()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>residuumElement,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>diagonalElement)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">std::abs</ref>(lambda<sp/>-<sp/>diagonalElement)<sp/>&lt;<sp/>1E-4<sp/>?</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0<sp/>:<sp/>residuumElement<sp/>/<sp/>(lambda<sp/>-<sp/>diagonalElement);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>}<sp/>diagonalCorrection(std::real(lambda));</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1SDFockVector" kindref="compound">SDFockVector&lt;F&gt;</ref><sp/>correction(*diagonalH);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>((lambda<sp/>*<sp/>id<sp/>-<sp/>Diag(diagonal))^-1)<sp/>.<sp/>residuum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c(0);<sp/>c<sp/>&lt;<sp/>w.<ref refid="classsisi4s_1_1FockVector_1ad754c5d7c0cb7ab1a487f1f640d7d877" kindref="member">getComponentsCount</ref>();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*indices(<sp/>correction.<ref refid="classsisi4s_1_1FockVector_1a931498ce2090f83bcff10de589035874" kindref="member">componentIndices</ref>[c].c_str()<sp/>);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>(*correction.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(c)).contract(</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1.0,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*residuum.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(c),indices,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*diagonalH-&gt;get(c),indices,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0.0,indices,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CTF::Bivar_Function&lt;F&gt;(diagonalCorrection)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Filter<sp/>out<sp/>unphysical<sp/>components<sp/>from<sp/>the<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>(*correction.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;abii&quot;</highlight><highlight class="normal">]=0.0;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>(*correction.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;aaij&quot;</highlight><highlight class="normal">]=0.0;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>(*correction.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;aaii&quot;</highlight><highlight class="normal">]=0.0;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Antisymmetrize<sp/>the<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>(*correction.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;abij&quot;</highlight><highlight class="normal">]<sp/>-=<sp/>(*correction.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;abji&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>(*correction.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;abij&quot;</highlight><highlight class="normal">]<sp/>-=<sp/>(*correction.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;baij&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>(*correction.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;abij&quot;</highlight><highlight class="normal">]<sp/>=<sp/>0.25<sp/>*<sp/>(*correction.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;abij&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>correction;</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="394" refid="classsisi4s_1_1EACcsdPreconditioner_1a89640a853e0078f550b55b948ffb944f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1EACcsdPreconditioner" kindref="compound">EACcsdPreconditioner&lt;F&gt;::calculateDiagonal</ref>(){</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>No(this-&gt;Fij-&gt;lens[0]),<sp/>Nv(this-&gt;Fab-&gt;lens[0]);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v{{Nv}},<sp/>vvo{{Nv,<sp/>Nv,<sp/>No}},<sp/>ns{{NS}},<sp/>nss{{NS,NS,NS}};</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>Fij<sp/>=<sp/>this-&gt;Fij;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>Fab<sp/>=<sp/>this-&gt;Fab;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>this-&gt;diagonalH<sp/>=<sp/><ref refid="SharedPointer_8hpp_1a106f61c342cfd013eb570c37328070ae" kindref="member">NEW</ref>(<ref refid="classsisi4s_1_1SDFockVector" kindref="compound">SDFockVector&lt;F&gt;</ref>,<sp/>std::vector&lt;<ref refid="SharedPointer_8hpp_1a741e091aff51aed5f16b309962085404" kindref="member">PTR</ref>(<ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref>)&gt;({</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="SharedPointer_8hpp_1a106f61c342cfd013eb570c37328070ae" kindref="member">NEW</ref>(<ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref>,<sp/>1,<sp/>v.data(),<sp/>ns.data(),<sp/>*Sisi4s::world,<sp/></highlight><highlight class="stringliteral">&quot;Da&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="SharedPointer_8hpp_1a106f61c342cfd013eb570c37328070ae" kindref="member">NEW</ref>(<ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref>,<sp/>3,<sp/>vvo.data(),<sp/>nss.data(),<sp/>*Sisi4s::world,<sp/></highlight><highlight class="stringliteral">&quot;Dabi&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>),</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;({</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;abi&quot;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Da(this-&gt;diagonalH-&gt;get(0));</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Dabi(this-&gt;diagonalH-&gt;get(1));</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>diagonal<sp/>elements<sp/>of<sp/>H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>(*Da)[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">]<sp/>=<sp/><sp/>(<sp/>+<sp/>1.0<sp/>)<sp/>*<sp/>(*Fab)[</highlight><highlight class="stringliteral">&quot;aa&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>(*Dabi)[</highlight><highlight class="stringliteral">&quot;cdi&quot;</highlight><highlight class="normal">]<sp/>=<sp/><sp/>(<sp/>-<sp/>1.0<sp/>)<sp/>*<sp/>(*Fij)[</highlight><highlight class="stringliteral">&quot;ii&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>(*Dabi)[</highlight><highlight class="stringliteral">&quot;cdi&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>(<sp/>-<sp/>1.0<sp/>)<sp/>*<sp/>(*Fij)[</highlight><highlight class="stringliteral">&quot;jj&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>(*Dabi)[</highlight><highlight class="stringliteral">&quot;cdi&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>(<sp/>+<sp/>1.0<sp/>)<sp/>*<sp/>(*Fab)[</highlight><highlight class="stringliteral">&quot;cc&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>(*Dabi)[</highlight><highlight class="stringliteral">&quot;cdi&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>(<sp/>+<sp/>1.0<sp/>)<sp/>*<sp/>(*Fab)[</highlight><highlight class="stringliteral">&quot;dd&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="423"><highlight class="normal">std::vector&lt;SDFockVector&lt;F&gt;&gt;</highlight></codeline>
<codeline lineno="424" refid="classsisi4s_1_1EACcsdPreconditioner_1a49913544736063c43e265facdc2cc393" refkind="member"><highlight class="normal"><ref refid="classsisi4s_1_1EACcsdPreconditioner" kindref="compound">EACcsdPreconditioner&lt;F&gt;::getInitialBasis</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eigenVectorsCount)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>calculateDiagonal();</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;EACcsdPreconditioner&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Getting<sp/>initial<sp/>basis<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>K=eigenVectorsCount<sp/>lowest<sp/>diagonal<sp/>elements<sp/>at<sp/>each<sp/>processor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>std::vector&lt;std::pair&lt;size_t,<sp/>F&gt;&gt;<sp/>localElements(this-&gt;diagonalH-&gt;readLocal());</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>std::sort(</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>localElements.begin(),<sp/>localElements.end(),</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEomDiagonalValueComparator" kindref="compound">EomDiagonalValueComparator&lt;F&gt;</ref>()</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>localElementsSize(localElements.size()<sp/>);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gather<sp/>all<sp/>K<sp/>elements<sp/>of<sp/>all<sp/>processors<sp/>at<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>convert<sp/>into<sp/>homogeneous<sp/>arrays<sp/>for<sp/>MPI<sp/>gather</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>trialEigenVectorsCount(10*eigenVectorsCount);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>std::vector&lt;size_t&gt;<sp/>localLowestElementIndices(trialEigenVectorsCount);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>std::vector&lt;F&gt;<sp/>localLowestElementValues(trialEigenVectorsCount);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>&lt;<sp/>std::min(localElementsSize,<sp/>trialEigenVectorsCount);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>++i</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>localLowestElementIndices[i]<sp/>=<sp/>localElements[i].first;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>localLowestElementValues[i]<sp/>=<sp/>localElements[i].second;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1MpiCommunicator" kindref="compound">MpiCommunicator</ref><sp/>communicator(*Sisi4s::world);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>std::vector&lt;size_t&gt;<sp/>lowestElementIndices;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>std::vector&lt;F&gt;<sp/>lowestElementValues;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>communicator.<ref refid="classsisi4s_1_1MpiCommunicator_1a4920d7e68dfa8c38de024795a264527f" kindref="member">gather</ref>(localLowestElementIndices,<sp/>lowestElementIndices);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>communicator.<ref refid="classsisi4s_1_1MpiCommunicator_1a4920d7e68dfa8c38de024795a264527f" kindref="member">gather</ref>(localLowestElementValues,<sp/>lowestElementValues);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>convert<sp/>back<sp/>into<sp/>(index,value)<sp/>pairs<sp/>for<sp/>sorting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>std::vector&lt;std::pair&lt;size_t,<sp/>F&gt;&gt;<sp/>lowestElements(lowestElementValues.size());</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>lowestElementValues.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>lowestElements[i].first<sp/>=<sp/>lowestElementIndices[i];</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>lowestElements[i].second<sp/>=<sp/>lowestElementValues[i];</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>globally<sp/>lowest<sp/>K<sp/>diagonal<sp/>elements<sp/>among<sp/>the<sp/>gathered<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>std::sort(</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>lowestElements.begin(),<sp/>lowestElements.end(),</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEomDiagonalValueComparator" kindref="compound">EomDiagonalValueComparator&lt;F&gt;</ref>()</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>rank==0<sp/>(root)<sp/>lowestElements<sp/>contains<sp/>K*Np<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rank<sp/>&gt;<sp/>0<sp/>has<sp/>an<sp/>empty<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>basis<sp/>vectors<sp/>for<sp/>each<sp/>lowest<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>std::vector&lt;SDFockVector&lt;F&gt;&gt;<sp/>basis;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentEigenVectorCount(0);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b(0);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zeroVectorCount(0);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(currentEigenVectorCount<sp/>&lt;<sp/>eigenVectorsCount)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1SDFockVector" kindref="compound">SDFockVector&lt;F&gt;</ref><sp/>basisElement(*this-&gt;diagonalH);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>basisElement<sp/>*=<sp/>0.0;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;size_t,F&gt;&gt;<sp/>elements;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(communicator.<ref refid="classsisi4s_1_1MpiCommunicator_1a0e6f9439058e7c3685f2f05a40cda46a" kindref="member">getRank</ref>()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>&gt;=<sp/>lowestElements.size()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="Exception_8hpp_1aa49c727f91093a79c46ee6ecd83548bb" kindref="member">EXCEPTION</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>more<sp/>elements<sp/>to<sp/>create<sp/>initial<sp/>basis&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elements.push_back(</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(lowestElements[b].first,<sp/>1.0)</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>basisElement.<ref refid="classsisi4s_1_1FockVector_1af3f1a3e793e9dc55958b795c7672f9de" kindref="member">write</ref>(elements);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(101,<sp/>-70),<sp/>(32,<sp/>-55),<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>b1:<sp/>0...<sp/>1<sp/>(at<sp/>global<sp/>position<sp/>101)<sp/>0<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>b2:<sp/>0...<sp/>1<sp/>(at<sp/>global<sp/>position<sp/>32)<sp/>0<sp/>...i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Filter<sp/>out<sp/>unphysical<sp/>components<sp/>from<sp/>the<sp/>basisElement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>(*basisElement.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;aai&quot;</highlight><highlight class="normal">]=0.0;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Antisymmetrize<sp/>the<sp/>new<sp/>basis<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>(*basisElement.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;abi&quot;</highlight><highlight class="normal">]<sp/>-=<sp/>(*basisElement.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;bai&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(1,<sp/></highlight><highlight class="stringliteral">&quot;EACcsdPreconditioner&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;basis<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>basis.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Grams-schmidt<sp/>it<sp/>with<sp/>the<sp/>other<sp/>elements<sp/>of<sp/>the<sp/>basis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j(0);<sp/>j<sp/>&lt;<sp/>basis.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>basisElement<sp/>-=<sp/>basis[j]<sp/>*<sp/>basis[j].<ref refid="classsisi4s_1_1FockVector_1a7f7a9ea49d5eb503a988858d1b9e76cb" kindref="member">dot</ref>(basisElement);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalize<sp/>basisElement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>basisElementNorm(<ref refid="namespacesisi4s_1a40947d88c4989cacff153a78af67f686" kindref="member">std::sqrt</ref>(basisElement.<ref refid="classsisi4s_1_1FockVector_1a7f7a9ea49d5eb503a988858d1b9e76cb" kindref="member">dot</ref>(basisElement)));</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>basisElementNorm<sp/>is<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">std::abs</ref>(basisElementNorm)<sp/>&lt;<sp/>1e-10<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zeroVectorCount++;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b++;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>basisElement<sp/>=<sp/>1.0<sp/>/<sp/><ref refid="namespacesisi4s_1a40947d88c4989cacff153a78af67f686" kindref="member">std::sqrt</ref>(basisElement.<ref refid="classsisi4s_1_1FockVector_1a7f7a9ea49d5eb503a988858d1b9e76cb" kindref="member">dot</ref>(basisElement))*basisElement;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>basisElementNorm<sp/>=<sp/><ref refid="namespacesisi4s_1a40947d88c4989cacff153a78af67f686" kindref="member">std::sqrt</ref>(basisElement.<ref refid="classsisi4s_1_1FockVector_1a7f7a9ea49d5eb503a988858d1b9e76cb" kindref="member">dot</ref>(basisElement));</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>b++;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">std::abs</ref>(basisElementNorm<sp/>-<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(1))<sp/>&gt;<sp/>1e-10<sp/>*<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(1))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>currentEigenVectorCount++;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>got<sp/>here,<sp/>basisElement<sp/>is<sp/>a<sp/>valid<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>basis.push_back(basisElement);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>basis;</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><ref refid="classsisi4s_1_1SDFockVector" kindref="compound">SDFockVector&lt;F&gt;</ref></highlight></codeline>
<codeline lineno="534" refid="classsisi4s_1_1EACcsdPreconditioner_1ab7ce4b1e3a15799962eac9943236debd" refkind="member"><highlight class="normal"><ref refid="classsisi4s_1_1EACcsdPreconditioner" kindref="compound">EACcsdPreconditioner&lt;F&gt;::getCorrection</ref>(</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1ad0bccf74d238a6fc69868a9439dd9e7f" kindref="member">sisi4s::complex</ref><sp/>lambda,<sp/><ref refid="classsisi4s_1_1SDFockVector" kindref="compound">SDFockVector&lt;F&gt;</ref><sp/>&amp;residuum</highlight></codeline>
<codeline lineno="536"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1SDFockVector" kindref="compound">SDFockVector&lt;F&gt;</ref><sp/>w(*this-&gt;diagonalH);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>singleton<sp/>helping<sp/>class<sp/>for<sp/>the<sp/>diagonal<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DiagonalCorrection<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DiagonalCorrection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda_):<sp/>lambda(lambda_)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>operator<sp/>()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>residuumElement,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>diagonalElement)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">std::abs</ref>(lambda<sp/>-<sp/>diagonalElement)<sp/>&lt;<sp/>1E-4<sp/>?</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0<sp/>:<sp/>residuumElement<sp/>/<sp/>(lambda<sp/>-<sp/>diagonalElement);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>}<sp/>diagonalCorrection(std::real(lambda));</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1SDFockVector" kindref="compound">SDFockVector&lt;F&gt;</ref><sp/>correction(*this-&gt;diagonalH);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>((lambda<sp/>*<sp/>id<sp/>-<sp/>Diag(diagonal))^-1)<sp/>.<sp/>residuum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c(0);<sp/>c<sp/>&lt;<sp/>w.<ref refid="classsisi4s_1_1FockVector_1ad754c5d7c0cb7ab1a487f1f640d7d877" kindref="member">getComponentsCount</ref>();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*indices(<sp/>correction.<ref refid="classsisi4s_1_1FockVector_1a931498ce2090f83bcff10de589035874" kindref="member">componentIndices</ref>[c].c_str()<sp/>);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>(*correction.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(c)).contract(</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1.0,</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*residuum.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(c),indices,</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*this-&gt;diagonalH-&gt;get(c),indices,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0.0,indices,</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CTF::Bivar_Function&lt;F&gt;(diagonalCorrection)</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Filter<sp/>out<sp/>unphysical<sp/>components<sp/>from<sp/>the<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>(*correction.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;aai&quot;</highlight><highlight class="normal">]=0.0;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Antisymmetrize<sp/>the<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>(*correction.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;abi&quot;</highlight><highlight class="normal">]<sp/>-=<sp/>(*correction.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;bai&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>correction;</highlight></codeline>
<codeline lineno="571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="575" refid="classsisi4s_1_1IPCcsdPreconditioner_1a7abf0881240840d5a75fa9ada3aa0eb7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1IPCcsdPreconditioner" kindref="compound">IPCcsdPreconditioner&lt;F&gt;::calculateDiagonal</ref>(){</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>No(this-&gt;Fij-&gt;lens[0]),<sp/>Nv(this-&gt;Fab-&gt;lens[0]);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>o{{No}},<sp/>voo{{Nv,<sp/>No,<sp/>No}},<sp/>ns{{NS}},<sp/>nss{{NS,NS,NS}};</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>Fij<sp/>=<sp/>this-&gt;Fij;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>Fab<sp/>=<sp/>this-&gt;Fab;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>this-&gt;diagonalH<sp/>=<sp/><ref refid="SharedPointer_8hpp_1a106f61c342cfd013eb570c37328070ae" kindref="member">NEW</ref>(<ref refid="classsisi4s_1_1SDFockVector" kindref="compound">SDFockVector&lt;F&gt;</ref>,<sp/>std::vector&lt;<ref refid="SharedPointer_8hpp_1a741e091aff51aed5f16b309962085404" kindref="member">PTR</ref>(<ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref>)&gt;({</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="SharedPointer_8hpp_1a106f61c342cfd013eb570c37328070ae" kindref="member">NEW</ref>(<ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref>,<sp/>1,<sp/>o.data(),<sp/>ns.data(),<sp/>*Sisi4s::world,<sp/></highlight><highlight class="stringliteral">&quot;Di&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="SharedPointer_8hpp_1a106f61c342cfd013eb570c37328070ae" kindref="member">NEW</ref>(<ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref>,<sp/>3,<sp/>voo.data(),<sp/>nss.data(),<sp/>*Sisi4s::world,<sp/></highlight><highlight class="stringliteral">&quot;Daij&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>),</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;({</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;aij&quot;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Di(this-&gt;diagonalH-&gt;get(0));</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Daij(this-&gt;diagonalH-&gt;get(1));</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>diagonal<sp/>elements<sp/>of<sp/>H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>(*Di)[</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">]<sp/>=<sp/><sp/>(<sp/>-<sp/>1.0<sp/>)<sp/>*<sp/>(*Fij)[</highlight><highlight class="stringliteral">&quot;ii&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>(*Daij)[</highlight><highlight class="stringliteral">&quot;cij&quot;</highlight><highlight class="normal">]<sp/>=<sp/><sp/>(<sp/>-<sp/>1.0<sp/>)<sp/>*<sp/>(*Fij)[</highlight><highlight class="stringliteral">&quot;ii&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>(*Daij)[</highlight><highlight class="stringliteral">&quot;cij&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>(<sp/>-<sp/>1.0<sp/>)<sp/>*<sp/>(*Fij)[</highlight><highlight class="stringliteral">&quot;jj&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>(*Daij)[</highlight><highlight class="stringliteral">&quot;cij&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>(<sp/>+<sp/>1.0<sp/>)<sp/>*<sp/>(*Fab)[</highlight><highlight class="stringliteral">&quot;cc&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>(*Daij)[</highlight><highlight class="stringliteral">&quot;cij&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>(<sp/>+<sp/>1.0<sp/>)<sp/>*<sp/>(*Fab)[</highlight><highlight class="stringliteral">&quot;dd&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="604"><highlight class="normal">std::vector&lt;SDFockVector&lt;F&gt;&gt;</highlight></codeline>
<codeline lineno="605" refid="classsisi4s_1_1IPCcsdPreconditioner_1a2e97db095cdebec9c83d1b60295605ec" refkind="member"><highlight class="normal"><ref refid="classsisi4s_1_1IPCcsdPreconditioner" kindref="compound">IPCcsdPreconditioner&lt;F&gt;::getInitialBasis</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eigenVectorsCount)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>calculateDiagonal();</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;IPCcsdPreconditioner&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Getting<sp/>initial<sp/>basis<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>K=eigenVectorsCount<sp/>lowest<sp/>diagonal<sp/>elements<sp/>at<sp/>each<sp/>processor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>std::vector&lt;std::pair&lt;size_t,<sp/>F&gt;&gt;<sp/>localElements(this-&gt;diagonalH-&gt;readLocal());</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>std::sort(</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>localElements.begin(),<sp/>localElements.end(),</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEomDiagonalValueComparator" kindref="compound">EomDiagonalValueComparator&lt;F&gt;</ref>()</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>localElementsSize(localElements.size()<sp/>);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gather<sp/>all<sp/>K<sp/>elements<sp/>of<sp/>all<sp/>processors<sp/>at<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>convert<sp/>into<sp/>homogeneous<sp/>arrays<sp/>for<sp/>MPI<sp/>gather</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>trialEigenVectorsCount(10*eigenVectorsCount);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>std::vector&lt;size_t&gt;<sp/>localLowestElementIndices(trialEigenVectorsCount);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>std::vector&lt;F&gt;<sp/>localLowestElementValues(trialEigenVectorsCount);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>&lt;<sp/>std::min(localElementsSize,<sp/>trialEigenVectorsCount);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>++i</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>localLowestElementIndices[i]<sp/>=<sp/>localElements[i].first;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>localLowestElementValues[i]<sp/>=<sp/>localElements[i].second;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1MpiCommunicator" kindref="compound">MpiCommunicator</ref><sp/>communicator(*Sisi4s::world);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>std::vector&lt;size_t&gt;<sp/>lowestElementIndices;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>std::vector&lt;F&gt;<sp/>lowestElementValues;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>communicator.<ref refid="classsisi4s_1_1MpiCommunicator_1a4920d7e68dfa8c38de024795a264527f" kindref="member">gather</ref>(localLowestElementIndices,<sp/>lowestElementIndices);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>communicator.<ref refid="classsisi4s_1_1MpiCommunicator_1a4920d7e68dfa8c38de024795a264527f" kindref="member">gather</ref>(localLowestElementValues,<sp/>lowestElementValues);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>convert<sp/>back<sp/>into<sp/>(index,value)<sp/>pairs<sp/>for<sp/>sorting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>std::vector&lt;std::pair&lt;size_t,<sp/>F&gt;&gt;<sp/>lowestElements(lowestElementValues.size());</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>lowestElementValues.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>lowestElements[i].first<sp/>=<sp/>lowestElementIndices[i];</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>lowestElements[i].second<sp/>=<sp/>lowestElementValues[i];</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>globally<sp/>lowest<sp/>K<sp/>diagonal<sp/>elements<sp/>among<sp/>the<sp/>gathered<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>std::sort(</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>lowestElements.begin(),<sp/>lowestElements.end(),</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEomDiagonalValueComparator" kindref="compound">EomDiagonalValueComparator&lt;F&gt;</ref>()</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>rank==0<sp/>(root)<sp/>lowestElements<sp/>contains<sp/>K*Np<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rank<sp/>&gt;<sp/>0<sp/>has<sp/>an<sp/>empty<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>basis<sp/>vectors<sp/>for<sp/>each<sp/>lowest<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>std::vector&lt;SDFockVector&lt;F&gt;&gt;<sp/>basis;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentEigenVectorCount(0);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b(0);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zeroVectorCount(0);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(currentEigenVectorCount<sp/>&lt;<sp/>eigenVectorsCount)<sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1SDFockVector" kindref="compound">SDFockVector&lt;F&gt;</ref><sp/>basisElement(*this-&gt;diagonalH);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>basisElement<sp/>*=<sp/>0.0;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;size_t,F&gt;&gt;<sp/>elements;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(communicator.<ref refid="classsisi4s_1_1MpiCommunicator_1a0e6f9439058e7c3685f2f05a40cda46a" kindref="member">getRank</ref>()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>&gt;=<sp/>lowestElements.size()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="Exception_8hpp_1aa49c727f91093a79c46ee6ecd83548bb" kindref="member">EXCEPTION</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>more<sp/>elements<sp/>to<sp/>create<sp/>initial<sp/>basis&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elements.push_back(</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(lowestElements[b].first,<sp/>1.0)</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>basisElement.<ref refid="classsisi4s_1_1FockVector_1af3f1a3e793e9dc55958b795c7672f9de" kindref="member">write</ref>(elements);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(101,<sp/>-70),<sp/>(32,<sp/>-55),<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>b1:<sp/>0...<sp/>1<sp/>(at<sp/>global<sp/>position<sp/>101)<sp/>0<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>b2:<sp/>0...<sp/>1<sp/>(at<sp/>global<sp/>position<sp/>32)<sp/>0<sp/>...i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Filter<sp/>out<sp/>unphysical<sp/>components<sp/>from<sp/>the<sp/>basisElement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>(*basisElement.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;aii&quot;</highlight><highlight class="normal">]=0.0;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Antisymmetrize<sp/>the<sp/>new<sp/>basis<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>(*basisElement.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;aij&quot;</highlight><highlight class="normal">]<sp/>-=<sp/>(*basisElement.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;aji&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(1,<sp/></highlight><highlight class="stringliteral">&quot;IPCcsdPreconditioner&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;basis<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>basis.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Grams-schmidt<sp/>it<sp/>with<sp/>the<sp/>other<sp/>elements<sp/>of<sp/>the<sp/>basis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j(0);<sp/>j<sp/>&lt;<sp/>basis.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>basisElement<sp/>-=<sp/>basis[j]<sp/>*<sp/>basis[j].<ref refid="classsisi4s_1_1FockVector_1a7f7a9ea49d5eb503a988858d1b9e76cb" kindref="member">dot</ref>(basisElement);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalize<sp/>basisElement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>basisElementNorm(<ref refid="namespacesisi4s_1a40947d88c4989cacff153a78af67f686" kindref="member">std::sqrt</ref>(basisElement.<ref refid="classsisi4s_1_1FockVector_1a7f7a9ea49d5eb503a988858d1b9e76cb" kindref="member">dot</ref>(basisElement)));</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>basisElementNorm<sp/>is<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">std::abs</ref>(basisElementNorm)<sp/>&lt;<sp/>1e-10<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zeroVectorCount++;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b++;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>basisElement<sp/>=<sp/>1.0<sp/>/<sp/><ref refid="namespacesisi4s_1a40947d88c4989cacff153a78af67f686" kindref="member">std::sqrt</ref>(basisElement.<ref refid="classsisi4s_1_1FockVector_1a7f7a9ea49d5eb503a988858d1b9e76cb" kindref="member">dot</ref>(basisElement))*basisElement;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>basisElementNorm<sp/>=<sp/><ref refid="namespacesisi4s_1a40947d88c4989cacff153a78af67f686" kindref="member">std::sqrt</ref>(basisElement.<ref refid="classsisi4s_1_1FockVector_1a7f7a9ea49d5eb503a988858d1b9e76cb" kindref="member">dot</ref>(basisElement));</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>b++;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">std::abs</ref>(basisElementNorm<sp/>-<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(1))<sp/>&gt;<sp/>1e-10<sp/>*<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(1))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>currentEigenVectorCount++;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>got<sp/>here,<sp/>basisElement<sp/>is<sp/>a<sp/>valid<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>basis.push_back(basisElement);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>basis;</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><ref refid="classsisi4s_1_1SDFockVector" kindref="compound">SDFockVector&lt;F&gt;</ref></highlight></codeline>
<codeline lineno="715" refid="classsisi4s_1_1IPCcsdPreconditioner_1a7a64a258bc792326104e2eef5f69933e" refkind="member"><highlight class="normal"><ref refid="classsisi4s_1_1IPCcsdPreconditioner" kindref="compound">IPCcsdPreconditioner&lt;F&gt;::getCorrection</ref>(</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1ad0bccf74d238a6fc69868a9439dd9e7f" kindref="member">sisi4s::complex</ref><sp/>lambda,<sp/><ref refid="classsisi4s_1_1SDFockVector" kindref="compound">SDFockVector&lt;F&gt;</ref><sp/>&amp;residuum</highlight></codeline>
<codeline lineno="717"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1SDFockVector" kindref="compound">SDFockVector&lt;F&gt;</ref><sp/>w(*this-&gt;diagonalH);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>singleton<sp/>helping<sp/>class<sp/>for<sp/>the<sp/>diagonal<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DiagonalCorrection<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DiagonalCorrection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda_):<sp/>lambda(lambda_)<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>operator<sp/>()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>residuumElement,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>diagonalElement)<sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">std::abs</ref>(lambda<sp/>-<sp/>diagonalElement)<sp/>&lt;<sp/>1E-4<sp/>?</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0<sp/>:<sp/>residuumElement<sp/>/<sp/>(lambda<sp/>-<sp/>diagonalElement);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>}<sp/>diagonalCorrection(std::real(lambda));</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1SDFockVector" kindref="compound">SDFockVector&lt;F&gt;</ref><sp/>correction(*this-&gt;diagonalH);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>((lambda<sp/>*<sp/>id<sp/>-<sp/>Diag(diagonal))^-1)<sp/>.<sp/>residuum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c(0);<sp/>c<sp/>&lt;<sp/>w.<ref refid="classsisi4s_1_1FockVector_1ad754c5d7c0cb7ab1a487f1f640d7d877" kindref="member">getComponentsCount</ref>();<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*indices(<sp/>correction.<ref refid="classsisi4s_1_1FockVector_1a931498ce2090f83bcff10de589035874" kindref="member">componentIndices</ref>[c].c_str()<sp/>);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>(*correction.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(c)).contract(</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1.0,</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*residuum.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(c),indices,</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*this-&gt;diagonalH-&gt;get(c),indices,</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0.0,indices,</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CTF::Bivar_Function&lt;F&gt;(diagonalCorrection)</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Filter<sp/>out<sp/>unphysical<sp/>components<sp/>from<sp/>the<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>(*correction.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;aii&quot;</highlight><highlight class="normal">]=0.0;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Antisymmetrize<sp/>the<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>(*correction.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;aij&quot;</highlight><highlight class="normal">]<sp/>-=<sp/>(*correction.<ref refid="classsisi4s_1_1FockVector_1aebf4e090f20a7bb83c434396b274c89c" kindref="member">get</ref>(1))[</highlight><highlight class="stringliteral">&quot;aji&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>correction;</highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instantiate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsisi4s_1_1CcsdPreconditioner" kindref="compound">sisi4s::CcsdPreconditioner&lt;double&gt;</ref>;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsisi4s_1_1CcsdPreconditioner" kindref="compound">sisi4s::CcsdPreconditioner&lt;sisi4s::complex&gt;</ref>;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsisi4s_1_1IPCcsdPreconditioner" kindref="compound">sisi4s::IPCcsdPreconditioner&lt;double&gt;</ref>;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsisi4s_1_1IPCcsdPreconditioner" kindref="compound">sisi4s::IPCcsdPreconditioner&lt;sisi4s::complex&gt;</ref>;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsisi4s_1_1EACcsdPreconditioner" kindref="compound">sisi4s::EACcsdPreconditioner&lt;double&gt;</ref>;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsisi4s_1_1EACcsdPreconditioner" kindref="compound">sisi4s::EACcsdPreconditioner&lt;sisi4s::complex&gt;</ref>;</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/sisi4s/sisi4s/src/algorithms/CcsdPreconditioner.cxx"/>
  </compounddef>
</doxygen>
