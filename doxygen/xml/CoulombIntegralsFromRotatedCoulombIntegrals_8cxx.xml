<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx" kind="file" language="C++">
    <compoundname>CoulombIntegralsFromRotatedCoulombIntegrals.cxx</compoundname>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">algorithm</includes>
    <includes refid="CoulombIntegralsFromRotatedCoulombIntegrals_8hpp" local="no">algorithms/CoulombIntegralsFromRotatedCoulombIntegrals.hpp</includes>
    <includes refid="Tensor_8hpp" local="no">util/Tensor.hpp</includes>
    <includes refid="Sisi4s_8hpp" local="no">Sisi4s.hpp</includes>
    <includes refid="Log_8hpp" local="no">util/Log.hpp</includes>
    <includes refid="Integrals_8hpp" local="no">util/Integrals.hpp</includes>
    <includes local="no">iostream</includes>
    <includes local="no">numeric</includes>
    <includes local="no">set</includes>
    <includes local="no">map</includes>
    <includes refid="Emitter_8hpp" local="no">util/Emitter.hpp</includes>
    <includes refid="MathFunctions_8hpp" local="no">math/MathFunctions.hpp</includes>
    <incdepgraph>
      <node id="7">
        <label>Data.hpp</label>
        <link refid="Data_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>Options.hpp</label>
        <link refid="Options_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Sisi4s.hpp</label>
        <link refid="Sisi4s_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>algorithms/Algorithm.hpp</label>
        <link refid="Algorithm_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>CoulombIntegralsFromRotatedCoulombIntegrals.cxx</label>
        <link refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>algorithms/CoulombIntegralsFromRotatedCoulombIntegrals.hpp</label>
        <link refid="CoulombIntegralsFromRotatedCoulombIntegrals_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>extern/CLI11.hpp</label>
        <link refid="CLI11_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>math/Complex.hpp</label>
        <link refid="Complex_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>math/Float.hpp</label>
        <link refid="Float_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>math/MathFunctions.hpp</label>
        <link refid="MathFunctions_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>util/CTF.hpp</label>
        <link refid="CTF_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>util/Emitter.hpp</label>
        <link refid="Emitter_8hpp"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>util/Exception.hpp</label>
        <link refid="Exception_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>util/Integrals.hpp</label>
        <link refid="Integrals_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>util/Log.hpp</label>
        <link refid="Log_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>util/SharedPointer.hpp</label>
        <link refid="SharedPointer_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>util/Tensor.hpp</label>
        <link refid="Tensor_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>util/Time.hpp</label>
        <link refid="Time_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>algorithm</label>
      </node>
      <node id="45">
        <label>array</label>
      </node>
      <node id="15">
        <label>cmath</label>
      </node>
      <node id="21">
        <label>complex</label>
      </node>
      <node id="11">
        <label>cstdint</label>
      </node>
      <node id="25">
        <label>ctf.hpp</label>
      </node>
      <node id="10">
        <label>ctime</label>
      </node>
      <node id="41">
        <label>exception</label>
      </node>
      <node id="18">
        <label>fstream</label>
      </node>
      <node id="31">
        <label>functional</label>
      </node>
      <node id="13">
        <label>iomanip</label>
      </node>
      <node id="16">
        <label>iostream</label>
      </node>
      <node id="38">
        <label>iterator</label>
      </node>
      <node id="40">
        <label>limits</label>
      </node>
      <node id="35">
        <label>locale</label>
      </node>
      <node id="22">
        <label>map</label>
      </node>
      <node id="30">
        <label>memory</label>
      </node>
      <node id="32">
        <label>numeric</label>
      </node>
      <node id="12">
        <label>ostream</label>
      </node>
      <node id="36">
        <label>set</label>
      </node>
      <node id="14">
        <label>sstream</label>
      </node>
      <node id="39">
        <label>stdexcept</label>
      </node>
      <node id="17">
        <label>streambuf</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="42">
        <label>sys/stat.h</label>
      </node>
      <node id="43">
        <label>sys/types.h</label>
      </node>
      <node id="33">
        <label>tuple</label>
      </node>
      <node id="37">
        <label>type_traits</label>
      </node>
      <node id="34">
        <label>utility</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
      <node id="48">
        <label>yaml-cpp/yaml.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structIntegralProvider" prot="public">IntegralProvider</innerclass>
    <innerclass refid="structIntegralProvider_1_1Limit" prot="public">IntegralProvider::Limit</innerclass>
    <innerclass refid="structVectorIntegralProvider" prot="public">VectorIntegralProvider</innerclass>
    <innerclass refid="structSlowVectorIntegralProvider" prot="public">SlowVectorIntegralProvider</innerclass>
    <innerclass refid="structCtfIntegralProvider" prot="public">CtfIntegralProvider</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" prot="public" static="no">
        <name>LOGGER</name>
        <param><defname>_l</defname></param>
        <initializer><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(_l, &quot;CoulombIntegralsFromRotatedCoulombIntegrals&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/sisi4s/sisi4s/src/algorithms/CoulombIntegralsFromRotatedCoulombIntegrals.cxx" line="19" column="9" bodyfile="/home/runner/work/sisi4s/sisi4s/src/algorithms/CoulombIntegralsFromRotatedCoulombIntegrals.cxx" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1ab1909dd58075ee188ac6b52b69bda1c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor</ref>&lt; double &gt; *</type>
        <definition>Tensor&lt; double &gt; * stdVectorToTensor</definition>
        <argsstring>(const std::vector&lt; double &gt; v, const std::vector&lt; int &gt; lens)</argsstring>
        <name>stdVectorToTensor</name>
        <param>
          <type>const std::vector&lt; double &gt;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt;</type>
          <declname>lens</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/sisi4s/sisi4s/src/algorithms/CoulombIntegralsFromRotatedCoulombIntegrals.cxx" line="373" column="8" bodyfile="/home/runner/work/sisi4s/sisi4s/src/algorithms/CoulombIntegralsFromRotatedCoulombIntegrals.cxx" bodystart="373" bodyend="386"/>
        <references refid="classsisi4s_1_1Sisi4s_1ace7b506b09fbfac3743da86db91d49ce" compoundref="Sisi4s_8hpp" startline="30">sisi4s::Sisi4s::world</references>
        <referencedby refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1ac62942818fd32e904a2c6436afc92320" compoundref="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx" startline="395" endline="415">computeAndExport</referencedby>
      </memberdef>
      <memberdef kind="function" id="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1af3b63ef77b93f7372413f038096edd8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void computeAndExport</definition>
        <argsstring>(Algorithm &amp;, IntegralProvider&lt; V &gt; &amp;, std::vector&lt; IntegralInfo &gt; &amp;)</argsstring>
        <name>computeAndExport</name>
        <param>
          <type><ref refid="classsisi4s_1_1Algorithm" kindref="compound">Algorithm</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="structIntegralProvider" kindref="compound">IntegralProvider</ref>&lt; V &gt; &amp;</type>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structsisi4s_1_1IntegralInfo" kindref="compound">IntegralInfo</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/sisi4s/sisi4s/src/algorithms/CoulombIntegralsFromRotatedCoulombIntegrals.cxx" line="389" column="6" declfile="/home/runner/work/sisi4s/sisi4s/src/algorithms/CoulombIntegralsFromRotatedCoulombIntegrals.cxx" declline="389" declcolumn="6"/>
        <referencedby refid="classsisi4s_1_1CoulombIntegralsFromRotatedCoulombIntegrals_1ac4a7f4c21c88a42d9b0a91af3d057901" compoundref="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx" startline="437" endline="521">sisi4s::CoulombIntegralsFromRotatedCoulombIntegrals::run</referencedby>
      </memberdef>
      <memberdef kind="function" id="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1ac62942818fd32e904a2c6436afc92320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void computeAndExport</definition>
        <argsstring>(Algorithm &amp;a, IntegralProvider&lt; std::vector&lt; double &gt; &gt; &amp;engine, std::vector&lt; IntegralInfo &gt; &amp;integralInfos)</argsstring>
        <name>computeAndExport</name>
        <param>
          <type><ref refid="classsisi4s_1_1Algorithm" kindref="compound">Algorithm</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structIntegralProvider" kindref="compound">IntegralProvider</ref>&lt; std::vector&lt; double &gt; &gt; &amp;</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structsisi4s_1_1IntegralInfo" kindref="compound">IntegralInfo</ref> &gt; &amp;</type>
          <declname>integralInfos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/sisi4s/sisi4s/src/algorithms/CoulombIntegralsFromRotatedCoulombIntegrals.cxx" line="395" column="6" bodyfile="/home/runner/work/sisi4s/sisi4s/src/algorithms/CoulombIntegralsFromRotatedCoulombIntegrals.cxx" bodystart="395" bodyend="415"/>
        <references refid="classsisi4s_1_1Algorithm_1a388052a12509b8b641f17bbe8d41f8f3" compoundref="Algorithm_8cxx" startline="303" endline="312">sisi4s::Algorithm::allocatedTensorArgument</references>
        <references refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" compoundref="Algorithm_8cxx" startline="34" endline="36">sisi4s::Algorithm::isArgumentGiven</references>
        <references refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" compoundref="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx" startline="19">LOGGER</references>
        <references refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1ab1909dd58075ee188ac6b52b69bda1c3" compoundref="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx" startline="373" endline="386">stdVectorToTensor</references>
      </memberdef>
      <memberdef kind="function" id="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1a78b8eb3f40891cb06813feb82f06d315" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void computeAndExport</definition>
        <argsstring>(Algorithm &amp;a, IntegralProvider&lt; Tensor&lt; double &gt; &gt; &amp;engine, std::vector&lt; IntegralInfo &gt; &amp;integralInfos)</argsstring>
        <name>computeAndExport</name>
        <param>
          <type><ref refid="classsisi4s_1_1Algorithm" kindref="compound">Algorithm</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structIntegralProvider" kindref="compound">IntegralProvider</ref>&lt; <ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor</ref>&lt; double &gt; &gt; &amp;</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structsisi4s_1_1IntegralInfo" kindref="compound">IntegralInfo</ref> &gt; &amp;</type>
          <declname>integralInfos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/sisi4s/sisi4s/src/algorithms/CoulombIntegralsFromRotatedCoulombIntegrals.cxx" line="418" column="6" bodyfile="/home/runner/work/sisi4s/sisi4s/src/algorithms/CoulombIntegralsFromRotatedCoulombIntegrals.cxx" bodystart="418" bodyend="435"/>
        <references refid="classsisi4s_1_1Algorithm_1a388052a12509b8b641f17bbe8d41f8f3" compoundref="Algorithm_8cxx" startline="303" endline="312">sisi4s::Algorithm::allocatedTensorArgument</references>
        <references refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" compoundref="Algorithm_8cxx" startline="34" endline="36">sisi4s::Algorithm::isArgumentGiven</references>
        <references refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" compoundref="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx" startline="19">LOGGER</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="CoulombIntegralsFromRotatedCoulombIntegrals_8hpp" kindref="compound">algorithms/CoulombIntegralsFromRotatedCoulombIntegrals.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Tensor_8hpp" kindref="compound">util/Tensor.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Sisi4s_8hpp" kindref="compound">Sisi4s.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Log_8hpp" kindref="compound">util/Log.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Integrals_8hpp" kindref="compound">util/Integrals.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Tensor_8hpp" kindref="compound">util/Tensor.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Emitter_8hpp" kindref="compound">util/Emitter.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="MathFunctions_8hpp" kindref="compound">math/MathFunctions.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesisi4s" kindref="compound">sisi4s</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><ref refid="Algorithm_8hpp_1a07e9ffa67ed21886a687b27719c949e1" kindref="member">ALGORITHM_REGISTRAR_DEFINITION</ref>(<ref refid="classsisi4s_1_1CoulombIntegralsFromRotatedCoulombIntegrals" kindref="compound">CoulombIntegralsFromRotatedCoulombIntegrals</ref>);</highlight></codeline>
<codeline lineno="19" refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOGGER(_l)<sp/>LOG(_l,<sp/>&quot;CoulombIntegralsFromRotatedCoulombIntegrals&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="22" refid="structIntegralProvider" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structIntegralProvider" kindref="compound">IntegralProvider</ref><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="structIntegralProvider_1ac0c031653c0a34dfd79fc0157ada4674" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structIntegralProvider_1ac0c031653c0a34dfd79fc0157ada4674" kindref="member">IntegralProvider</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>no,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nv,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>chemistNotation_,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>unrestricted_)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="structIntegralProvider_1aa50acdb6d86623a23513fe2930e77598" kindref="member">No</ref>(no),<sp/><ref refid="structIntegralProvider_1aa741c0fcac672dc2c567d870a25ab427" kindref="member">Nv</ref>(nv),<sp/><ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>(no+nv)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="structIntegralProvider_1a5435fd03b0f170b3c3afd880410dbca5" kindref="member">chemistNotation</ref>(chemistNotation_),<sp/><ref refid="structIntegralProvider_1ad854ec063569b65b086dd220d6640604" kindref="member">unrestricted</ref>(unrestricted_)<sp/>{}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="structIntegralProvider_1_1Limit" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structIntegralProvider_1_1Limit" kindref="compound">Limit</ref><sp/>{</highlight></codeline>
<codeline lineno="29" refid="structIntegralProvider_1_1Limit_1a2ee01db91b995cadafa425e6b1108ef1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structIntegralProvider_1_1Limit_1a2ee01db91b995cadafa425e6b1108ef1" kindref="member">lower</ref>,<sp/><ref refid="structIntegralProvider_1_1Limit_1a3c124b40a297a4d3808a19ddedd1b0ee" kindref="member">upper</ref>,<sp/><ref refid="structIntegralProvider_1_1Limit_1afb4be5ca9716b5584010ad00469f82d0" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="30" refid="structIntegralProvider_1_1Limit_1a2dd8fa0396ef880cb5d41af03e8865b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structIntegralProvider_1_1Limit_1a2dd8fa0396ef880cb5d41af03e8865b6" kindref="member">Limit</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>h):<sp/><ref refid="structIntegralProvider_1_1Limit_1a2ee01db91b995cadafa425e6b1108ef1" kindref="member">lower</ref>(l),<sp/><ref refid="structIntegralProvider_1_1Limit_1a3c124b40a297a4d3808a19ddedd1b0ee" kindref="member">upper</ref>(h),<sp/><ref refid="structIntegralProvider_1_1Limit_1afb4be5ca9716b5584010ad00469f82d0" kindref="member">size</ref>(h<sp/>-<sp/>l){}</highlight></codeline>
<codeline lineno="31" refid="structIntegralProvider_1_1Limit_1a17f2c37860756db0ac0afaf1e53e5dda" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structIntegralProvider_1_1Limit_1a17f2c37860756db0ac0afaf1e53e5dda" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i<sp/>-<sp/><ref refid="structIntegralProvider_1_1Limit_1a2ee01db91b995cadafa425e6b1108ef1" kindref="member">lower</ref>;<sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="33" refid="structIntegralProvider_1ad11c563ff48d79517f0d93e31295d8d5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structIntegralProvider_1_1Limit" kindref="compound">Limit</ref><sp/><ref refid="structIntegralProvider_1ad11c563ff48d79517f0d93e31295d8d5" kindref="member">indexToLimits</ref>(<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8d" kindref="member">Index</ref><sp/>&amp;i)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(i<sp/>==<sp/>Index::NO)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structIntegralProvider_1_1Limit" kindref="compound">Limit</ref>(0<sp/>,<sp/><ref refid="structIntegralProvider_1aa50acdb6d86623a23513fe2930e77598" kindref="member">No</ref><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>Index::NV)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structIntegralProvider_1_1Limit" kindref="compound">Limit</ref>(<ref refid="structIntegralProvider_1aa50acdb6d86623a23513fe2930e77598" kindref="member">No</ref>,<sp/><ref refid="structIntegralProvider_1aa50acdb6d86623a23513fe2930e77598" kindref="member">No</ref><sp/>+<sp/><ref refid="structIntegralProvider_1aa741c0fcac672dc2c567d870a25ab427" kindref="member">Nv</ref>);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structIntegralProvider_1_1Limit" kindref="compound">Limit</ref>(0<sp/>,<sp/><ref refid="structIntegralProvider_1aa50acdb6d86623a23513fe2930e77598" kindref="member">No</ref><sp/>+<sp/><ref refid="structIntegralProvider_1aa741c0fcac672dc2c567d870a25ab427" kindref="member">Nv</ref>);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="38" refid="structIntegralProvider_1aca121445c50dba97b783159c30a84626" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structIntegralProvider_1aca121445c50dba97b783159c30a84626" kindref="member">indexToInt</ref>(<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8d" kindref="member">Index</ref><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(i<sp/>==<sp/>Index::NO)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structIntegralProvider_1aa50acdb6d86623a23513fe2930e77598" kindref="member">No</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>Index::NV)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structIntegralProvider_1aa741c0fcac672dc2c567d870a25ab427" kindref="member">Nv</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structIntegralProvider_1aa50acdb6d86623a23513fe2930e77598" kindref="member">No</ref><sp/>+<sp/><ref refid="structIntegralProvider_1aa741c0fcac672dc2c567d870a25ab427" kindref="member">Nv</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="structIntegralProvider_1a2f3bce11ce0fcbc690aa7f889cee5e32" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>V<sp/><ref refid="structIntegralProvider_1a2f3bce11ce0fcbc690aa7f889cee5e32" kindref="member">compute</ref>(<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8d" kindref="member">Index</ref><sp/>P,<sp/><ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8d" kindref="member">Index</ref><sp/>Q,<sp/><ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8d" kindref="member">Index</ref><sp/>R,<sp/><ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8d" kindref="member">Index</ref><sp/>S)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="structIntegralProvider_1aa50acdb6d86623a23513fe2930e77598" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structIntegralProvider_1aa50acdb6d86623a23513fe2930e77598" kindref="member">No</ref>,<sp/><ref refid="structIntegralProvider_1aa741c0fcac672dc2c567d870a25ab427" kindref="member">Nv</ref>,<sp/><ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>;</highlight></codeline>
<codeline lineno="47" refid="structIntegralProvider_1a5435fd03b0f170b3c3afd880410dbca5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structIntegralProvider_1a5435fd03b0f170b3c3afd880410dbca5" kindref="member">chemistNotation</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48" refid="structIntegralProvider_1ad854ec063569b65b086dd220d6640604" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structIntegralProvider_1ad854ec063569b65b086dd220d6640604" kindref="member">unrestricted</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="structVectorIntegralProvider" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structVectorIntegralProvider" kindref="compound">VectorIntegralProvider</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structIntegralProvider" kindref="compound">IntegralProvider</ref>&lt;<sp/>std::vector&lt;double&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="structVectorIntegralProvider_1a168700f4a4110edfadb7821ccbb8edc9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structVectorIntegralProvider_1a168700f4a4110edfadb7821ccbb8edc9" kindref="member">VectorIntegralProvider</ref>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>no</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nv</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>chemistNotation_</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>unrestricted_</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref><sp/>&amp;coeffs</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref><sp/>&amp;coulombIntegrals</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>:<ref refid="structIntegralProvider" kindref="compound">IntegralProvider</ref>(no,<sp/>nv,<sp/>chemistNotation_,<sp/>unrestricted_)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>chemistNotation_<sp/>)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="Exception_8hpp_1aa49c727f91093a79c46ee6ecd83548bb" kindref="member">EXCEPTION</ref>(</highlight><highlight class="stringliteral">&quot;Physics<sp/>notation<sp/>not<sp/>supported<sp/>for<sp/>this<sp/>provider&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>unrestricted_)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="Exception_8hpp_1aa49c727f91093a79c46ee6ecd83548bb" kindref="member">EXCEPTION</ref>(</highlight><highlight class="stringliteral">&quot;Unrestricted<sp/>not<sp/>supported<sp/>for<sp/>this<sp/>provider&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank_m<sp/>=<sp/>int(<ref refid="classsisi4s_1_1Sisi4s_1ace7b506b09fbfac3743da86db91d49ce" kindref="member">Sisi4s::world</ref>-&gt;rank<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>rank<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>in<sp/>the<sp/>orbital<sp/>coefficients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structVectorIntegralProvider_1a1baa10790ff866727cf21858b6408630" kindref="member">C</ref>.resize(rank_m<sp/>*<sp/><ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>indices(<ref refid="structVectorIntegralProvider_1a1baa10790ff866727cf21858b6408630" kindref="member">C</ref>.size());</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>std::iota(indices.begin(),<sp/>indices.end(),<sp/>0);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>coeffs.read(<ref refid="structVectorIntegralProvider_1a1baa10790ff866727cf21858b6408630" kindref="member">C</ref>.size(),<sp/>indices.data(),<sp/><ref refid="structVectorIntegralProvider_1a1baa10790ff866727cf21858b6408630" kindref="member">C</ref>.data());</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>in<sp/>the<sp/>integrals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>indices.resize(rank_m<sp/>*<sp/><ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>std::iota(indices.begin(),<sp/>indices.end(),<sp/>0);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structVectorIntegralProvider_1a099f13664d5b8c2e5f17a5c036770997" kindref="member">Vklmn</ref>.resize(indices.size());</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>coulombIntegrals.read(indices.size(),<sp/>indices.data(),<sp/><ref refid="structVectorIntegralProvider_1a099f13664d5b8c2e5f17a5c036770997" kindref="member">Vklmn</ref>.data());</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="structVectorIntegralProvider_1a846d5915558838a8c9d728cdf0a8ea8a" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="structVectorIntegralProvider_1a846d5915558838a8c9d728cdf0a8ea8a" kindref="member">compute</ref>(<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8d" kindref="member">Index</ref><sp/>P,<sp/><ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8d" kindref="member">Index</ref><sp/>Q,<sp/><ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8d" kindref="member">Index</ref><sp/>R,<sp/><ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8d" kindref="member">Index</ref><sp/>S)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Limit<sp/>pLim(<ref refid="structIntegralProvider_1ad11c563ff48d79517f0d93e31295d8d5" kindref="member">indexToLimits</ref>(P))</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>qLim(<ref refid="structIntegralProvider_1ad11c563ff48d79517f0d93e31295d8d5" kindref="member">indexToLimits</ref>(Q))</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>rLim(<ref refid="structIntegralProvider_1ad11c563ff48d79517f0d93e31295d8d5" kindref="member">indexToLimits</ref>(R))</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>sLim(<ref refid="structIntegralProvider_1ad11c563ff48d79517f0d93e31295d8d5" kindref="member">indexToLimits</ref>(S))</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dimension(pLim.size<sp/>*<sp/>qLim.size<sp/>*<sp/>rLim.size<sp/>*<sp/>sLim.size);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>result(dimension,<sp/>0.0);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>Vpmlk(<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>*<sp/>pLim.size,<sp/>0.0)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>Vprlk(<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>*<sp/><sp/><sp/><sp/>pLim.size*rLim.size,<sp/>0.0)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>Vprqk(<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pLim.size*rLim.size*qLim.size,<sp/>0.0)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>COMPUTE<sp/>Vpmlk<sp/>=====================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>p(pLim.lower);<sp/>p<sp/>&lt;<sp/>pLim.upper;<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k(0),<sp/>Inmlk<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/><ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l(0);<sp/>l<sp/>&lt;<sp/><ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>;<sp/>++l)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m(0);<sp/>m<sp/>&lt;<sp/><ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>;<sp/>++m)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Ipmlk<sp/>=<sp/>pLim[p]</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>m<sp/>*<sp/>pLim.size</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>l<sp/>*<sp/>pLim.size*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>k<sp/>*<sp/>pLim.size*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n(0);<sp/>n<sp/>&lt;<sp/><ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>;<sp/>++n,<sp/>++Inmlk)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vpmlk[Ipmlk]<sp/>+=<sp/><ref refid="structVectorIntegralProvider_1a1baa10790ff866727cf21858b6408630" kindref="member">C</ref>[n<sp/>+<sp/>p*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>]<sp/>*<sp/><ref refid="structVectorIntegralProvider_1a099f13664d5b8c2e5f17a5c036770997" kindref="member">Vklmn</ref>[Inmlk];</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>n<sp/>*/</highlight><highlight class="normal"><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>m<sp/>*/</highlight><highlight class="normal"><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>l<sp/>*/</highlight><highlight class="normal"><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>k<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>COMPUTE<sp/>Vprlk<sp/>======================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r(rLim.lower);<sp/>r<sp/>&lt;<sp/>rLim.upper;<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>p(pLim.lower);<sp/>p<sp/>&lt;<sp/>pLim.upper;<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k(0);<sp/>k<sp/>&lt;<sp/><ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l(0);<sp/>l<sp/>&lt;<sp/><ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>;<sp/>++l)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Iprlk<sp/>=<sp/>pLim[p]</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>rLim[r]<sp/>*<sp/>pLim.size</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>l<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>pLim.size*rLim.size</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>k<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>pLim.size*rLim.size*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m(0);<sp/>m<sp/>&lt;<sp/><ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>;<sp/>++m)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Ipmlk<sp/>=<sp/>pLim[p]</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>m<sp/>*<sp/>pLim.size</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>l<sp/>*<sp/>pLim.size*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>k<sp/>*<sp/>pLim.size*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vprlk[Iprlk]<sp/>+=<sp/><ref refid="structVectorIntegralProvider_1a1baa10790ff866727cf21858b6408630" kindref="member">C</ref>[m<sp/>+<sp/>r*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>]<sp/>*<sp/>Vpmlk[Ipmlk];</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>m<sp/>*/</highlight><highlight class="normal"><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>l<sp/>*/</highlight><highlight class="normal"><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>k<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r(rLim.lower);<sp/>r<sp/>&lt;<sp/>rLim.upper;<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>q(qLim.lower);<sp/>q<sp/>&lt;<sp/>qLim.upper;<sp/>++q)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>p(pLim.lower);<sp/>p<sp/>&lt;<sp/>pLim.upper;<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>COMPUTE<sp/>Vprqk<sp/>=====================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k(0);<sp/>k<sp/>&lt;<sp/><ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Iprqk<sp/>=<sp/>pLim[p]</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>rLim[r]<sp/>*<sp/>pLim.size</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>qLim[q]<sp/>*<sp/>pLim.size*rLim.size</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>k<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>pLim.size*rLim.size*qLim.size</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l(0);<sp/>l<sp/>&lt;<sp/><ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>;<sp/>++l)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Iprlk<sp/>=<sp/>pLim[p]<sp/>+</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rLim[r]<sp/>*<sp/>pLim.size<sp/>+</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>pLim.size*rLim.size<sp/>+</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>pLim.size*rLim.size*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vprqk[Iprqk]<sp/>+=<sp/><ref refid="structVectorIntegralProvider_1a1baa10790ff866727cf21858b6408630" kindref="member">C</ref>[l<sp/>+<sp/>q*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>]<sp/>*<sp/>Vprlk[Iprlk];</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}}}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>COMPUTE<sp/>Vpqrs<sp/>=====================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s(sLim.lower);<sp/>s<sp/>&lt;<sp/>sLim.upper;<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r(rLim.lower);<sp/>r<sp/>&lt;<sp/>rLim.upper;<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>q(qLim.lower);<sp/>q<sp/>&lt;<sp/>qLim.upper;<sp/>++q)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>p(pLim.lower);<sp/>p<sp/>&lt;<sp/>pLim.upper;<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>IPQRS<sp/>=<sp/>pLim[p]</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>qLim[q]<sp/>*<sp/>pLim.size</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>rLim[r]<sp/>*<sp/>pLim.size*qLim.size</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>sLim[s]<sp/>*<sp/>pLim.size*qLim.size*rLim.size</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k(0);<sp/>k<sp/>&lt;<sp/><ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Iprqk<sp/>=<sp/>pLim[p]</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>rLim[r]<sp/>*<sp/>pLim.size</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>qLim[q]<sp/>*<sp/>pLim.size*rLim.size</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>k<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>pLim.size*rLim.size*qLim.size</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[IPQRS]<sp/>+=<sp/><ref refid="structVectorIntegralProvider_1a1baa10790ff866727cf21858b6408630" kindref="member">C</ref>[k<sp/>+<sp/>s*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>]<sp/>*<sp/>Vprqk[Iprqk];</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>k</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}}}}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="196" refid="structVectorIntegralProvider_1a1baa10790ff866727cf21858b6408630" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="structVectorIntegralProvider_1a1baa10790ff866727cf21858b6408630" kindref="member">C</ref>;</highlight></codeline>
<codeline lineno="197" refid="structVectorIntegralProvider_1a099f13664d5b8c2e5f17a5c036770997" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="structVectorIntegralProvider_1a099f13664d5b8c2e5f17a5c036770997" kindref="member">Vklmn</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">};</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="structSlowVectorIntegralProvider" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structSlowVectorIntegralProvider" kindref="compound">SlowVectorIntegralProvider</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structVectorIntegralProvider" kindref="compound">VectorIntegralProvider</ref><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structVectorIntegralProvider_1a168700f4a4110edfadb7821ccbb8edc9" kindref="member">VectorIntegralProvider::VectorIntegralProvider</ref>;</highlight></codeline>
<codeline lineno="202" refid="structSlowVectorIntegralProvider_1af6dc3bad3c8a815bb4f703540f47d492" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="structSlowVectorIntegralProvider_1af6dc3bad3c8a815bb4f703540f47d492" kindref="member">compute</ref>(<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8d" kindref="member">Index</ref><sp/>P,<sp/><ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8d" kindref="member">Index</ref><sp/>Q,<sp/><ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8d" kindref="member">Index</ref><sp/>R,<sp/><ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8d" kindref="member">Index</ref><sp/>S)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;<sp/>P<sp/>Q<sp/>|<sp/>R<sp/>S<sp/>&gt;<sp/>=<sp/>(P<sp/>R<sp/>|<sp/>Q<sp/>S)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Limit<sp/>pLim(<ref refid="structIntegralProvider_1ad11c563ff48d79517f0d93e31295d8d5" kindref="member">indexToLimits</ref>(P))</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>qLim(<ref refid="structIntegralProvider_1ad11c563ff48d79517f0d93e31295d8d5" kindref="member">indexToLimits</ref>(Q))</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>rLim(<ref refid="structIntegralProvider_1ad11c563ff48d79517f0d93e31295d8d5" kindref="member">indexToLimits</ref>(R))</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>sLim(<ref refid="structIntegralProvider_1ad11c563ff48d79517f0d93e31295d8d5" kindref="member">indexToLimits</ref>(S))</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dimension(pLim.size<sp/>*<sp/>qLim.size<sp/>*<sp/>rLim.size<sp/>*<sp/>sLim.size);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>result(dimension,<sp/>0.0);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s(sLim.lower),<sp/>ipqrs(0);<sp/>s<sp/>&lt;<sp/>sLim.upper;<sp/>++s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r(rLim.lower);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>&lt;<sp/>rLim.upper;<sp/>++r<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>q(qLim.lower);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>&lt;<sp/>qLim.upper;<sp/>++q<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>p(pLim.lower);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>&lt;<sp/>pLim.upper;<sp/>++p,<sp/>++ipqrs)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k(0),<sp/>Inmlk<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/><ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>;<sp/>++k<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l(0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>&lt;<sp/><ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>;<sp/>++l<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m(0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>&lt;<sp/><ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>;<sp/>++m<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n(0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>&lt;<sp/><ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>;<sp/>++n,<sp/>++Inmlk)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;p<sp/>q<sp/>|<sp/>r<sp/>s&gt;<sp/>=<sp/>(p<sp/>r<sp/>,<sp/>q<sp/>s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IPQRS<sp/>=<sp/>pLim[p]</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>qLim[q]<sp/>*<sp/>pLim.size</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>rLim[r]<sp/>*<sp/>pLim.size<sp/>*<sp/>qLim.size</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>sLim[s]<sp/>*<sp/>pLim.size<sp/>*<sp/>qLim.size<sp/>*<sp/>rLim.size</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[IPQRS]<sp/>+=<sp/><ref refid="structVectorIntegralProvider_1a1baa10790ff866727cf21858b6408630" kindref="member">C</ref>[k<sp/>+<sp/>s*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>]</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><ref refid="structVectorIntegralProvider_1a1baa10790ff866727cf21858b6408630" kindref="member">C</ref>[l<sp/>+<sp/>q*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>]</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><ref refid="structVectorIntegralProvider_1a1baa10790ff866727cf21858b6408630" kindref="member">C</ref>[m<sp/>+<sp/>r*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>]</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><ref refid="structVectorIntegralProvider_1a1baa10790ff866727cf21858b6408630" kindref="member">C</ref>[n<sp/>+<sp/>p*<ref refid="structIntegralProvider_1a1f704d963a5bc856f2a68069373d055d" kindref="member">Np</ref>]</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><ref refid="structVectorIntegralProvider_1a099f13664d5b8c2e5f17a5c036770997" kindref="member">Vklmn</ref>[Inmlk]</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>m</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>l</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>k</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>r</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>q</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>p</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">};</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="structCtfIntegralProvider" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structCtfIntegralProvider" kindref="compound">CtfIntegralProvider</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structIntegralProvider" kindref="compound">IntegralProvider</ref>&lt;<sp/>Tensor&lt;double&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="255" refid="structCtfIntegralProvider_1a8f8d07c2cb051b33745ee146ba6b382b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structCtfIntegralProvider_1a8f8d07c2cb051b33745ee146ba6b382b" kindref="member">CtfIntegralProvider</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>no</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nv</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>chemistNotation_</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>unrestricted_</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref><sp/>&amp;coefficients</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref><sp/>&amp;coulombIntegrals</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref><sp/>&amp;spins</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>):<ref refid="structIntegralProvider" kindref="compound">IntegralProvider</ref>(no,<sp/>nv,<sp/>chemistNotation_,<sp/>unrestricted_)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>C(coefficients)<sp/>,<sp/>V(coulombIntegrals),<sp/>S(spins)<sp/>{}</highlight></codeline>
<codeline lineno="264" refid="structCtfIntegralProvider_1a9fd3365a71212a0a413e3c3f99e75dab" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structCtfIntegralProvider_1a9fd3365a71212a0a413e3c3f99e75dab" kindref="member">~CtfIntegralProvider</ref>()<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>VTransformed;<sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="structCtfIntegralProvider_1afd9d4c8e365f85ba088c0c9f5dd9b4a7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref><sp/>*<ref refid="structCtfIntegralProvider_1afd9d4c8e365f85ba088c0c9f5dd9b4a7" kindref="member">compute</ref>()<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(VTransformed<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VTransformed;<sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;computing<sp/>main<sp/>transformation&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>LOGGER(1)<sp/>&lt;&lt;<sp/>&quot;lens:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>VTransformed-&gt;lens[0]<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>VTransformed-&gt;lens[1]<sp/>&lt;&lt;<sp/>&quot;,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>VTransformed-&gt;lens[2]<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>VTransformed-&gt;lens[3]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>LOGGER(1)<sp/>&lt;&lt;<sp/>V.lens[0]<sp/>*<sp/>V.lens[1]<sp/>*<sp/>V.lens[2]<sp/>*<sp/>V.lens[3]<sp/>*<sp/>7.45e-9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;GB<sp/>allocated&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;basis<sp/>Functions<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>C.lens[0]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>orbitals:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>C.lens[1]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>s(4,<sp/>NS);<sp/>std::vector&lt;int&gt;<sp/>l(4,<sp/>C.lens[0]);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structIntegralProvider_1a5435fd03b0f170b3c3afd880410dbca5" kindref="member">chemistNotation</ref>)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VTransformed<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref>(4,<sp/>l.data(),<sp/>s.data(),<sp/>*<ref refid="classsisi4s_1_1Sisi4s_1ace7b506b09fbfac3743da86db91d49ce" kindref="member">Sisi4s::world</ref>);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*VTransformed)[</highlight><highlight class="stringliteral">&quot;plmn&quot;</highlight><highlight class="normal">]<sp/>=<sp/>C[</highlight><highlight class="stringliteral">&quot;kp&quot;</highlight><highlight class="normal">]<sp/>*<sp/>V[</highlight><highlight class="stringliteral">&quot;klmn&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*VTransformed)[</highlight><highlight class="stringliteral">&quot;plqn&quot;</highlight><highlight class="normal">]<sp/>=<sp/>C[</highlight><highlight class="stringliteral">&quot;mq&quot;</highlight><highlight class="normal">]<sp/>*<sp/>(*VTransformed)[</highlight><highlight class="stringliteral">&quot;plmn&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*VTransformed)[</highlight><highlight class="stringliteral">&quot;prqn&quot;</highlight><highlight class="normal">]<sp/>=<sp/>C[</highlight><highlight class="stringliteral">&quot;lr&quot;</highlight><highlight class="normal">]<sp/>*<sp/>(*VTransformed)[</highlight><highlight class="stringliteral">&quot;plqn&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*VTransformed)[</highlight><highlight class="stringliteral">&quot;prqs&quot;</highlight><highlight class="normal">]<sp/>=<sp/>C[</highlight><highlight class="stringliteral">&quot;ns&quot;</highlight><highlight class="normal">]<sp/>*<sp/>(*VTransformed)[</highlight><highlight class="stringliteral">&quot;prqn&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>bueno<sp/>fuer<sp/>groessere<sp/>Tensoren</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>(*VTransformed)[&quot;pqrs&quot;]<sp/>=<sp/>C[&quot;ns&quot;]</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>C[&quot;lr&quot;]</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>C[&quot;mq&quot;]</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>C[&quot;kp&quot;]</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>V[&quot;klmn&quot;]</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l[0]<sp/>=<sp/>C.lens[1];</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>VIntermedia1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref>(4,<sp/>l.data(),<sp/>s.data(),<sp/>*<ref refid="classsisi4s_1_1Sisi4s_1ace7b506b09fbfac3743da86db91d49ce" kindref="member">Sisi4s::world</ref>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*VIntermedia1)[</highlight><highlight class="stringliteral">&quot;plmn&quot;</highlight><highlight class="normal">]<sp/>=<sp/>C[</highlight><highlight class="stringliteral">&quot;kp&quot;</highlight><highlight class="normal">]<sp/>*<sp/>V[</highlight><highlight class="stringliteral">&quot;klmn&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l[1]<sp/>=<sp/>C.lens[1];</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>VIntermedia2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref>(4,<sp/>l.data(),<sp/>s.data(),<sp/>*<ref refid="classsisi4s_1_1Sisi4s_1ace7b506b09fbfac3743da86db91d49ce" kindref="member">Sisi4s::world</ref>);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*VIntermedia2)[</highlight><highlight class="stringliteral">&quot;pqmn&quot;</highlight><highlight class="normal">]<sp/>=<sp/>C[</highlight><highlight class="stringliteral">&quot;lq&quot;</highlight><highlight class="normal">]<sp/>*<sp/>(*VIntermedia1)[</highlight><highlight class="stringliteral">&quot;plmn&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l[2]<sp/>=<sp/>C.lens[1];<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>VIntermedia1;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>VIntermedia3<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref>(4,<sp/>l.data(),<sp/>s.data(),<sp/>*<ref refid="classsisi4s_1_1Sisi4s_1ace7b506b09fbfac3743da86db91d49ce" kindref="member">Sisi4s::world</ref>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*VIntermedia3)[</highlight><highlight class="stringliteral">&quot;pqrn&quot;</highlight><highlight class="normal">]<sp/>=<sp/>C[</highlight><highlight class="stringliteral">&quot;mr&quot;</highlight><highlight class="normal">]<sp/>*<sp/>(*VIntermedia2)[</highlight><highlight class="stringliteral">&quot;pqmn&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l[3]<sp/>=<sp/>C.lens[1];<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>VIntermedia2;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VTransformed<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref>(4,<sp/>l.data(),<sp/>s.data(),<sp/>*<ref refid="classsisi4s_1_1Sisi4s_1ace7b506b09fbfac3743da86db91d49ce" kindref="member">Sisi4s::world</ref>);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*VTransformed)[</highlight><highlight class="stringliteral">&quot;pqrs&quot;</highlight><highlight class="normal">]<sp/>=<sp/>C[</highlight><highlight class="stringliteral">&quot;ns&quot;</highlight><highlight class="normal">]<sp/>*<sp/>(*VIntermedia3)[</highlight><highlight class="stringliteral">&quot;pqrn&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>VIntermedia3;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="structIntegralProvider_1ad854ec063569b65b086dd220d6640604" kindref="member">unrestricted</ref><sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unrestricted<sp/>case\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>a<sp/>spin<sp/>map<sp/>which<sp/>is<sp/>either<sp/>one<sp/>or<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Sm<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref>(2,<sp/>l.data(),<sp/>s.data(),<sp/>*<ref refid="classsisi4s_1_1Sisi4s_1ace7b506b09fbfac3743da86db91d49ce" kindref="member">Sisi4s::world</ref>);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*Sm)[</highlight><highlight class="stringliteral">&quot;pq&quot;</highlight><highlight class="normal">]<sp/>=<sp/>S[</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal">]*S[</highlight><highlight class="stringliteral">&quot;q&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTF::Transform&lt;double&gt;(</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;)&gt;(</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;s)<sp/>{<sp/>s<sp/>=<sp/>(s<sp/>+<sp/>0.25)<sp/>*<sp/>2.0;<sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)(</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*Sm)[</highlight><highlight class="stringliteral">&quot;pq&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Smap<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref>(4,<sp/>l.data(),<sp/>s.data(),<sp/>*<ref refid="classsisi4s_1_1Sisi4s_1ace7b506b09fbfac3743da86db91d49ce" kindref="member">Sisi4s::world</ref>);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*Smap)[</highlight><highlight class="stringliteral">&quot;pqrs&quot;</highlight><highlight class="normal">]<sp/>=<sp/>(*Sm)[</highlight><highlight class="stringliteral">&quot;pr&quot;</highlight><highlight class="normal">]<sp/>*<sp/>(*Sm)[</highlight><highlight class="stringliteral">&quot;qs&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTF::Bivar_Function&lt;&gt;<sp/>fMultiply(&amp;multiply&lt;double&gt;);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VTransformed-&gt;contract(</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0,<sp/>*VTransformed,</highlight><highlight class="stringliteral">&quot;pqrs&quot;</highlight><highlight class="normal">,<sp/>*Smap,</highlight><highlight class="stringliteral">&quot;pqrs&quot;</highlight><highlight class="normal">,<sp/>0.0,</highlight><highlight class="stringliteral">&quot;pqrs&quot;</highlight><highlight class="normal">,<sp/>fMultiply</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Smap;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vpqrs<sp/>build\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VTransformed<sp/>=<sp/>new<sp/>Tensor&lt;double&gt;(4,<sp/>l.data(),<sp/>s.data(),<sp/>*Sisi4s::world);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*VTransformed)[&quot;plmn&quot;]<sp/>=<sp/>C[&quot;kp&quot;]<sp/>*<sp/>V[&quot;klmn&quot;];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*VTransformed)[&quot;pqmn&quot;]<sp/>=<sp/>C[&quot;lq&quot;]<sp/>*<sp/>(*VTransformed)[&quot;plmn&quot;];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*VTransformed)[&quot;pqrn&quot;]<sp/>=<sp/>C[&quot;mr&quot;]<sp/>*<sp/>(*VTransformed)[&quot;pqmn&quot;];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*VTransformed)[&quot;pqrs&quot;]<sp/>=<sp/>C[&quot;ns&quot;]<sp/>*<sp/>(*VTransformed)[&quot;pqrn&quot;];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;main<sp/>transformation<sp/>done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VTransformed;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="structCtfIntegralProvider_1a8d4d9aaaf1a72611c49434b5b9137c8e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref><sp/><ref refid="structCtfIntegralProvider_1a8d4d9aaaf1a72611c49434b5b9137c8e" kindref="member">compute</ref>(<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8d" kindref="member">Index</ref><sp/>P,<sp/><ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8d" kindref="member">Index</ref><sp/>Q,<sp/><ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8d" kindref="member">Index</ref><sp/>R,<sp/><ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8d" kindref="member">Index</ref><sp/>S)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>transformation<sp/>if<sp/>it&apos;s<sp/>not<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>vpqrs(<ref refid="structCtfIntegralProvider_1afd9d4c8e365f85ba088c0c9f5dd9b4a7" kindref="member">compute</ref>());</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Limit<sp/>p(<ref refid="structIntegralProvider_1ad11c563ff48d79517f0d93e31295d8d5" kindref="member">indexToLimits</ref>(P))</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>q(<ref refid="structIntegralProvider_1ad11c563ff48d79517f0d93e31295d8d5" kindref="member">indexToLimits</ref>(Q))</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>r(<ref refid="structIntegralProvider_1ad11c563ff48d79517f0d93e31295d8d5" kindref="member">indexToLimits</ref>(R))</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>s(<ref refid="structIntegralProvider_1ad11c563ff48d79517f0d93e31295d8d5" kindref="member">indexToLimits</ref>(S))</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{(int)p.lower,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)q.lower,<sp/>(int)r.lower,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)s.lower}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>e[]<sp/>=<sp/>{(int)p.upper,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)q.upper,<sp/>(int)r.upper,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)s.upper}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Slicing<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>a[0]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>a[1]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>a[2]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>a[3]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e[0]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e[1]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e[2]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e[3]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>std::endl;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vpqrs-&gt;slice(a,<sp/>e);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref><sp/>&amp;C,<sp/>&amp;V,<sp/>&amp;S;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref>*<sp/>VTransformed<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal">};</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1ab1909dd58075ee188ac6b52b69bda1c3" refkind="member"><highlight class="normal"><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref>*<sp/><ref refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1ab1909dd58075ee188ac6b52b69bda1c3" kindref="member">stdVectorToTensor</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/>v</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>lens)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>syms(lens.size(),<sp/>NS);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref>(<sp/>lens.size()</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>lens.data()</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>syms.data()</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>*<ref refid="classsisi4s_1_1Sisi4s_1ace7b506b09fbfac3743da86db91d49ce" kindref="member">Sisi4s::world</ref></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>indices(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(<ref refid="classsisi4s_1_1Sisi4s_1ace7b506b09fbfac3743da86db91d49ce" kindref="member">Sisi4s::world</ref>-&gt;rank<sp/>==<sp/>0)<sp/>*<sp/>v.size());</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>std::iota(indices.begin(),<sp/>indices.end(),<sp/>0);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>result-&gt;write(indices.size(),<sp/>indices.data(),<sp/>v.data());</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="389" refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1af3b63ef77b93f7372413f038096edd8d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1af3b63ef77b93f7372413f038096edd8d" kindref="member">computeAndExport</ref><sp/>(<sp/><ref refid="classsisi4s_1_1Algorithm" kindref="compound">Algorithm</ref>&amp;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structIntegralProvider" kindref="compound">IntegralProvider&lt;V&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>std::vector&lt;IntegralInfo&gt;&amp;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="395" refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1ac62942818fd32e904a2c6436afc92320" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1af3b63ef77b93f7372413f038096edd8d" kindref="member">computeAndExport</ref><sp/>(<sp/><ref refid="classsisi4s_1_1Algorithm" kindref="compound">Algorithm</ref><sp/>&amp;a</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structIntegralProvider" kindref="compound">IntegralProvider</ref>&lt;<sp/>std::vector&lt;double&gt;<sp/>&gt;<sp/>&amp;engine</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>std::vector&lt;IntegralInfo&gt;<sp/>&amp;integralInfos</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;integral<sp/>:<sp/>integralInfos)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>a.<ref refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" kindref="member">isArgumentGiven</ref>(integral.name)<sp/>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>i(integral.indices);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Computing<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>integral.name<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>result;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>std::move(engine.compute(i[0],<sp/>i[1],<sp/>i[2],<sp/>i[3]));</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>lens(4);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j(0)<sp/>;<sp/>j<sp/>&lt;<sp/>4<sp/>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lens[j]<sp/>=<sp/>(int)engine.indexToInt(i[j]);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>a.<ref refid="classsisi4s_1_1Algorithm_1a388052a12509b8b641f17bbe8d41f8f3" kindref="member">allocatedTensorArgument</ref>&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(<sp/>integral.name</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1ab1909dd58075ee188ac6b52b69bda1c3" kindref="member">stdVectorToTensor</ref>(result,<sp/>lens)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="418" refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1a78b8eb3f40891cb06813feb82f06d315" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1af3b63ef77b93f7372413f038096edd8d" kindref="member">computeAndExport</ref><sp/>(<sp/><ref refid="classsisi4s_1_1Algorithm" kindref="compound">Algorithm</ref><sp/>&amp;a</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structIntegralProvider" kindref="compound">IntegralProvider</ref>&lt;<sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref><sp/>&gt;<sp/>&amp;engine</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>std::vector&lt;IntegralInfo&gt;<sp/>&amp;integralInfos</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;integral<sp/>:<sp/>integralInfos)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>a.<ref refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" kindref="member">isArgumentGiven</ref>(integral.name)<sp/>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>i(integral.indices);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Computing<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>integral.name<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>a.<ref refid="classsisi4s_1_1Algorithm_1a388052a12509b8b641f17bbe8d41f8f3" kindref="member">allocatedTensorArgument</ref>&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>integral.name</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref>(engine.compute(i[0],<sp/>i[1],<sp/>i[2],<sp/>i[3]))</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437" refid="classsisi4s_1_1CoulombIntegralsFromRotatedCoulombIntegrals_1ac4a7f4c21c88a42d9b0a91af3d057901" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1CoulombIntegralsFromRotatedCoulombIntegrals_1ac4a7f4c21c88a42d9b0a91af3d057901" kindref="member">CoulombIntegralsFromRotatedCoulombIntegrals::run</ref>()<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>args(<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;OrbitalCoefficients&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="stringliteral">&quot;CoulombIntegrals&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="stringliteral">&quot;HoleEigenEnergies&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="stringliteral">&quot;chemistNotation&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="stringliteral">&quot;engine&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="stringliteral">&quot;unrestricted&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="stringliteral">&quot;Spins&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref><sp/>*S;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C(<ref refid="classsisi4s_1_1Algorithm_1a338a44c8fd4d6be3b32a6d5e71dfe180" kindref="member">getTensorArgument</ref>(</highlight><highlight class="stringliteral">&quot;OrbitalCoefficients&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>V(<ref refid="classsisi4s_1_1Algorithm_1a338a44c8fd4d6be3b32a6d5e71dfe180" kindref="member">getTensorArgument</ref>(</highlight><highlight class="stringliteral">&quot;CoulombIntegrals&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>epsi(<ref refid="classsisi4s_1_1Algorithm_1a338a44c8fd4d6be3b32a6d5e71dfe180" kindref="member">getTensorArgument</ref>(</highlight><highlight class="stringliteral">&quot;HoleEigenEnergies&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>No(epsi-&gt;lens[0]);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nv(C-&gt;lens[1]<sp/>-<sp/>No);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>chemistNotation(<ref refid="classsisi4s_1_1Algorithm_1a5db14be3b0d33bf80218a37223e27667" kindref="member">getIntegerArgument</ref>(</highlight><highlight class="stringliteral">&quot;chemistNotation&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>unrestricted(<ref refid="classsisi4s_1_1Algorithm_1a5db14be3b0d33bf80218a37223e27667" kindref="member">getIntegerArgument</ref>(</highlight><highlight class="stringliteral">&quot;unrestricted&quot;</highlight><highlight class="normal">,<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unrestricted)<sp/>{<sp/>S<sp/>=<sp/><ref refid="classsisi4s_1_1Algorithm_1a338a44c8fd4d6be3b32a6d5e71dfe180" kindref="member">getTensorArgument</ref>(</highlight><highlight class="stringliteral">&quot;Spins&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>std::vector&lt;IntegralInfo&gt;<sp/>integralInfos<sp/>=</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>{</highlight><highlight class="stringliteral">&quot;HHHHCoulombIntegrals&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>},<sp/></highlight><highlight class="stringliteral">&quot;ijkl&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;HHHPCoulombIntegrals&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>},<sp/></highlight><highlight class="stringliteral">&quot;ijka&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;HHPHCoulombIntegrals&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>},<sp/></highlight><highlight class="stringliteral">&quot;ijak&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;HHPPCoulombIntegrals&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>},<sp/></highlight><highlight class="stringliteral">&quot;ijab&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;HPHHCoulombIntegrals&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>},<sp/></highlight><highlight class="stringliteral">&quot;iajk&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;HPHPCoulombIntegrals&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>},<sp/></highlight><highlight class="stringliteral">&quot;iajb&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;HPPHCoulombIntegrals&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>},<sp/></highlight><highlight class="stringliteral">&quot;iabj&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;HPPPCoulombIntegrals&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>},<sp/></highlight><highlight class="stringliteral">&quot;iabc&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;PHHHCoulombIntegrals&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>},<sp/></highlight><highlight class="stringliteral">&quot;aijk&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;PHHPCoulombIntegrals&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>},<sp/></highlight><highlight class="stringliteral">&quot;aijb&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;PHPHCoulombIntegrals&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>},<sp/></highlight><highlight class="stringliteral">&quot;aibj&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;PHPPCoulombIntegrals&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>},<sp/></highlight><highlight class="stringliteral">&quot;aibc&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;PPHHCoulombIntegrals&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>},<sp/></highlight><highlight class="stringliteral">&quot;abij&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;PPHPCoulombIntegrals&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>},<sp/></highlight><highlight class="stringliteral">&quot;abic&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;PPPHCoulombIntegrals&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>},<sp/></highlight><highlight class="stringliteral">&quot;abci&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;PPPPCoulombIntegrals&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>},<sp/></highlight><highlight class="stringliteral">&quot;abcd&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;PQRSCoulombIntegrals&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daceeda3c68e3d760c166526db0129a377" kindref="member">NP</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daceeda3c68e3d760c166526db0129a377" kindref="member">NP</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daceeda3c68e3d760c166526db0129a377" kindref="member">NP</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daceeda3c68e3d760c166526db0129a377" kindref="member">NP</ref>},<sp/></highlight><highlight class="stringliteral">&quot;pqrs&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>i:<sp/>integralInfos)<sp/>args.push_back(i.name);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1Algorithm_1a89f4af1584daed17ef628784e7e9c443" kindref="member">checkArgumentsOrDie</ref>(args);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><ref refid="CcsdEquationOfMotionDavidson_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Note:<sp/>CoulombIntegrals<sp/>have<sp/>to<sp/>be<sp/>in<sp/>chemist<sp/>notation!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><ref refid="CcsdEquationOfMotionDavidson_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Note:<sp/>Phyiscs<sp/>notation<sp/>only<sp/>implemented<sp/>for<sp/>ctf<sp/>provider&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><ref refid="CcsdEquationOfMotionDavidson_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>No<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><ref refid="CcsdEquationOfMotionDavidson_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nv:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Nv<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">EngineInfo<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Name<sp/>{<sp/>CTF,<sp/>VECTOR_SLOW,<sp/>VECTOR_FAST<sp/>};</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Name<sp/>fromString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ctf&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CTF;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;VectorSlow&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VECTOR_SLOW;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;VectorFast&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VECTOR_FAST;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="Exception_8hpp_1aa49c727f91093a79c46ee6ecd83548bb" kindref="member">EXCEPTION</ref>(</highlight><highlight class="stringliteral">&quot;Engine<sp/>name<sp/>not<sp/>recognised&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EngineInfo::Name<sp/>engineType(EngineInfo::fromString(</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1Algorithm_1a5e80a507fac066ab5714b62364cabaaf" kindref="member">getTextArgument</ref>(</highlight><highlight class="stringliteral">&quot;engine&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ctf&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><ref refid="CcsdEquationOfMotionDavidson_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Using<sp/>engine:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engineType<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><ref refid="CcsdEquationOfMotionDavidson_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Using<sp/>chemistNotation?:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>chemistNotation<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(engineType<sp/>==<sp/>EngineInfo::VECTOR_FAST)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structVectorIntegralProvider" kindref="compound">VectorIntegralProvider</ref><sp/>engine(No,<sp/>Nv,<sp/>chemistNotation,<sp/>unrestricted,<sp/>*C,<sp/>*V);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1af3b63ef77b93f7372413f038096edd8d" kindref="member">computeAndExport</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>engine,<sp/>integralInfos);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(engineType<sp/>==<sp/>EngineInfo::VECTOR_SLOW)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structSlowVectorIntegralProvider" kindref="compound">SlowVectorIntegralProvider</ref><sp/>engine(No,<sp/>Nv,<sp/>chemistNotation,<sp/>unrestricted,<sp/>*C,<sp/>*V);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1af3b63ef77b93f7372413f038096edd8d" kindref="member">computeAndExport</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>engine,<sp/>integralInfos);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCtfIntegralProvider" kindref="compound">CtfIntegralProvider</ref><sp/>engine(No,<sp/>Nv,<sp/>chemistNotation,<sp/>unrestricted,<sp/>*C,<sp/>*V,<sp/>*S);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="CoulombIntegralsFromRotatedCoulombIntegrals_8cxx_1af3b63ef77b93f7372413f038096edd8d" kindref="member">computeAndExport</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>engine,<sp/>integralInfos);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><ref refid="Emitter_8hpp_1aaab796d47261553f44525310f031c82a" kindref="member">EMIT</ref>()<sp/>&lt;&lt;<sp/>YAML::Key<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>YAML::Value<sp/>&lt;&lt;<sp/>No</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>YAML::Key<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nv&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>YAML::Value<sp/>&lt;&lt;<sp/>Nv</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>YAML::Key<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;engine&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>YAML::Value<sp/>&lt;&lt;<sp/>engineType</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>YAML::Key<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;chemist-notation&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>YAML::Value<sp/>&lt;&lt;<sp/>chemistNotation</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/sisi4s/sisi4s/src/algorithms/CoulombIntegralsFromRotatedCoulombIntegrals.cxx"/>
  </compounddef>
</doxygen>
