<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="FcidumpReader_8cxx" kind="file" language="C++">
    <compoundname>FcidumpReader.cxx</compoundname>
    <includes refid="FcidumpReader_8hpp" local="no">algorithms/FcidumpReader.hpp</includes>
    <includes refid="Tensor_8hpp" local="no">util/Tensor.hpp</includes>
    <includes refid="Log_8hpp" local="no">util/Log.hpp</includes>
    <includes refid="Sisi4s_8hpp" local="no">Sisi4s.hpp</includes>
    <includes refid="Exception_8hpp" local="no">util/Exception.hpp</includes>
    <includes refid="Integrals_8hpp" local="no">util/Integrals.hpp</includes>
    <includes local="no">fstream</includes>
    <includes local="no">regex</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">numeric</includes>
    <incdepgraph>
      <node id="4">
        <label>Data.hpp</label>
        <link refid="Data_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Options.hpp</label>
        <link refid="Options_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>Sisi4s.hpp</label>
        <link refid="Sisi4s_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>algorithms/Algorithm.hpp</label>
        <link refid="Algorithm_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>FcidumpReader.cxx</label>
        <link refid="FcidumpReader_8cxx"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algorithms/FcidumpReader.hpp</label>
        <link refid="FcidumpReader_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>extern/CLI11.hpp</label>
        <link refid="CLI11_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>math/Complex.hpp</label>
        <link refid="Complex_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>math/Float.hpp</label>
        <link refid="Float_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>util/CTF.hpp</label>
        <link refid="CTF_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>util/Exception.hpp</label>
        <link refid="Exception_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>util/Integrals.hpp</label>
        <link refid="Integrals_8hpp"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>util/Log.hpp</label>
        <link refid="Log_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>util/Tensor.hpp</label>
        <link refid="Tensor_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>util/Time.hpp</label>
        <link refid="Time_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>algorithm</label>
      </node>
      <node id="45">
        <label>array</label>
      </node>
      <node id="12">
        <label>cmath</label>
      </node>
      <node id="19">
        <label>complex</label>
      </node>
      <node id="8">
        <label>cstdint</label>
      </node>
      <node id="24">
        <label>ctf.hpp</label>
      </node>
      <node id="7">
        <label>ctime</label>
      </node>
      <node id="41">
        <label>exception</label>
      </node>
      <node id="16">
        <label>fstream</label>
      </node>
      <node id="30">
        <label>functional</label>
      </node>
      <node id="10">
        <label>iomanip</label>
      </node>
      <node id="14">
        <label>iostream</label>
      </node>
      <node id="38">
        <label>iterator</label>
      </node>
      <node id="40">
        <label>limits</label>
      </node>
      <node id="34">
        <label>locale</label>
      </node>
      <node id="20">
        <label>map</label>
      </node>
      <node id="29">
        <label>memory</label>
      </node>
      <node id="31">
        <label>numeric</label>
      </node>
      <node id="9">
        <label>ostream</label>
      </node>
      <node id="46">
        <label>regex</label>
      </node>
      <node id="36">
        <label>set</label>
      </node>
      <node id="11">
        <label>sstream</label>
      </node>
      <node id="39">
        <label>stdexcept</label>
      </node>
      <node id="15">
        <label>streambuf</label>
      </node>
      <node id="13">
        <label>string</label>
      </node>
      <node id="42">
        <label>sys/stat.h</label>
      </node>
      <node id="43">
        <label>sys/types.h</label>
      </node>
      <node id="32">
        <label>tuple</label>
      </node>
      <node id="37">
        <label>type_traits</label>
      </node>
      <node id="33">
        <label>utility</label>
      </node>
      <node id="21">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="structIntegralParser" prot="public">IntegralParser</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="FcidumpReader_8cxx_1a8eb0aca4fba69b3a6f79ee2bd62b796d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int indexToLenght</definition>
        <argsstring>(const char a, const int No, const int Nv)</argsstring>
        <name>indexToLenght</name>
        <param>
          <type>const char</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>No</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>Nv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/sisi4s/sisi4s/src/algorithms/FcidumpReader.cxx" line="51" column="1" bodyfile="/home/runner/work/sisi4s/sisi4s/src/algorithms/FcidumpReader.cxx" bodystart="51" bodyend="59"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="FcidumpReader_8hpp" kindref="compound">algorithms/FcidumpReader.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Tensor_8hpp" kindref="compound">util/Tensor.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Log_8hpp" kindref="compound">util/Log.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Sisi4s_8hpp" kindref="compound">Sisi4s.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Exception_8hpp" kindref="compound">util/Exception.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Integrals_8hpp" kindref="compound">util/Integrals.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;regex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesisi4s" kindref="compound">sisi4s</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><ref refid="Algorithm_8hpp_1a07e9ffa67ed21886a687b27719c949e1" kindref="member">ALGORITHM_REGISTRAR_DEFINITION</ref>(<ref refid="classsisi4s_1_1FcidumpReader" kindref="compound">FcidumpReader</ref>);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><ref refid="structsisi4s_1_1FcidumpReader_1_1FcidumpHeader" kindref="compound">FcidumpReader::FcidumpHeader</ref></highlight></codeline>
<codeline lineno="17" refid="classsisi4s_1_1FcidumpReader_1adf8aded9c11597aaf1eb86408d74a944" refkind="member"><highlight class="normal"><ref refid="classsisi4s_1_1FcidumpReader_1adf8aded9c11597aaf1eb86408d74a944" kindref="member">FcidumpReader::parseHeader</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filePath)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><ref refid="structsisi4s_1_1FcidumpReader_1_1FcidumpHeader" kindref="compound">FcidumpReader::FcidumpHeader</ref><sp/>header{.<ref refid="structsisi4s_1_1FcidumpReader_1_1FcidumpHeader_1a2ca0da02fd72522b205b31521d2f818d" kindref="member">norb</ref>=0,<sp/>.nelec=0,<sp/>.uhf=0,<sp/>.ms2=0};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>std::regex</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>rnorb{</highlight><highlight class="stringliteral">&quot;NORB\\s*=\\s*([0-9]+)&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>rnelec{</highlight><highlight class="stringliteral">&quot;NELEC\\s*=\\s*([0-9]+)&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>ruhf{</highlight><highlight class="stringliteral">&quot;UHF\\s*=\\s*([01])&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>rms2{</highlight><highlight class="stringliteral">&quot;MS2\\s*=\\s*([0-9]+)&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>rend{</highlight><highlight class="stringliteral">&quot;^\\s*([/]|&amp;END|\\$)\\s*$&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>file(filePath);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file.is_open())<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(std::getline(file,<sp/>line))<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::smatch<sp/>matches;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::regex_search(line,<sp/>matches,<sp/>rnorb);<sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>norb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matches.size())<sp/>header.norb<sp/>=<sp/>atoi(std::string{matches[1]}.c_str());</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::regex_search(line,<sp/>matches,<sp/>rnelec);<sp/></highlight><highlight class="comment">//<sp/>parse<sp/>nelec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matches.size())<sp/>header.nelec<sp/>=<sp/>atoi(std::string{matches[1]}.c_str());</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::regex_search(line,<sp/>matches,<sp/>ruhf);<sp/></highlight><highlight class="comment">//<sp/>parse<sp/>uhf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matches.size())<sp/>header.uhf<sp/>=<sp/>atoi(std::string{matches[1]}.c_str());</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::regex_search(line,<sp/>matches,<sp/>rms2);<sp/></highlight><highlight class="comment">//<sp/>parse<sp/>ms2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matches.size())<sp/>header.ms2<sp/>=<sp/>atoi(std::string{matches[1]}.c_str());</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::regex_match(line,<sp/>matches,<sp/>rend);<sp/></highlight><highlight class="comment">//<sp/>parse<sp/>end<sp/>of<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matches.size())<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;FcidumpReader&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Breaking<sp/>at<sp/>line<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>line<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;FcidumpReader&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>line<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>file.close();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>header;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="FcidumpReader_8cxx_1a8eb0aca4fba69b3a6f79ee2bd62b796d" refkind="member"><highlight class="normal"><ref refid="FcidumpReader_8cxx_1a8eb0aca4fba69b3a6f79ee2bd62b796d" kindref="member">indexToLenght</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>No,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nv)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>==<sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>No;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>==<sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Nv;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>No<sp/>+<sp/>Nv;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="structIntegralParser" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structIntegralParser" kindref="compound">IntegralParser</ref><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>how<sp/>many<sp/>index<sp/>columns<sp/>are<sp/>there<sp/>in<sp/>the<sp/>fcidump</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="structIntegralParser_1aa3f0a599d5e8dc7aafff1aea996086ef" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index_columns{4};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>e.g.<sp/>hh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="structIntegralParser_1aa2406573013466aba71cc0e9536b0586" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="structIntegralParser_1aa2406573013466aba71cc0e9536b0586" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>e.g.<sp/>hh<sp/>in<sp/>chemist<sp/>notation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="structIntegralParser_1a42c506cb6dbd6fb2d1aece52e614975f" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="structIntegralParser_1a42c506cb6dbd6fb2d1aece52e614975f" kindref="member">chemistName</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>regex<sp/>for<sp/>a<sp/>single<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="structIntegralParser_1af001899ba012078a407eb4065d5f6916" refkind="member"><highlight class="normal"><sp/><sp/>std::regex<sp/><ref refid="structIntegralParser_1af001899ba012078a407eb4065d5f6916" kindref="member">regex</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>actual<sp/>values<sp/>of<sp/>the<sp/>tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="structIntegralParser_1aab529d2d0f5a659c575962e70231d63e" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="structIntegralParser_1aab529d2d0f5a659c575962e70231d63e" kindref="member">values</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>actual<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="structIntegralParser_1abf6f3308966b42549f9f5291c57c7502" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/><ref refid="structIntegralParser_1abf6f3308966b42549f9f5291c57c7502" kindref="member">indices</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ctf<sp/>lens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="structIntegralParser_1a9ff2fa59e708cb1ef99850ae27e59d47" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="structIntegralParser_1a9ff2fa59e708cb1ef99850ae27e59d47" kindref="member">lens</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ctf<sp/>syms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="structIntegralParser_1aaedef43c2d5d2ce2cf8dead46faf399a" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="structIntegralParser_1aaedef43c2d5d2ce2cf8dead46faf399a" kindref="member">syms</ref>;</highlight></codeline>
<codeline lineno="78" refid="structIntegralParser_1a6aa71ee8d25570a5cf17e22f760fbefb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structIntegralParser_1a6aa71ee8d25570a5cf17e22f760fbefb" kindref="member">uhf</ref>;</highlight></codeline>
<codeline lineno="79" refid="structIntegralParser_1a22880c369f04fbcc247bc0188e0a09a6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structIntegralParser_1a22880c369f04fbcc247bc0188e0a09a6" kindref="member">No</ref>,<sp/>Nv;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>general<sp/>size<sp/>of<sp/>the<sp/>tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="structIntegralParser_1a3abd0dac8e5b32c7c57b12180add840e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structIntegralParser_1a3abd0dac8e5b32c7c57b12180add840e" kindref="member">dimension</ref>;</highlight></codeline>
<codeline lineno="82" refid="structIntegralParser_1ab75cbe9ea6d2495a9bc3675e73e90d2a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structIntegralParser_1ab75cbe9ea6d2495a9bc3675e73e90d2a" kindref="member">IntegralParser</ref>(std::string<sp/>name_,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsisi4s_1_1FcidumpReader_1_1FcidumpHeader" kindref="compound">FcidumpReader::FcidumpHeader</ref><sp/>&amp;header)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:name(name_)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!std::regex_match(name,<sp/>std::regex{</highlight><highlight class="stringliteral">&quot;^[hpt]*$&quot;</highlight><highlight class="normal">}))<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="Exception_8hpp_1aa49c727f91093a79c46ee6ecd83548bb" kindref="member">EXCEPTION</ref>(</highlight><highlight class="stringliteral">&quot;Name<sp/>should<sp/>be<sp/>a<sp/>combination<sp/>of<sp/>[hpt]<sp/>or<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>chemistName<sp/>of<sp/>this<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>chemistName<sp/>=<sp/>(name.size()<sp/>==<sp/>4)<sp/>?<sp/><sp/><ref refid="namespacesisi4s_1a23086047930a61869e747cae447dfe65" kindref="member">permuteIndices</ref>(name,<sp/>1,<sp/>2)<sp/>:<sp/>name;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>uhf<sp/>=<sp/>header.<ref refid="structsisi4s_1_1FcidumpReader_1_1FcidumpHeader_1a8c1c723c8c8a57d3ab3aed2d9d0cd68e" kindref="member">uhf</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>No<sp/>=<sp/>(uhf<sp/>==<sp/>1<sp/>?<sp/>1<sp/>:<sp/>0.5)<sp/>*<sp/>header.<ref refid="structsisi4s_1_1FcidumpReader_1_1FcidumpHeader_1aa1f19183c5ad38d14a97101f1bf14948" kindref="member">nelec</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>Nv<sp/>=<sp/>(uhf<sp/>==<sp/>1<sp/>?<sp/>2<sp/>:<sp/>1)<sp/>*<sp/>header.<ref refid="structsisi4s_1_1FcidumpReader_1_1FcidumpHeader_1a2ca0da02fd72522b205b31521d2f818d" kindref="member">norb</ref><sp/>-<sp/>No;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>syms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>syms.insert(syms.begin(),<sp/>name.size(),<sp/>NS);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>lens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>std::for_each(name.begin(),<sp/>name.end(),</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&amp;<sp/>a){</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lens.push_back(indexToLenght(a,<sp/>No,<sp/>Nv));<sp/>});</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>dimensio</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>dimension<sp/>=<sp/>std::accumulate(lens.begin(),<sp/>lens.end(),<sp/>1,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::multiplies&lt;int&gt;());</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>to<sp/>build<sp/>regex<sp/>for<sp/>the<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>starts<sp/>with<sp/>the<sp/>numerical<sp/>value<sp/>of<sp/>the<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>regex_str{</highlight><highlight class="stringliteral">&quot;^\\s*(\\S+)&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>so<sp/>many<sp/>indices<sp/>as<sp/>lens<sp/>we<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>std::for_each(lens.begin(),<sp/>lens.end(),</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">){<sp/>regex_str<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\s+([1-9][0-9]*)&quot;</highlight><highlight class="normal">;<sp/>});</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>lens<sp/>is<sp/>less<sp/>that<sp/>the<sp/>number<sp/>of<sp/>columns<sp/>available,<sp/>the<sp/>rest<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i(0);<sp/>i&lt;(index_columns<sp/>-<sp/>lens.size());<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>regex_str<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\s+0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>with<sp/>possible<sp/>padding<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>regex_str<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\s*$&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>regex<sp/>=<sp/>std::regex{regex_str};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="structIntegralParser_1ab63ba0ca24350293941b29288d5f0864" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structIntegralParser_1ab63ba0ca24350293941b29288d5f0864" kindref="member">match</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;line)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>std::smatch<sp/>matches;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>std::regex_match(line,<sp/>matches,<sp/>regex);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>gIndices(lens.size());</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>gIndexLens(lens.size());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>spin_uhf(uhf<sp/>?<sp/>1<sp/>:<sp/>2);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matches<sp/>=<sp/>{line,<sp/>value,<sp/>index1,<sp/>index2,<sp/>...}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matches.size()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>line<sp/>relates<sp/>to<sp/>this<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(2);<sp/>i&lt;matches.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>std::atoi(std::string{matches[i]}.c_str());</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>what<sp/>is<sp/>the<sp/>corresponding<sp/>index<sp/>in<sp/>our<sp/>integrals,<sp/>H<sp/>or<sp/>P?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>_HorPorT(chemistName[i-2]);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>index<sp/>is<sp/>not<sp/>what<sp/>we&apos;re<sp/>expecting<sp/>then<sp/>return<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((k<sp/>&lt;=<sp/>No<sp/>&amp;&amp;<sp/>_HorPorT<sp/>==<sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(k<sp/>&gt;<sp/>No<sp/>&amp;&amp;<sp/>_HorPorT<sp/>==<sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_HorPorT<sp/>==<sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gIndices[i-2]<sp/>=<sp/><sp/>k<sp/>-<sp/>No<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_HorPorT<sp/>==<sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gIndices[i-2]<sp/>=<sp/>k<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>get<sp/>the<sp/>pure<sp/>index<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gIndices[i-2]<sp/>=<sp/>k<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//LOG(1,<sp/>&quot;FcidumpReader&quot;)<sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/>&quot;:(&quot;<sp/>&lt;&lt;<sp/>chemistName<sp/>&lt;&lt;<sp/>&quot;):&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;&lt;<sp/>line<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>be<sp/>in<sp/>physics<sp/>notation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="comment">//<sp/>build<sp/>up<sp/>gIndexLens<sp/>(1,<sp/>N_1,<sp/>N_1<sp/>*<sp/>N_2,<sp/>...,<sp/>N_1<sp/>*...*<sp/>N_n-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>lens<sp/>into<sp/>tempLens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>tempLens(lens);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>last<sp/>lens,<sp/>the<sp/>last<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tempLens.pop_back();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>at<sp/>the<sp/>beginning<sp/>a<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tempLens.insert(tempLens.begin(),<sp/>1);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>list<sp/>with<sp/>the<sp/>partial<sp/>products<sp/>of<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>tempLens,<sp/>and<sp/>store<sp/>them<sp/>in<sp/>gIndexLens.begin()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::partial_sum(tempLens.begin(),<sp/>tempLens.end(),</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gIndexLens.begin(),<sp/>std::multiplies&lt;int&gt;());</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gIndices<sp/>was<sp/>read<sp/>in<sp/>chemist<sp/>notation<sp/>since<sp/>it<sp/>comes<sp/>from<sp/>a<sp/>chemistName</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>have<sp/>to<sp/>change<sp/>it<sp/>back<sp/>to<sp/>physics<sp/>notation<sp/>to<sp/>store<sp/>the<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>correctly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gIndices.size()<sp/>==<sp/>4)<sp/>gIndices<sp/>=<sp/><ref refid="namespacesisi4s_1a23086047930a61869e747cae447dfe65" kindref="member">permuteIndices</ref>(gIndices,<sp/>1,<sp/>2);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>values.push_back(std::atof(std::string{matches[1]}.c_str()));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>indices.push_back(</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::inner_product(</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gIndexLens.begin(),<sp/>gIndexLens.end(),<sp/>gIndices.begin(),<sp/>0));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="structIntegralParser_1ab40f18e20fbaf0214a92e69ad5cb1845" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref>*<sp/><ref refid="structIntegralParser_1ab40f18e20fbaf0214a92e69ad5cb1845" kindref="member">allocateTensor</ref>()<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank_m<sp/>=<sp/>int(<ref refid="classsisi4s_1_1Sisi4s_1ace7b506b09fbfac3743da86db91d49ce" kindref="member">Sisi4s::world</ref>-&gt;rank<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>rank<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;double&gt;</ref>(lens.size(),</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lens.data(),</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>syms.data(),</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="classsisi4s_1_1Sisi4s_1ace7b506b09fbfac3743da86db91d49ce" kindref="member">Sisi4s::world</ref>));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;write(rank_m<sp/>*<sp/>indices.size(),<sp/>indices.data(),<sp/>values.data());</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">};</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="classsisi4s_1_1FcidumpReader_1a25fd961515594f3bdc954899ad9d8f2f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1FcidumpReader_1a25fd961515594f3bdc954899ad9d8f2f" kindref="member">FcidumpReader::run</ref>()<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>filePath(<ref refid="classsisi4s_1_1Algorithm_1a5e80a507fac066ab5714b62364cabaaf" kindref="member">getTextArgument</ref>(</highlight><highlight class="stringliteral">&quot;file&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;FCIDUMP&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>override<sp/>the<sp/>header<sp/>of<sp/>the<sp/>fcidump</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nelec(<ref refid="classsisi4s_1_1Algorithm_1a5db14be3b0d33bf80218a37223e27667" kindref="member">getIntegerArgument</ref>(</highlight><highlight class="stringliteral">&quot;nelec&quot;</highlight><highlight class="normal">,<sp/>-1));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><ref refid="structsisi4s_1_1FcidumpReader_1_1FcidumpHeader" kindref="compound">FcidumpReader::FcidumpHeader</ref><sp/>header(<ref refid="classsisi4s_1_1FcidumpReader_1adf8aded9c11597aaf1eb86408d74a944" kindref="member">parseHeader</ref>(filePath));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nelec<sp/>!=<sp/>-1)<sp/>header.<ref refid="structsisi4s_1_1FcidumpReader_1_1FcidumpHeader_1aa1f19183c5ad38d14a97101f1bf14948" kindref="member">nelec</ref><sp/>=<sp/>nelec;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>No((header.<ref refid="structsisi4s_1_1FcidumpReader_1_1FcidumpHeader_1a8c1c723c8c8a57d3ab3aed2d9d0cd68e" kindref="member">uhf</ref><sp/>==<sp/>1<sp/>?<sp/>1<sp/>:<sp/>0.5)<sp/>*<sp/>header.<ref refid="structsisi4s_1_1FcidumpReader_1_1FcidumpHeader_1aa1f19183c5ad38d14a97101f1bf14948" kindref="member">nelec</ref>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nv((header.<ref refid="structsisi4s_1_1FcidumpReader_1_1FcidumpHeader_1a8c1c723c8c8a57d3ab3aed2d9d0cd68e" kindref="member">uhf</ref><sp/>==<sp/>1<sp/>?<sp/>2<sp/>:<sp/>1)<sp/>*<sp/>header.<ref refid="structsisi4s_1_1FcidumpReader_1_1FcidumpHeader_1a2ca0da02fd72522b205b31521d2f818d" kindref="member">norb</ref><sp/>-<sp/>No);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header.<ref refid="structsisi4s_1_1FcidumpReader_1_1FcidumpHeader_1a8c1c723c8c8a57d3ab3aed2d9d0cd68e" kindref="member">uhf</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="Exception_8hpp_1aa49c727f91093a79c46ee6ecd83548bb" kindref="member">EXCEPTION</ref>(</highlight><highlight class="stringliteral">&quot;UHF<sp/>not<sp/>implemented&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;FcidumpReader&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Fcidump<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>filePath<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;FcidumpReader&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;NELEC<sp/><sp/><sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>header.<ref refid="structsisi4s_1_1FcidumpReader_1_1FcidumpHeader_1aa1f19183c5ad38d14a97101f1bf14948" kindref="member">nelec</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;FcidumpReader&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;NORB<sp/><sp/><sp/><sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>header.<ref refid="structsisi4s_1_1FcidumpReader_1_1FcidumpHeader_1a2ca0da02fd72522b205b31521d2f818d" kindref="member">norb</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;FcidumpReader&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MS2<sp/><sp/><sp/><sp/><sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>header.<ref refid="structsisi4s_1_1FcidumpReader_1_1FcidumpHeader_1a8aaf17c44c87391c781344f420b7b174" kindref="member">ms2</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;FcidumpReader&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;UHF<sp/><sp/><sp/><sp/><sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>header.<ref refid="structsisi4s_1_1FcidumpReader_1_1FcidumpHeader_1a8c1c723c8c8a57d3ab3aed2d9d0cd68e" kindref="member">uhf</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;FcidumpReader&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>No<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;FcidumpReader&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nv<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Nv<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;IntegralInfo&gt;<sp/>twoBody({</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;tttt&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daceeda3c68e3d760c166526db0129a377" kindref="member">NP</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daceeda3c68e3d760c166526db0129a377" kindref="member">NP</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daceeda3c68e3d760c166526db0129a377" kindref="member">NP</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daceeda3c68e3d760c166526db0129a377" kindref="member">NP</ref>},<sp/></highlight><highlight class="stringliteral">&quot;pqrs&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;hhhh&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>},<sp/></highlight><highlight class="stringliteral">&quot;ijkl&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;hhhp&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>},<sp/></highlight><highlight class="stringliteral">&quot;ijka&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;hhph&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>},<sp/></highlight><highlight class="stringliteral">&quot;ijak&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;hhpp&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>},<sp/></highlight><highlight class="stringliteral">&quot;ijab&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;hphh&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>},<sp/></highlight><highlight class="stringliteral">&quot;iajk&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;hphp&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>},<sp/></highlight><highlight class="stringliteral">&quot;iajb&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;hpph&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>},<sp/></highlight><highlight class="stringliteral">&quot;iabj&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;hppp&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>},<sp/></highlight><highlight class="stringliteral">&quot;iabc&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;phhh&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>},<sp/></highlight><highlight class="stringliteral">&quot;aijk&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;phhp&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>},<sp/></highlight><highlight class="stringliteral">&quot;aijb&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;phph&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>},<sp/></highlight><highlight class="stringliteral">&quot;aibj&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;phpp&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>},<sp/></highlight><highlight class="stringliteral">&quot;aibc&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;pphh&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>},<sp/></highlight><highlight class="stringliteral">&quot;abij&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;pphp&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>},<sp/></highlight><highlight class="stringliteral">&quot;abic&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;ppph&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8daa906462c48a265bc4b7fe47477719586" kindref="member">NO</ref>},<sp/></highlight><highlight class="stringliteral">&quot;abci&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;pppp&quot;</highlight><highlight class="normal">,<sp/>{<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>,<ref refid="namespacesisi4s_1af6fb2fb68d4debbf0349a11be6963b8da0852843fe89ed23115167b8255b92644" kindref="member">NV</ref>},<sp/></highlight><highlight class="stringliteral">&quot;abcd&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>integralNames{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;tt&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;tttt&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;hh&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pp&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hp&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ph&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;hhhh&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hhhp&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hhph&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hhpp&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hphh&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hphp&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hpph&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hppp&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;phhh&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;phhp&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;phph&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;phpp&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pphh&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pphp&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ppph&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pppp&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>std::vector&lt;IntegralParser&gt;<sp/>integralParsers;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>name:<sp/>integralNames)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" kindref="member">isArgumentGiven</ref>(name))<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>integralParsers.push_back(<ref refid="structIntegralParser" kindref="compound">IntegralParser</ref>(name,<sp/>header));</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;FcidumpReader&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Parsing<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>file(filePath);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file.is_open())<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(std::getline(file,<sp/>line))<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it=integralParsers.begin();<sp/>it<sp/>!=<sp/>integralParsers.end();<sp/>++it){</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it).match(line)){</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Swap<sp/>position<sp/>of<sp/>the<sp/>first<sp/>element<sp/>in<sp/>the<sp/>parsers<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>highly<sp/>probable<sp/>that<sp/>the<sp/>line<sp/>in<sp/>the<sp/>fcidump<sp/>also<sp/>referes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>this<sp/>integral,<sp/>for<sp/>large<sp/>files<sp/>and<sp/>many<sp/>integrals<sp/>this<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>beneficial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::iter_swap(integralParsers.begin(),<sp/>it);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>file.close();</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;FcidumpReader&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;parsing<sp/>done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>parser:<sp/>integralParsers)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>name(parser.name);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" kindref="member">isArgumentGiven</ref>(name))<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;FcidumpReader&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Exporting:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>parser.name<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>allocatedTensorArgument&lt;double&gt;(name,<sp/>parser.allocateTensor());</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/sisi4s/sisi4s/src/algorithms/FcidumpReader.cxx"/>
  </compounddef>
</doxygen>
