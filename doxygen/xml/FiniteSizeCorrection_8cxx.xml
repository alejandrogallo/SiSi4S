<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="FiniteSizeCorrection_8cxx" kind="file" language="C++">
    <compoundname>FiniteSizeCorrection.cxx</compoundname>
    <includes refid="FiniteSizeCorrection_8hpp" local="no">algorithms/FiniteSizeCorrection.hpp</includes>
    <includes refid="Complex_8hpp" local="no">math/Complex.hpp</includes>
    <includes refid="ComplexTensor_8hpp" local="no">math/ComplexTensor.hpp</includes>
    <includes refid="DryTensor_8hpp" local="no">DryTensor.hpp</includes>
    <includes refid="MathFunctions_8hpp" local="no">math/MathFunctions.hpp</includes>
    <includes refid="Vector_8hpp" local="no">math/Vector.hpp</includes>
    <includes refid="Interpolation_8hpp" local="no">math/Interpolation.hpp</includes>
    <includes refid="TricubicInterpolation_8hpp" local="no">gte/TricubicInterpolation.hpp</includes>
    <includes refid="TrilinearInterpolation_8hpp" local="no">gte/TrilinearInterpolation.hpp</includes>
    <includes refid="MpiCommunicator_8hpp" local="no">util/MpiCommunicator.hpp</includes>
    <includes refid="Log_8hpp" local="no">util/Log.hpp</includes>
    <includes refid="Exception_8hpp" local="no">util/Exception.hpp</includes>
    <includes refid="SharedPointer_8hpp" local="no">util/SharedPointer.hpp</includes>
    <includes refid="Sisi4s_8hpp" local="no">Sisi4s.hpp</includes>
    <includes refid="CTF_8hpp" local="no">util/CTF.hpp</includes>
    <includes local="no">iostream</includes>
    <includes local="no">math.h</includes>
    <includes local="no">vector</includes>
    <includes local="no">sstream</includes>
    <incdepgraph>
      <node id="4">
        <label>Data.hpp</label>
        <link refid="Data_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>DryTensor.hpp</label>
        <link refid="DryTensor_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>Options.hpp</label>
        <link refid="Options_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>Sisi4s.hpp</label>
        <link refid="Sisi4s_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>algorithms/Algorithm.hpp</label>
        <link refid="Algorithm_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>FiniteSizeCorrection.cxx</label>
        <link refid="FiniteSizeCorrection_8cxx"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algorithms/FiniteSizeCorrection.hpp</label>
        <link refid="FiniteSizeCorrection_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>extern/CLI11.hpp</label>
        <link refid="CLI11_8hpp"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>gte/TricubicInterpolation.hpp</label>
        <link refid="TricubicInterpolation_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>gte/TrilinearInterpolation.hpp</label>
        <link refid="TrilinearInterpolation_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>math/Complex.hpp</label>
        <link refid="Complex_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>math/ComplexTensor.hpp</label>
        <link refid="ComplexTensor_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>math/Float.hpp</label>
        <link refid="Float_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>math/Interpolation.hpp</label>
        <link refid="Interpolation_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>math/MathFunctions.hpp</label>
        <link refid="MathFunctions_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>math/Vector.hpp</label>
        <link refid="Vector_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>util/CTF.hpp</label>
        <link refid="CTF_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>util/Exception.hpp</label>
        <link refid="Exception_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>util/Log.hpp</label>
        <link refid="Log_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>util/MpiCommunicator.hpp</label>
        <link refid="MpiCommunicator_8hpp"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>util/SharedPointer.hpp</label>
        <link refid="SharedPointer_8hpp"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>util/SourceLocation.hpp</label>
        <link refid="SourceLocation_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>util/Time.hpp</label>
        <link refid="Time_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>algorithm</label>
      </node>
      <node id="12">
        <label>cmath</label>
      </node>
      <node id="19">
        <label>complex</label>
      </node>
      <node id="8">
        <label>cstdint</label>
      </node>
      <node id="23">
        <label>ctf.hpp</label>
      </node>
      <node id="7">
        <label>ctime</label>
      </node>
      <node id="51">
        <label>exception</label>
      </node>
      <node id="16">
        <label>fstream</label>
      </node>
      <node id="40">
        <label>functional</label>
      </node>
      <node id="10">
        <label>iomanip</label>
      </node>
      <node id="14">
        <label>iostream</label>
      </node>
      <node id="48">
        <label>iterator</label>
      </node>
      <node id="50">
        <label>limits</label>
      </node>
      <node id="44">
        <label>locale</label>
      </node>
      <node id="20">
        <label>map</label>
      </node>
      <node id="54">
        <label>math.h</label>
      </node>
      <node id="36">
        <label>memory</label>
      </node>
      <node id="34">
        <label>mpi.h</label>
      </node>
      <node id="41">
        <label>numeric</label>
      </node>
      <node id="9">
        <label>ostream</label>
      </node>
      <node id="46">
        <label>set</label>
      </node>
      <node id="11">
        <label>sstream</label>
      </node>
      <node id="49">
        <label>stdexcept</label>
      </node>
      <node id="15">
        <label>streambuf</label>
      </node>
      <node id="13">
        <label>string</label>
      </node>
      <node id="52">
        <label>sys/stat.h</label>
      </node>
      <node id="53">
        <label>sys/types.h</label>
      </node>
      <node id="42">
        <label>tuple</label>
      </node>
      <node id="47">
        <label>type_traits</label>
      </node>
      <node id="43">
        <label>utility</label>
      </node>
      <node id="21">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classFiniteSizeCorrection_1_1Momentum" prot="public">FiniteSizeCorrection::Momentum</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="FiniteSizeCorrection_8cxx_1a525335710b53cb064ca56b936120431e" prot="public" static="no">
        <name>_USE_MATH_DEFINES</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/sisi4s/sisi4s/src/algorithms/FiniteSizeCorrection.cxx" line="19" column="9" bodyfile="/home/runner/work/sisi4s/sisi4s/src/algorithms/FiniteSizeCorrection.cxx" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="FiniteSizeCorrection_8hpp" kindref="compound">algorithms/FiniteSizeCorrection.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Complex_8hpp" kindref="compound">math/Complex.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ComplexTensor_8hpp" kindref="compound">math/ComplexTensor.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="DryTensor_8hpp" kindref="compound">DryTensor.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="MathFunctions_8hpp" kindref="compound">math/MathFunctions.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Vector_8hpp" kindref="compound">math/Vector.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Interpolation_8hpp" kindref="compound">math/Interpolation.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="TricubicInterpolation_8hpp" kindref="compound">gte/TricubicInterpolation.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="TrilinearInterpolation_8hpp" kindref="compound">gte/TrilinearInterpolation.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="MpiCommunicator_8hpp" kindref="compound">util/MpiCommunicator.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Log_8hpp" kindref="compound">util/Log.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Exception_8hpp" kindref="compound">util/Exception.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="SharedPointer_8hpp" kindref="compound">util/SharedPointer.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Sisi4s_8hpp" kindref="compound">Sisi4s.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="CTF_8hpp" kindref="compound">util/CTF.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FIXME:<sp/>use<sp/>common<sp/>way<sp/>for<sp/>math<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="FiniteSizeCorrection_8cxx_1a525335710b53cb064ca56b936120431e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_USE_MATH_DEFINES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesisi4s" kindref="compound">sisi4s</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">CTF;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="Algorithm_8hpp_1a07e9ffa67ed21886a687b27719c949e1" kindref="member">ALGORITHM_REGISTRAR_DEFINITION</ref>(<ref refid="classsisi4s_1_1FiniteSizeCorrection" kindref="compound">FiniteSizeCorrection</ref>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="classsisi4s_1_1FiniteSizeCorrection_1a49d3758a730b919104d2d4c45f7d89a3" refkind="member"><highlight class="normal">FiniteSizeCorrection::FiniteSizeCorrection(</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>std::vector&lt;Argument&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;argumentList</highlight></codeline>
<codeline lineno="31"><highlight class="normal">):<sp/><ref refid="classsisi4s_1_1Algorithm" kindref="compound">Algorithm</ref>(argumentList)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="classsisi4s_1_1FiniteSizeCorrection_1a359868e0dc350ae8eb584d2fbf6b58b9" refkind="member"><highlight class="normal"><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a359868e0dc350ae8eb584d2fbf6b58b9" kindref="member">FiniteSizeCorrection::~FiniteSizeCorrection</ref>()<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="classsisi4s_1_1FiniteSizeCorrection_1a8a7b438545c815dc93309d16208128de" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a8a7b438545c815dc93309d16208128de" kindref="member">FiniteSizeCorrection::run</ref>()<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fReadFromFile(<ref refid="classsisi4s_1_1Algorithm_1a5db14be3b0d33bf80218a37223e27667" kindref="member">getIntegerArgument</ref>(</highlight><highlight class="stringliteral">&quot;fReadFromFile&quot;</highlight><highlight class="normal">,<sp/>0));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fReadFromFile<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,</highlight><highlight class="stringliteral">&quot;FiniteSize&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Reading<sp/>structure<sp/>factor<sp/>from<sp/>file&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a577d15a51e965510c8afcaedbf02202a" kindref="member">readFromFile</ref>();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1Data" kindref="compound">Data</ref><sp/>*Tabij(<ref refid="classsisi4s_1_1Algorithm_1a1e53277220d32a33e20846267c253652" kindref="member">getArgumentData</ref>(</highlight><highlight class="stringliteral">&quot;DoublesAmplitudes&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1TensorData" kindref="compound">TensorData&lt;double&gt;</ref><sp/>*realTabij(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="classsisi4s_1_1TensorData" kindref="compound">TensorData&lt;double&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Tabij));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(realTabij)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,</highlight><highlight class="stringliteral">&quot;FiniteSize&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Calculating<sp/>real<sp/>structure<sp/>factor&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a40817a0c8ab25b2ab9ac7586a00fc792" kindref="member">calculateRealStructureFactor</ref>();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,</highlight><highlight class="stringliteral">&quot;FiniteSize&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Calculating<sp/>complex<sp/>structure<sp/>factor&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a011bf1004b284365e04ac9bafe86618d" kindref="member">calculateComplexStructureFactor</ref>();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fFiniteSizeCorrection(<ref refid="classsisi4s_1_1Algorithm_1a5db14be3b0d33bf80218a37223e27667" kindref="member">getIntegerArgument</ref>(</highlight><highlight class="stringliteral">&quot;FiniteSize&quot;</highlight><highlight class="normal">,0));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fFiniteSizeCorrection<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,</highlight><highlight class="stringliteral">&quot;FiniteSize&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Interpolating<sp/>and<sp/>integrating&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a1263e86e1cfbd0547e5198c46c6eac51" kindref="member">interpolation3D</ref>();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,</highlight><highlight class="stringliteral">&quot;FiniteSize&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Caclulating<sp/>finite<sp/>size<sp/>correction&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a22f55b903c4a3f38bd3e395bf51f7aa3" kindref="member">calculateFiniteSizeCorrection</ref>();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="classsisi4s_1_1FiniteSizeCorrection_1ac7e57c7cbc1fa709a2e23b177676f566" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac7e57c7cbc1fa709a2e23b177676f566" kindref="member">FiniteSizeCorrection::dryRun</ref>()<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fReadFromFile(<ref refid="classsisi4s_1_1Algorithm_1a5db14be3b0d33bf80218a37223e27667" kindref="member">getIntegerArgument</ref>(</highlight><highlight class="stringliteral">&quot;fReadFromFile&quot;</highlight><highlight class="normal">,<sp/>0));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fReadFromFile<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,</highlight><highlight class="stringliteral">&quot;FiniteSize&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Reading<sp/>structure<sp/>factor<sp/>from<sp/>file&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,</highlight><highlight class="stringliteral">&quot;FiniteSize&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Calculating<sp/>structure<sp/>factor&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ab03fab436020be68b42a07d07b0eb3ca" kindref="member">dryCalculateStructureFactor</ref>();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//constructFibonacciGrid();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,</highlight><highlight class="stringliteral">&quot;FiniteSize&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Interpolating<sp/>and<sp/>integrating&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a200f4c2590c7f573670d778ce6d4dc71" kindref="member">dryInterpolation3D</ref>();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,</highlight><highlight class="stringliteral">&quot;FiniteSize&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Caclulating<sp/>finite<sp/>size<sp/>correction&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a100128dd8d514f54d7897e858ac0b8cf" kindref="member">dryCalculateFiniteSizeCorrection</ref>();</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="classFiniteSizeCorrection_1_1Momentum" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classFiniteSizeCorrection_1_1Momentum" kindref="compound">FiniteSizeCorrection::Momentum</ref><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="81" refid="classFiniteSizeCorrection_1_1Momentum_1a30aaac3c853a744a6c561799b47bedbb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1Vector" kindref="compound">sisi4s::Vector&lt;&gt;</ref><sp/><ref refid="classFiniteSizeCorrection_1_1Momentum_1a30aaac3c853a744a6c561799b47bedbb" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="82" refid="classFiniteSizeCorrection_1_1Momentum_1ac63d8096de034b3c0b33ca15eca8e4f6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classFiniteSizeCorrection_1_1Momentum_1ac63d8096de034b3c0b33ca15eca8e4f6" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="83" refid="classFiniteSizeCorrection_1_1Momentum_1ae18396efa4021eacd358997c9221f19a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classFiniteSizeCorrection_1_1Momentum_1ae18396efa4021eacd358997c9221f19a" kindref="member">l</ref>;</highlight></codeline>
<codeline lineno="84" refid="classFiniteSizeCorrection_1_1Momentum_1a4c5a9a87b0983f09b1c8557f225ef6fa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classFiniteSizeCorrection_1_1Momentum_1a4c5a9a87b0983f09b1c8557f225ef6fa" kindref="member">vg</ref>;</highlight></codeline>
<codeline lineno="85" refid="classFiniteSizeCorrection_1_1Momentum_1a14dad5fe2c8c7577d80e76e3677933f2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classFiniteSizeCorrection_1_1Momentum_1a14dad5fe2c8c7577d80e76e3677933f2" kindref="member">Momentum</ref>():<sp/><ref refid="classFiniteSizeCorrection_1_1Momentum_1ac63d8096de034b3c0b33ca15eca8e4f6" kindref="member">s</ref>(0.0),<sp/><ref refid="classFiniteSizeCorrection_1_1Momentum_1ae18396efa4021eacd358997c9221f19a" kindref="member">l</ref>(0.0),<sp/><ref refid="classFiniteSizeCorrection_1_1Momentum_1a4c5a9a87b0983f09b1c8557f225ef6fa" kindref="member">vg</ref>(0.)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87" refid="classFiniteSizeCorrection_1_1Momentum_1a7f847000e5a64fd3c5723ecf450c3511" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classFiniteSizeCorrection_1_1Momentum_1a7f847000e5a64fd3c5723ecf450c3511" kindref="member">Momentum</ref>(</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1Vector" kindref="compound">sisi4s::Vector&lt;&gt;</ref><sp/>v_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s_=0.,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vg_=0.</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>):<sp/><ref refid="classFiniteSizeCorrection_1_1Momentum_1a30aaac3c853a744a6c561799b47bedbb" kindref="member">v</ref>(v_),<sp/><ref refid="classFiniteSizeCorrection_1_1Momentum_1ac63d8096de034b3c0b33ca15eca8e4f6" kindref="member">s</ref>(s_),<sp/><ref refid="classFiniteSizeCorrection_1_1Momentum_1ae18396efa4021eacd358997c9221f19a" kindref="member">l</ref>(v_.length()),<sp/><ref refid="classFiniteSizeCorrection_1_1Momentum_1a4c5a9a87b0983f09b1c8557f225ef6fa" kindref="member">vg</ref>(vg_)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="91" refid="classFiniteSizeCorrection_1_1Momentum_1a37b30471d767f05cb492e1033fba0281" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classFiniteSizeCorrection_1_1Momentum_1a37b30471d767f05cb492e1033fba0281" kindref="member">locate</ref>(<ref refid="classFiniteSizeCorrection_1_1Momentum" kindref="compound">Momentum</ref><sp/>*m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1Vector" kindref="compound">sisi4s::Vector&lt;&gt;</ref><sp/>u(<ref refid="classFiniteSizeCorrection_1_1Momentum_1a30aaac3c853a744a6c561799b47bedbb" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(v[3]<sp/>&lt;<sp/>0.)<sp/>u=<sp/>v*(-1.);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d(0);<sp/>d<sp/>&lt;<sp/>n;<sp/>++d)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u.<ref refid="classsisi4s_1_1Vector_1a870d78ed4c66ea4465255c6ad9d3ff7e" kindref="member">approximately</ref>(m[d].<ref refid="classFiniteSizeCorrection_1_1Momentum_1a30aaac3c853a744a6c561799b47bedbb" kindref="member">v</ref>))<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m[d].<ref refid="classFiniteSizeCorrection_1_1Momentum_1ac63d8096de034b3c0b33ca15eca8e4f6" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="classFiniteSizeCorrection_1_1Momentum_1a0678f2c906a19f42b976a9f69f29b89e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classFiniteSizeCorrection_1_1Momentum_1a0678f2c906a19f42b976a9f69f29b89e" kindref="member">sortByLength</ref><sp/>(<ref refid="classFiniteSizeCorrection_1_1Momentum" kindref="compound">Momentum</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;n,<sp/><ref refid="classFiniteSizeCorrection_1_1Momentum" kindref="compound">Momentum</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;m)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n.<ref refid="classFiniteSizeCorrection_1_1Momentum_1ae18396efa4021eacd358997c9221f19a" kindref="member">l</ref><sp/>&lt;<sp/>m.<ref refid="classFiniteSizeCorrection_1_1Momentum_1ae18396efa4021eacd358997c9221f19a" kindref="member">l</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="105" refid="classFiniteSizeCorrection_1_1Momentum_1a394a1f65d3b41e8d0f3955cf86d2a76f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classFiniteSizeCorrection_1_1Momentum_1a394a1f65d3b41e8d0f3955cf86d2a76f" kindref="member">sortByVector</ref><sp/>(<ref refid="classFiniteSizeCorrection_1_1Momentum" kindref="compound">Momentum</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;n,<sp/><ref refid="classFiniteSizeCorrection_1_1Momentum" kindref="compound">Momentum</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;m)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n.<ref refid="classFiniteSizeCorrection_1_1Momentum_1a30aaac3c853a744a6c561799b47bedbb" kindref="member">v</ref><sp/>&lt;<sp/>m.<ref refid="classFiniteSizeCorrection_1_1Momentum_1a30aaac3c853a744a6c561799b47bedbb" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal">};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="classsisi4s_1_1FiniteSizeCorrection_1a577d15a51e965510c8afcaedbf02202a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a577d15a51e965510c8afcaedbf02202a" kindref="member">FiniteSizeCorrection::readFromFile</ref>(){</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,</highlight><highlight class="stringliteral">&quot;readFromFile&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;reading<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>*realVG(getTensorArgument&lt;&gt;(</highlight><highlight class="stringliteral">&quot;CoulombKernel&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>*realSG(getTensorArgument&lt;&gt;(</highlight><highlight class="stringliteral">&quot;StructureFactor&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(1,</highlight><highlight class="stringliteral">&quot;readFromFile&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;success\n<sp/>Loading<sp/>into<sp/>Vectors<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>=realVG-&gt;lens[0];</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a44840efaf12698bdbf9c22c648564656" kindref="member">VofG</ref>.resize(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>realVG-&gt;read_all(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1a44840efaf12698bdbf9c22c648564656" kindref="member">VofG</ref>.data());</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(1,</highlight><highlight class="stringliteral">&quot;readFromFile&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;VofG<sp/>Finished&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a2d43f73135f2e57a449fd065a6a6c960" kindref="member">structureFactors</ref>.resize(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>realSG-&gt;read_all(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1a2d43f73135f2e57a449fd065a6a6c960" kindref="member">structureFactors</ref>.data());</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(1,</highlight><highlight class="stringliteral">&quot;readFromFile&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Finished&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="classsisi4s_1_1FiniteSizeCorrection_1a40817a0c8ab25b2ab9ac7586a00fc792" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a40817a0c8ab25b2ab9ac7586a00fc792" kindref="member">FiniteSizeCorrection::calculateRealStructureFactor</ref>()<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>Particle/Hole<sp/>Eigenenergies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>*epsi(getTensorArgument&lt;&gt;(</highlight><highlight class="stringliteral">&quot;HoleEigenEnergies&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>*epsa(getTensorArgument&lt;&gt;(</highlight><highlight class="stringliteral">&quot;ParticleEigenEnergies&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>No(epsi-&gt;lens[0]);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nv(epsa-&gt;lens[0]);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Np(No+Nv);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>orbitalPairStart(<ref refid="classsisi4s_1_1Algorithm_1a5db14be3b0d33bf80218a37223e27667" kindref="member">getIntegerArgument</ref>(</highlight><highlight class="stringliteral">&quot;orbitalPairStart&quot;</highlight><highlight class="normal">,-1));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>orbitalPairEnd(<ref refid="classsisi4s_1_1Algorithm_1a5db14be3b0d33bf80218a37223e27667" kindref="member">getIntegerArgument</ref>(</highlight><highlight class="stringliteral">&quot;orbitalPairEnd&quot;</highlight><highlight class="normal">,-1));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(orbitalPairStart<sp/>&lt;<sp/>0<sp/>||<sp/>orbitalPairStart<sp/>&gt;=<sp/>orbitalPairEnd){</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>orbitalPairStart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(orbitalPairEnd<sp/>&gt;<sp/>No<sp/>||<sp/>orbitalPairEnd<sp/>&lt;=<sp/>orbitalPairStart){</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>orbitalPairEnd<sp/>=<sp/>No;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numberOrbitalPairs(orbitalPairEnd<sp/>-<sp/>orbitalPairStart);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>orbitalPairs(numberOrbitalPairs<sp/>!=<sp/>No);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>orbitalPairs<sp/>){</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,</highlight><highlight class="stringliteral">&quot;Orbital<sp/>Pair<sp/>Analysis&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Treating<sp/>only<sp/>pairs<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>orbitalPairStart</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>orbitalPairEnd<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><ref refid="SharedPointer_8hpp_1a741e091aff51aed5f16b309962085404" kindref="member">PTR</ref>(<ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref>)<sp/>GammaGai;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aStart(Np-Nv),<sp/>aEnd(Np);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iStart(0),<sp/>iEnd(No);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(orbitalPairs){</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>iStart<sp/>=<sp/>orbitalPairStart;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>iEnd<sp/>=<sp/>orbitalPairEnd;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>Coulomb<sp/>vertex<sp/>GammaGqr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" kindref="member">isArgumentGiven</ref>(</highlight><highlight class="stringliteral">&quot;CoulombVertex&quot;</highlight><highlight class="normal">)){</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref><sp/>*GammaFqr(getTensorArgument&lt;complex&gt;(</highlight><highlight class="stringliteral">&quot;CoulombVertex&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>Particle<sp/>Hole<sp/>Coulomb<sp/>Vertex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NF(GammaFqr-&gt;lens[0]);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FaiStart[]<sp/>=<sp/>{0,<sp/>aStart,iStart};</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FaiEnd[]<sp/><sp/><sp/>=<sp/>{NF,aEnd,<sp/><sp/>iEnd};</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref><sp/>GammaFai(GammaFqr-&gt;slice(FaiStart,<sp/>FaiEnd));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" kindref="member">isArgumentGiven</ref>(</highlight><highlight class="stringliteral">&quot;CoulombVertexSingularVectors&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref><sp/>*UGF(</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getTensorArgument&lt;complex&gt;(</highlight><highlight class="stringliteral">&quot;CoulombVertexSingularVectors&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lens[]=<sp/>{(int)UGF-&gt;lens[0],<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)Nv,<sp/>(int)No};</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GammaGai<sp/>=<sp/><ref refid="SharedPointer_8hpp_1a106f61c342cfd013eb570c37328070ae" kindref="member">NEW</ref>(<ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref>,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/>lens,<sp/>GammaFqr-&gt;sym,<sp/>*GammaFqr-&gt;wrld,<sp/></highlight><highlight class="stringliteral">&quot;GammaGqr&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*GammaGai)[</highlight><highlight class="stringliteral">&quot;Gai&quot;</highlight><highlight class="normal">]<sp/>=<sp/>GammaFai[</highlight><highlight class="stringliteral">&quot;Fai&quot;</highlight><highlight class="normal">]<sp/>*<sp/>(*UGF)[</highlight><highlight class="stringliteral">&quot;GF&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lens[]=<sp/>{(int)NF,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)Nv,<sp/>(int)No};</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(orbitalPairs){</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lens[0]<sp/>=<sp/>NF;<sp/>lens[1]<sp/>=<sp/>Nv;<sp/>lens[2]<sp/>=<sp/>numberOrbitalPairs;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GammaGai<sp/>=<sp/><ref refid="SharedPointer_8hpp_1a106f61c342cfd013eb570c37328070ae" kindref="member">NEW</ref>(<ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref>,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/>lens,<sp/>GammaFqr-&gt;sym,<sp/>*GammaFqr-&gt;wrld,<sp/></highlight><highlight class="stringliteral">&quot;GammaGqr&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*GammaGai)<sp/>=<sp/>GammaFai;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" kindref="member">isArgumentGiven</ref>(</highlight><highlight class="stringliteral">&quot;ParticleHoleCoulombVertex&quot;</highlight><highlight class="normal">)){</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(orbitalPairs){</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref><sp/>*GGai(getTensorArgument&lt;complex&gt;(</highlight><highlight class="stringliteral">&quot;ParticleHoleCoulombVertex&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NF(GGai-&gt;lens[0]);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GGaiStart[]<sp/>=<sp/>{0,<sp/>aStart,iStart};</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GGaiEnd[]<sp/><sp/><sp/>=<sp/>{NF,aEnd,<sp/>iEnd<sp/>};</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sGGaiStart[]<sp/>=<sp/>{0,<sp/>aStart,<sp/>0};</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sGGaiEnd[]<sp/>=<sp/>{NF,aEnd,numberOrbitalPairs};</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lens[]<sp/>=<sp/>{NF,Nv,numberOrbitalPairs};</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GammaGai<sp/>=<sp/><ref refid="SharedPointer_8hpp_1a106f61c342cfd013eb570c37328070ae" kindref="member">NEW</ref>(<ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref>,3,lens,<sp/>GGai-&gt;sym,<sp/>*GGai-&gt;wrld,<sp/></highlight><highlight class="stringliteral">&quot;GammaGai&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GammaGai-&gt;slice(sGGaiStart,sGGaiEnd,0.0,*GGai,GGaiStart,GGaiEnd,1.0);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GammaGai<sp/>=<sp/><ref refid="SharedPointer_8hpp_1a106f61c342cfd013eb570c37328070ae" kindref="member">NEW</ref>(<ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref>,getTensorArgument&lt;complex&gt;(</highlight><highlight class="stringliteral">&quot;ParticleHoleCoulombVertex&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="Exception_8hpp_1aa49c727f91093a79c46ee6ecd83548bb" kindref="member">EXCEPTION</ref>(</highlight><highlight class="stringliteral">&quot;Need<sp/>Appropriate<sp/>Coulomb<sp/>Vertex&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>*realInfVG(getTensorArgument&lt;&gt;(</highlight><highlight class="stringliteral">&quot;CoulombKernel&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>*realVG(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>*realInfVG));</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Define<sp/>take<sp/>out<sp/>inf<sp/>funciton</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TakeOutInf<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>operator<sp/>()(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x){</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::isinf(x)<sp/>?<sp/>0.0<sp/>:<sp/>x;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Take<sp/>out<sp/>the<sp/>inf<sp/>from<sp/>realVG.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>TakeOutInf<sp/>takeOutInf;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>Univar_Function&lt;&gt;<sp/>fTakeOutInf(takeOutInf);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>realVG-&gt;sum(1.0,<sp/>*realInfVG,<sp/></highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">,<sp/>0.0,<sp/></highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">,<sp/>fTakeOutInf);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>realVG-&gt;set_name(</highlight><highlight class="stringliteral">&quot;realVG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref><sp/>VG(</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>1,<sp/>realVG-&gt;lens,<sp/>realVG-&gt;sym,<sp/>*realVG-&gt;wrld,<sp/></highlight><highlight class="stringliteral">&quot;VG&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1a20c6b0ad3767206173edfb7bf525e5a7" kindref="member">toComplexTensor</ref>(*realVG,<sp/>VG);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>realInvSqrtVG(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>*realVG);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref><sp/>invSqrtVG(</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>1,<sp/>realInvSqrtVG.lens,<sp/>realInvSqrtVG.sym,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*realInvSqrtVG.wrld,<sp/></highlight><highlight class="stringliteral">&quot;invSqrtVG&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Starting<sp/>a<sp/>new<sp/>space<sp/>whose<sp/>memory<sp/>will<sp/>be<sp/>erased<sp/>after<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Define<sp/>operation<sp/>inverse<sp/>square<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">InvSqrt<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>operator<sp/>()(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x){</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1a40947d88c4989cacff153a78af67f686" kindref="member">std::sqrt</ref>(1.0<sp/>/<sp/>x);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>inverted<sp/>square<sp/>root<sp/>of<sp/>VG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>InvSqrt<sp/>invSqrt;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>Univar_Function&lt;&gt;<sp/>fInvSqrt(invSqrt);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>realInvSqrtVG.sum(1.0,<sp/>*realInfVG,<sp/></highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">,<sp/>0.0,<sp/></highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">,<sp/>fInvSqrt);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1a20c6b0ad3767206173edfb7bf525e5a7" kindref="member">toComplexTensor</ref>(realInvSqrtVG,<sp/>invSqrtVG);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Define<sp/>CGai</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref><sp/>CGai(*GammaGai);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>CGai[</highlight><highlight class="stringliteral">&quot;Gai&quot;</highlight><highlight class="normal">]<sp/>*=<sp/>invSqrtVG[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Conjugate<sp/>of<sp/>CGai</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref><sp/>conjCGai(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CGai);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>Univar_Function&lt;complex&gt;<sp/>fConj(conj&lt;complex&gt;);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>conjCGai.sum(1.0,<sp/>CGai,<sp/></highlight><highlight class="stringliteral">&quot;Gai&quot;</highlight><highlight class="normal">,<sp/>0.0,<sp/></highlight><highlight class="stringliteral">&quot;Gai&quot;</highlight><highlight class="normal">,<sp/>fConj);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Split<sp/>CGai<sp/>and<sp/>conjCGai<sp/>into<sp/>real<sp/>and<sp/>imag<sp/>parts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>realCGai(3,<sp/>GammaGai-&gt;lens,<sp/>GammaGai-&gt;sym,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*GammaGai-&gt;wrld,<sp/></highlight><highlight class="stringliteral">&quot;RealCGai&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>imagCGai(3,<sp/>GammaGai-&gt;lens,<sp/>GammaGai-&gt;sym,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*GammaGai-&gt;wrld,<sp/></highlight><highlight class="stringliteral">&quot;ImagCGai&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1a77d868359a18a73cfe184f25fad2f59b" kindref="member">fromComplexTensor</ref>(CGai,<sp/>realCGai,<sp/>imagCGai);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>realConjCGai(3,<sp/>GammaGai-&gt;lens,<sp/>GammaGai-&gt;sym,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*GammaGai-&gt;wrld,<sp/></highlight><highlight class="stringliteral">&quot;RealConjCGai&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>imagConjCGai(3,<sp/>GammaGai-&gt;lens,<sp/>GammaGai-&gt;sym,</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*GammaGai-&gt;wrld,<sp/></highlight><highlight class="stringliteral">&quot;ImagConjCGai&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1a77d868359a18a73cfe184f25fad2f59b" kindref="member">fromComplexTensor</ref>(conjCGai,<sp/>realConjCGai,<sp/>imagConjCGai);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>*realTabij;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(orbitalPairs){</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>*Tabij(<ref refid="classsisi4s_1_1Algorithm_1a338a44c8fd4d6be3b32a6d5e71dfe180" kindref="member">getTensorArgument</ref>(</highlight><highlight class="stringliteral">&quot;DoublesAmplitudes&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" kindref="member">isArgumentGiven</ref>(</highlight><highlight class="stringliteral">&quot;SinglesAmplitudes&quot;</highlight><highlight class="normal">)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Get<sp/>Tai</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>*realTai(<ref refid="classsisi4s_1_1Algorithm_1a338a44c8fd4d6be3b32a6d5e71dfe180" kindref="member">getTensorArgument</ref>(</highlight><highlight class="stringliteral">&quot;SinglesAmplitudes&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*Tabij)[</highlight><highlight class="stringliteral">&quot;abij&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>(*realTai)[</highlight><highlight class="stringliteral">&quot;ai&quot;</highlight><highlight class="normal">]<sp/>*<sp/>(*realTai)[</highlight><highlight class="stringliteral">&quot;bj&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aiSliceStart[]<sp/>=<sp/>{<sp/>0,<sp/><sp/>0,<sp/>orbitalPairStart,<sp/>orbitalPairStart};</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aiSliceEnd[]<sp/><sp/><sp/>=<sp/>{Nv,<sp/>Nv,<sp/>orbitalPairEnd,<sp/><sp/><sp/>orbitalPairEnd<sp/><sp/>};</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lens[]<sp/>=<sp/>{Nv,<sp/>Nv,<sp/>numberOrbitalPairs,<sp/>numberOrbitalPairs};</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>realTabij<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref>(3,<sp/>lens,<sp/>Tabij-&gt;sym,<sp/>*Tabij-&gt;wrld,<sp/></highlight><highlight class="stringliteral">&quot;realTabij&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>(*realTabij)<sp/>=<sp/>Tabij-&gt;slice(aiSliceStart,aiSliceEnd);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Get<sp/>Tabij</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>realTabij<sp/>=<sp/><ref refid="classsisi4s_1_1Algorithm_1a338a44c8fd4d6be3b32a6d5e71dfe180" kindref="member">getTensorArgument</ref>(</highlight><highlight class="stringliteral">&quot;DoublesAmplitudes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" kindref="member">isArgumentGiven</ref>(</highlight><highlight class="stringliteral">&quot;SinglesAmplitudes&quot;</highlight><highlight class="normal">)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Get<sp/>Tai</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>*realTai(<ref refid="classsisi4s_1_1Algorithm_1a338a44c8fd4d6be3b32a6d5e71dfe180" kindref="member">getTensorArgument</ref>(</highlight><highlight class="stringliteral">&quot;SinglesAmplitudes&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*realTabij)[</highlight><highlight class="stringliteral">&quot;abij&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>(*realTai)[</highlight><highlight class="stringliteral">&quot;ai&quot;</highlight><highlight class="normal">]<sp/>*<sp/>(*realTai)[</highlight><highlight class="stringliteral">&quot;bj&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/></highlight><highlight class="comment">//Construct<sp/>SG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref><sp/>=<sp/>GammaGai-&gt;lens[0];</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>CTF::Vector&lt;&gt;<sp/>*realSG(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CTF::Vector&lt;&gt;(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>,<sp/>*GammaGai-&gt;wrld,<sp/></highlight><highlight class="stringliteral">&quot;realSG&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>CTF::Vector&lt;&gt;<sp/>*realSGd(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CTF::Vector&lt;&gt;(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>,<sp/>*GammaGai-&gt;wrld,<sp/></highlight><highlight class="stringliteral">&quot;realSGd&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>CTF::Vector&lt;&gt;<sp/>*realSGx(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CTF::Vector&lt;&gt;(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>,<sp/>*GammaGai-&gt;wrld,<sp/></highlight><highlight class="stringliteral">&quot;realSGx&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>(*realSGd)[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">]<sp/><sp/>=<sp/>(<sp/>1.0)<sp/>*<sp/>realConjCGai[</highlight><highlight class="stringliteral">&quot;Gai&quot;</highlight><highlight class="normal">]<sp/>*<sp/>realCGai[</highlight><highlight class="stringliteral">&quot;Gbj&quot;</highlight><highlight class="normal">]<sp/>*<sp/>(*realTabij)[</highlight><highlight class="stringliteral">&quot;abij&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>(*realSGd)[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>(-1.0)<sp/>*<sp/>imagConjCGai[</highlight><highlight class="stringliteral">&quot;Gai&quot;</highlight><highlight class="normal">]<sp/>*<sp/>imagCGai[</highlight><highlight class="stringliteral">&quot;Gbj&quot;</highlight><highlight class="normal">]<sp/>*<sp/>(*realTabij)[</highlight><highlight class="stringliteral">&quot;abij&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>(*realSGx)[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>(<sp/>1.0)<sp/>*<sp/>realConjCGai[</highlight><highlight class="stringliteral">&quot;Gaj&quot;</highlight><highlight class="normal">]<sp/>*<sp/>realCGai[</highlight><highlight class="stringliteral">&quot;Gbi&quot;</highlight><highlight class="normal">]<sp/>*<sp/>(*realTabij)[</highlight><highlight class="stringliteral">&quot;abij&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>(*realSGx)[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>(-1.0)<sp/>*<sp/>imagConjCGai[</highlight><highlight class="stringliteral">&quot;Gaj&quot;</highlight><highlight class="normal">]<sp/>*<sp/>imagCGai[</highlight><highlight class="stringliteral">&quot;Gbi&quot;</highlight><highlight class="normal">]<sp/>*<sp/>(*realTabij)[</highlight><highlight class="stringliteral">&quot;abij&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>(*realSG)[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">]<sp/>=<sp/>(2.0)<sp/>*<sp/>(*realSGd)[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">]<sp/>+<sp/>(-1.0)<sp/>*<sp/>(*realSGx)[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>allocatedTensorArgument&lt;&gt;(</highlight><highlight class="stringliteral">&quot;StructureFactor&quot;</highlight><highlight class="normal">,<sp/>realSG);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" kindref="member">isArgumentGiven</ref>(</highlight><highlight class="stringliteral">&quot;StructureFactors&quot;</highlight><highlight class="normal">)){</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>CTF::Vector&lt;&gt;<sp/>*realSGs(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CTF::Vector&lt;&gt;(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>,<sp/>*GammaGai-&gt;wrld,<sp/></highlight><highlight class="stringliteral">&quot;realSGs&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>(*realSGs)[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">]<sp/>=<sp/>(0.5)<sp/>*<sp/>(*realSGd)[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">]<sp/>+<sp/>(0.5)<sp/>*<sp/>(*realSGx)[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>allocatedTensorArgument&lt;&gt;(</highlight><highlight class="stringliteral">&quot;StructureFactors&quot;</highlight><highlight class="normal">,realSGs);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>Scalar<sp/>&lt;&gt;<sp/>senergy(*<ref refid="classsisi4s_1_1Sisi4s_1a9c828aff8cbaa346d4669ff89dfc6f5c" kindref="member">Sisi4s::world</ref>);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>senergy[</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>=<sp/>(*realVG)[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">]<sp/>*<sp/>(*realSGs)[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_senergy(senergy.get_val());</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,</highlight><highlight class="stringliteral">&quot;Singlet<sp/>energy:&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>_senergy<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" kindref="member">isArgumentGiven</ref>(</highlight><highlight class="stringliteral">&quot;StructureFactort&quot;</highlight><highlight class="normal">)){</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>CTF::Vector&lt;&gt;<sp/>*realSGt(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CTF::Vector&lt;&gt;(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>,<sp/>*GammaGai-&gt;wrld,<sp/></highlight><highlight class="stringliteral">&quot;realSGt&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>(*realSGt)[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">]<sp/>=<sp/>(1.5)<sp/>*<sp/>(*realSGd)[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">]<sp/>+<sp/>(-1.5)<sp/>*<sp/>(*realSGx)[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>allocatedTensorArgument&lt;&gt;(</highlight><highlight class="stringliteral">&quot;StructureFactort&quot;</highlight><highlight class="normal">,realSGt);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>Scalar<sp/>&lt;&gt;<sp/>tenergy(*<ref refid="classsisi4s_1_1Sisi4s_1a9c828aff8cbaa346d4669ff89dfc6f5c" kindref="member">Sisi4s::world</ref>);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>tenergy[</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>=<sp/>(*realVG)[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">]<sp/>*<sp/>(*realSGt)[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_tenergy(tenergy.get_val());</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,</highlight><highlight class="stringliteral">&quot;Triplet<sp/>energy:&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>_tenergy<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a44840efaf12698bdbf9c22c648564656" kindref="member">VofG</ref>.resize(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>realVG-&gt;read_all(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1a44840efaf12698bdbf9c22c648564656" kindref="member">VofG</ref>.data());</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a2d43f73135f2e57a449fd065a6a6c960" kindref="member">structureFactors</ref>.resize(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>realSG-&gt;read_all(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1a2d43f73135f2e57a449fd065a6a6c960" kindref="member">structureFactors</ref>.data());</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="classsisi4s_1_1FiniteSizeCorrection_1a011bf1004b284365e04ac9bafe86618d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a011bf1004b284365e04ac9bafe86618d" kindref="member">FiniteSizeCorrection::calculateComplexStructureFactor</ref>()<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>*realInfVG(getTensorArgument&lt;&gt;(</highlight><highlight class="stringliteral">&quot;CoulombKernel&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>*realVG(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>*realInfVG));</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>take<sp/>out<sp/>inf<sp/>funciton</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TakeOutInf<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>operator<sp/>()(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x){</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::isinf(x)<sp/>?<sp/>0.0<sp/>:<sp/>x;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Take<sp/>out<sp/>the<sp/>inf<sp/>from<sp/>realVG.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>TakeOutInf<sp/>takeOutInf;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>Univar_Function&lt;&gt;<sp/>fTakeOutInf(takeOutInf);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>realVG-&gt;sum(1.0,<sp/>*realInfVG,<sp/></highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">,<sp/>0.0,<sp/></highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">,<sp/>fTakeOutInf);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>realVG-&gt;set_name(</highlight><highlight class="stringliteral">&quot;realVG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref><sp/>VG(</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>1,<sp/>realVG-&gt;lens,<sp/>realVG-&gt;sym,<sp/>*realVG-&gt;wrld,<sp/></highlight><highlight class="stringliteral">&quot;VG&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1a20c6b0ad3767206173edfb7bf525e5a7" kindref="member">toComplexTensor</ref>(*realVG,<sp/>VG);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>realInvSqrtVG(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>*realVG);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref><sp/>invSqrtVG(</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>1,<sp/>realInvSqrtVG.lens,<sp/>realInvSqrtVG.sym,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*realInvSqrtVG.wrld,<sp/></highlight><highlight class="stringliteral">&quot;invSqrtVG&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Starting<sp/>a<sp/>new<sp/>space<sp/>whose<sp/>memory<sp/>will<sp/>be<sp/>erased<sp/>after<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Define<sp/>operation<sp/>inverse<sp/>square<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">InvSqrt<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>operator<sp/>()(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x){</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1a40947d88c4989cacff153a78af67f686" kindref="member">std::sqrt</ref>(1.0<sp/>/<sp/>x);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>inverted<sp/>square<sp/>root<sp/>of<sp/>VG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>InvSqrt<sp/>invSqrt;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>Univar_Function&lt;&gt;<sp/>fInvSqrt(invSqrt);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>realInvSqrtVG.sum(1.0,<sp/>*realInfVG,<sp/></highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">,<sp/>0.0,<sp/></highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">,<sp/>fInvSqrt);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1a20c6b0ad3767206173edfb7bf525e5a7" kindref="member">toComplexTensor</ref>(realInvSqrtVG,<sp/>invSqrtVG);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>Coulomb<sp/>vertex<sp/>GammaGqr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref><sp/>*GammaFqr(<sp/>getTensorArgument&lt;complex&gt;(</highlight><highlight class="stringliteral">&quot;CoulombVertex&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref><sp/>*GammaGqr;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>Particle/Hole<sp/>Eigenenergies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>*epsi(getTensorArgument&lt;&gt;(</highlight><highlight class="stringliteral">&quot;HoleEigenEnergies&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>*epsa(getTensorArgument&lt;&gt;(</highlight><highlight class="stringliteral">&quot;ParticleEigenEnergies&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" kindref="member">isArgumentGiven</ref>(</highlight><highlight class="stringliteral">&quot;CoulombVertexSingularVectors&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref><sp/>*UGF(</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getTensorArgument&lt;complex&gt;(</highlight><highlight class="stringliteral">&quot;CoulombVertexSingularVectors&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lens[]=<sp/>{(int)UGF-&gt;lens[0],</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)GammaFqr-&gt;lens[1],</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int)GammaFqr-&gt;lens[2]};</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>GammaGqr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref>(</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/>lens,<sp/>GammaFqr-&gt;sym,<sp/>*GammaFqr-&gt;wrld,<sp/></highlight><highlight class="stringliteral">&quot;GammaGqr&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>(*GammaGqr)[</highlight><highlight class="stringliteral">&quot;Gqr&quot;</highlight><highlight class="normal">]<sp/>=<sp/>(*GammaFqr)[</highlight><highlight class="stringliteral">&quot;Fqr&quot;</highlight><highlight class="normal">]<sp/>*<sp/>(*UGF)[</highlight><highlight class="stringliteral">&quot;GF&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lens[]=<sp/>{(int)GammaFqr-&gt;lens[0],</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)GammaFqr-&gt;lens[1],</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int)GammaFqr-&gt;lens[2]};</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>GammaGqr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref>(</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/>lens,<sp/>GammaFqr-&gt;sym,<sp/>*GammaFqr-&gt;wrld,<sp/></highlight><highlight class="stringliteral">&quot;GammaGqr&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>(*GammaGqr)<sp/>=<sp/>(*GammaFqr);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>No,Nv,NG,Np</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>=GammaGqr-&gt;lens[0];</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>No(epsi-&gt;lens[0]);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nv(epsa-&gt;lens[0]);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Np(GammaGqr-&gt;lens[1]);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aStart(Np-Nv),<sp/>aEnd(Np);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iStart(0),<sp/>iEnd(No);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GiaStart[]<sp/>=<sp/>{0,<sp/>iStart,aStart};</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GiaEnd[]<sp/><sp/><sp/>=<sp/>{<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>,iEnd,<sp/><sp/>aEnd};</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GaiStart[]<sp/>=<sp/>{0,<sp/>aStart,iStart};</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GaiEnd[]<sp/><sp/><sp/>=<sp/>{<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>,aEnd,<sp/><sp/>iEnd};</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>GammaGia<sp/>=<sp/>new<sp/>Tensor&lt;complex&gt;(GammaGqr-&gt;slice(GiaStart,<sp/>GiaEnd));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>GammaGai<sp/>=<sp/>new<sp/>Tensor&lt;complex&gt;(GammaGqr-&gt;slice(GaiStart,<sp/>GaiEnd));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref><sp/>GammaGia(GammaGqr-&gt;slice(GiaStart,<sp/>GiaEnd));</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref><sp/>GammaGai(GammaGqr-&gt;slice(GaiStart,<sp/>GaiEnd));</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>GammaGqr;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Define<sp/>CGia</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref><sp/>CGia(GammaGia);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>CGia[</highlight><highlight class="stringliteral">&quot;Gia&quot;</highlight><highlight class="normal">]<sp/>*=<sp/>invSqrtVG[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref><sp/>conjTransposeCGia(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>GammaGia);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>Univar_Function&lt;complex&gt;<sp/>fConj(conj&lt;complex&gt;);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>conjTransposeCGia.sum(1.0,GammaGai,</highlight><highlight class="stringliteral">&quot;Gai&quot;</highlight><highlight class="normal">,<sp/>0.0,</highlight><highlight class="stringliteral">&quot;Gia&quot;</highlight><highlight class="normal">,<sp/>fConj);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>conjTransposeCGia[</highlight><highlight class="stringliteral">&quot;Gia&quot;</highlight><highlight class="normal">]<sp/>*=<sp/>invSqrtVG[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref><sp/>conjTransposeGammaGia(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>GammaGia);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>conjTransposeGammaGia.sum(1.0,GammaGai,</highlight><highlight class="stringliteral">&quot;Gai&quot;</highlight><highlight class="normal">,<sp/>0.0,</highlight><highlight class="stringliteral">&quot;Gia&quot;</highlight><highlight class="normal">,<sp/>fConj);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/>Tensor&lt;complex&gt;<sp/>conjCGai(false,<sp/>GammaGai);</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/>Univar_Function&lt;complex&gt;<sp/>fConj(conj&lt;complex&gt;);</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/>conjCGai.sum(1.0,GammaGai,&quot;Gai&quot;,<sp/>0.0,&quot;Gai&quot;,<sp/>fConj);</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/><sp/>conjCGai[&quot;Gai&quot;]<sp/>*=<sp/>invSqrtVG[&quot;G&quot;];</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Get<sp/>Tabij</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref><sp/>*Tabij(getTensorArgument&lt;complex&gt;(</highlight><highlight class="stringliteral">&quot;DoublesAmplitudes&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" kindref="member">isArgumentGiven</ref>(</highlight><highlight class="stringliteral">&quot;SinglesAmplitudes&quot;</highlight><highlight class="normal">)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Get<sp/>Tai</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;complex&gt;</ref><sp/>*Tai(getTensorArgument&lt;complex&gt;(</highlight><highlight class="stringliteral">&quot;SinglesAmplitudes&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>(*Tabij)[</highlight><highlight class="stringliteral">&quot;abij&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>(*Tai)[</highlight><highlight class="stringliteral">&quot;ai&quot;</highlight><highlight class="normal">]<sp/>*<sp/>(*Tai)[</highlight><highlight class="stringliteral">&quot;bj&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//construct<sp/>SG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>CTF::Vector&lt;&gt;<sp/>*realSG(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CTF::Vector&lt;&gt;(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>,<sp/>*CGia.wrld,<sp/></highlight><highlight class="stringliteral">&quot;realSG&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>CTF::Vector&lt;complex&gt;<sp/>*SG(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CTF::Vector&lt;complex&gt;(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>,<sp/>*CGia.wrld,<sp/></highlight><highlight class="stringliteral">&quot;SG&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>(*SG)[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">]<sp/><sp/>=<sp/>(<sp/>2.0)<sp/>*<sp/>conjTransposeCGia[</highlight><highlight class="stringliteral">&quot;Gia&quot;</highlight><highlight class="normal">]<sp/>*<sp/>CGia[</highlight><highlight class="stringliteral">&quot;Gjb&quot;</highlight><highlight class="normal">]<sp/>*<sp/>(*Tabij)[</highlight><highlight class="stringliteral">&quot;abij&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>(*SG)[</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>(-1.0)<sp/>*<sp/>conjTransposeCGia[</highlight><highlight class="stringliteral">&quot;Gja&quot;</highlight><highlight class="normal">]<sp/>*<sp/>CGia[</highlight><highlight class="stringliteral">&quot;Gib&quot;</highlight><highlight class="normal">]<sp/>*<sp/>(*Tabij)[</highlight><highlight class="stringliteral">&quot;abij&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1a77d868359a18a73cfe184f25fad2f59b" kindref="member">fromComplexTensor</ref>(*SG,<sp/>*realSG);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>allocatedTensorArgument&lt;&gt;(</highlight><highlight class="stringliteral">&quot;StructureFactor&quot;</highlight><highlight class="normal">,<sp/>realSG);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a44840efaf12698bdbf9c22c648564656" kindref="member">VofG</ref>.resize(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>realVG-&gt;read_all(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1a44840efaf12698bdbf9c22c648564656" kindref="member">VofG</ref>.data());</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a2d43f73135f2e57a449fd065a6a6c960" kindref="member">structureFactors</ref>.resize(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>realSG-&gt;read_all(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1a2d43f73135f2e57a449fd065a6a6c960" kindref="member">structureFactors</ref>.data());</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469" refid="classsisi4s_1_1FiniteSizeCorrection_1ab03fab436020be68b42a07d07b0eb3ca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ab03fab436020be68b42a07d07b0eb3ca" kindref="member">FiniteSizeCorrection::dryCalculateStructureFactor</ref>()<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;complex&gt;</ref><sp/>*GammaGai(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Definition<sp/>of<sp/>the<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" kindref="member">isArgumentGiven</ref>(</highlight><highlight class="stringliteral">&quot;CoulombVertex&quot;</highlight><highlight class="normal">)){</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;complex&gt;</ref><sp/>*GammaFai(</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1Algorithm_1a338a44c8fd4d6be3b32a6d5e71dfe180" kindref="member">getTensorArgument</ref>&lt;<ref refid="namespacesisi4s_1ad0bccf74d238a6fc69868a9439dd9e7f" kindref="member">complex</ref>,<sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;complex&gt;</ref>&gt;(</highlight><highlight class="stringliteral">&quot;CoulombVertex&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>slice<sp/>in<sp/>dry<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>GammaGai<sp/>=<sp/>GammaFai;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" kindref="member">isArgumentGiven</ref>(</highlight><highlight class="stringliteral">&quot;ParticleHoleCoulombVertex&quot;</highlight><highlight class="normal">)){</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;complex&gt;</ref><sp/>*GammaFai(</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1Algorithm_1a338a44c8fd4d6be3b32a6d5e71dfe180" kindref="member">getTensorArgument</ref>&lt;<ref refid="namespacesisi4s_1ad0bccf74d238a6fc69868a9439dd9e7f" kindref="member">complex</ref>,<sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;complex&gt;</ref>&gt;(</highlight><highlight class="stringliteral">&quot;ParticleHoleCoulombVertex&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>GammaGai<sp/>=<sp/>GammaFai;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>symo[]<sp/>=<sp/>{<sp/>NS,<sp/>NS<sp/>};</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>=GammaGai-&gt;<ref refid="classsisi4s_1_1DryTensor_1a6f3b537c168473549d60e5af723a4751" kindref="member">lens</ref>[0];</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len[]={<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>,1};</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;&gt;</ref><sp/>realInfVG(2,len,symo);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;&gt;</ref><sp/>realVG(realInfVG);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;&gt;</ref><sp/>VG(realVG);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;&gt;</ref><sp/>realInvSqrtVG(realVG);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;&gt;</ref><sp/>invSqrtVG(realInfVG);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Define<sp/>CGai</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;complex&gt;</ref><sp/>CGai(*GammaGai);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Conjugate<sp/>of<sp/>CGai</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;complex&gt;</ref><sp/>conjCGai(CGai);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>Particle/Hole<sp/>Eigenenergies<sp/>epsi<sp/>epsa<sp/>required<sp/>for<sp/>the<sp/>energy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;&gt;</ref><sp/>*epsi(</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1Algorithm_1a338a44c8fd4d6be3b32a6d5e71dfe180" kindref="member">getTensorArgument</ref>&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;double&gt;</ref>&gt;(</highlight><highlight class="stringliteral">&quot;HoleEigenEnergies&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;&gt;</ref><sp/>*epsa(</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1Algorithm_1a338a44c8fd4d6be3b32a6d5e71dfe180" kindref="member">getTensorArgument</ref>&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;double&gt;</ref>&gt;(</highlight><highlight class="stringliteral">&quot;ParticleEigenEnergies&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>No,Nv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>No(epsi-&gt;<ref refid="classsisi4s_1_1DryTensor_1a6f3b537c168473549d60e5af723a4751" kindref="member">lens</ref>[0]);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nv(epsa-&gt;<ref refid="classsisi4s_1_1DryTensor_1a6f3b537c168473549d60e5af723a4751" kindref="member">lens</ref>[0]);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>the<sp/>doubles<sp/>amplitudes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>syms4[]<sp/>=<sp/>{<sp/>NS,<sp/>NS,<sp/>NS,<sp/>NS<sp/>};</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vvoo[]<sp/>=<sp/>{<sp/>Nv,<sp/>Nv,<sp/>No,<sp/>No<sp/>};</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;&gt;</ref><sp/>Tabij(4,<sp/>vvoo,<sp/>syms4);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;&gt;</ref><sp/>rTabij(Tabij);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;&gt;</ref><sp/>iTabij(Tabij);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>syms[]<sp/>=<sp/>{NS,<sp/>NS};</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1Algorithm_1a388052a12509b8b641f17bbe8d41f8f3" kindref="member">allocatedTensorArgument</ref>(</highlight><highlight class="stringliteral">&quot;StructureFactor&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;&gt;</ref>(2,<sp/>len,<sp/>syms,<sp/><ref refid="SourceLocation_8hpp_1ae6177c1e611b3ab1996a17ffc75194de" kindref="member">SOURCE_LOCATION</ref>));</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528" refid="classsisi4s_1_1FiniteSizeCorrection_1abe853aa5dccd41090fc1d8282937d60a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1abe853aa5dccd41090fc1d8282937d60a" kindref="member">FiniteSizeCorrection::constructFibonacciGrid</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//This<sp/>function<sp/>construct<sp/>a<sp/>Fibonacci<sp/>grid<sp/>on<sp/>a<sp/>sphere<sp/>with<sp/>a<sp/>certain<sp/>radius.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Returns<sp/>a<sp/>vector<sp/>of<sp/>vectors:<sp/>{x,y,z}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>N<sp/>should<sp/>be<sp/>fixed<sp/>and<sp/>R<sp/>should<sp/>be<sp/>a<sp/>vector<sp/>which<sp/>is<sp/>selected<sp/>by<sp/>another</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//function<sp/>which<sp/>determines<sp/>the<sp/>R&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//N<sp/>=<sp/>128;<sp/>N<sp/>is<sp/>the<sp/>number<sp/>of<sp/>points<sp/>on<sp/>the<sp/>sphere,<sp/>defined<sp/>in<sp/>.cxx<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>inc<sp/>=<sp/>M_PI<sp/>*<sp/>(3<sp/>-<sp/><ref refid="namespacesisi4s_1a40947d88c4989cacff153a78af67f686" kindref="member">std::sqrt</ref>(5));</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a2b291585932615723bc227b7b649481c" kindref="member">fibonacciGrid</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classFiniteSizeCorrection_1_1Momentum" kindref="compound">Momentum</ref>[N];</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k(0);<sp/>k<sp/>&lt;<sp/>N;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z((2.0*k+1)/N<sp/>-<sp/>1.0);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r(R<sp/>*<sp/><ref refid="namespacesisi4s_1a40947d88c4989cacff153a78af67f686" kindref="member">std::sqrt</ref>(1.0<sp/>-<sp/>z*z));</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi(k<sp/>*<sp/>inc);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a2b291585932615723bc227b7b649481c" kindref="member">fibonacciGrid</ref>[k].<ref refid="classFiniteSizeCorrection_1_1Momentum_1a30aaac3c853a744a6c561799b47bedbb" kindref="member">v</ref>[0]<sp/>=<sp/>r<sp/>*<sp/>std::cos(phi);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a2b291585932615723bc227b7b649481c" kindref="member">fibonacciGrid</ref>[k].<ref refid="classFiniteSizeCorrection_1_1Momentum_1a30aaac3c853a744a6c561799b47bedbb" kindref="member">v</ref>[1]<sp/>=<sp/>r<sp/>*<sp/>std::sin(phi);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a2b291585932615723bc227b7b649481c" kindref="member">fibonacciGrid</ref>[k].<ref refid="classFiniteSizeCorrection_1_1Momentum_1a30aaac3c853a744a6c561799b47bedbb" kindref="member">v</ref>[2]<sp/>=<sp/>R<sp/>*<sp/>z;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547" refid="classsisi4s_1_1FiniteSizeCorrection_1a1263e86e1cfbd0547e5198c46c6eac51" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a1263e86e1cfbd0547e5198c46c6eac51" kindref="member">FiniteSizeCorrection::interpolation3D</ref>()<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><ref refid="TensorReader_8cxx_1ae0ef01a698fe007ed1bf52d22e8e483f" kindref="member">Tensor&lt;&gt;</ref><sp/>*momenta(getTensorArgument&lt;&gt;(</highlight><highlight class="stringliteral">&quot;Momenta&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>int<sp/>NG(momenta-&gt;lens[1]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1Vector" kindref="compound">sisi4s::Vector&lt;&gt;</ref><sp/>*cartesianMomenta(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1Vector" kindref="compound">sisi4s::Vector&lt;&gt;</ref>[<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>]);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>momenta-&gt;read_all(&amp;cartesianMomenta[0][0]);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>give<sp/>direct<sp/>or<sp/>reciprocal<sp/>grid<sp/>and<sp/>calaculate<sp/>all<sp/>properties,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>such<sp/>as<sp/>a,b,c<sp/>and<sp/>omega<sp/>from<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Detecting<sp/>whether<sp/>a<sp/>grid<sp/>is<sp/>half<sp/>or<sp/>full<sp/>by<sp/>summming<sp/>up<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>G<sp/>vectors.<sp/>If<sp/>it<sp/>is<sp/>full<sp/>and<sp/>symmetric,<sp/>the<sp/>length<sp/>of<sp/>the<sp/>sum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>equal<sp/>to<sp/>0.<sp/>But<sp/>in<sp/>case<sp/>where<sp/>the<sp/>grid<sp/>is<sp/>not<sp/>symmetric,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>method<sp/>will<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1Vector" kindref="compound">sisi4s::Vector&lt;&gt;</ref><sp/>check_grid;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g(0);<sp/>g<sp/>&lt;<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>;<sp/>++g){</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>check_grid+=cartesianMomenta[g];</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(1,<sp/></highlight><highlight class="stringliteral">&quot;interpolation3D&quot;</highlight><highlight class="normal">)&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Length<sp/>of<sp/>the<sp/>sum<sp/>of<sp/>all<sp/>G<sp/>vectors=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>check_grid.<ref refid="classsisi4s_1_1Vector_1a136ec801253ede3aa5c4b20b16951230" kindref="member">length</ref>()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(check_grid.<ref refid="classsisi4s_1_1Vector_1a136ec801253ede3aa5c4b20b16951230" kindref="member">length</ref>()<sp/>&gt;<sp/>1e-10){</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(1,<sp/></highlight><highlight class="stringliteral">&quot;interpolation3D&quot;</highlight><highlight class="normal">)&lt;&lt;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Working<sp/>with<sp/>half<sp/>G<sp/>grid,<sp/>completing<sp/>the<sp/>other<sp/>half...&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(1,<sp/></highlight><highlight class="stringliteral">&quot;interpolation3D&quot;</highlight><highlight class="normal">)&lt;&lt;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;!!!<sp/>Always<sp/>check<sp/>if<sp/>you<sp/>are<sp/>indeed<sp/>working<sp/>with<sp/>half<sp/>G<sp/>grid<sp/>!!!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classFiniteSizeCorrection_1_1Momentum" kindref="compound">Momentum</ref>[(2*<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>-1)];</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[0]<sp/>=<sp/><ref refid="classFiniteSizeCorrection_1_1Momentum" kindref="compound">Momentum</ref>(</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cartesianMomenta[0],<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a2d43f73135f2e57a449fd065a6a6c960" kindref="member">structureFactors</ref>[0],<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a44840efaf12698bdbf9c22c648564656" kindref="member">VofG</ref>[0]</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g(1);<sp/>g&lt;<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>;<sp/>++g)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[g]<sp/>=<sp/><ref refid="classFiniteSizeCorrection_1_1Momentum" kindref="compound">Momentum</ref>(</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cartesianMomenta[g],<sp/>0.5*<ref refid="classsisi4s_1_1FiniteSizeCorrection_1a2d43f73135f2e57a449fd065a6a6c960" kindref="member">structureFactors</ref>[g],<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a44840efaf12698bdbf9c22c648564656" kindref="member">VofG</ref>[g]</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[(g+<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>-1)]<sp/>=<sp/><ref refid="classFiniteSizeCorrection_1_1Momentum" kindref="compound">Momentum</ref>(</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cartesianMomenta[g]*(-1.),<sp/>0.5*<ref refid="classsisi4s_1_1FiniteSizeCorrection_1a2d43f73135f2e57a449fd065a6a6c960" kindref="member">structureFactors</ref>[g],<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a44840efaf12698bdbf9c22c648564656" kindref="member">VofG</ref>[g]</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref><sp/>=<sp/>(2*<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>-1);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(1,<sp/></highlight><highlight class="stringliteral">&quot;interpolation3D&quot;</highlight><highlight class="normal">)&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Working<sp/>with<sp/>full<sp/>G<sp/>grid.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(1,<sp/></highlight><highlight class="stringliteral">&quot;interpolation3D&quot;</highlight><highlight class="normal">)&lt;&lt;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;!!!<sp/>Always<sp/>check<sp/>if<sp/>you<sp/>are<sp/>indeed<sp/>working<sp/>with<sp/>full<sp/>G<sp/>grid<sp/>!!!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classFiniteSizeCorrection_1_1Momentum" kindref="compound">Momentum</ref>[<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>];</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g(0);<sp/>g&lt;<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>;<sp/>++g)</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[g]<sp/>=<sp/><ref refid="classFiniteSizeCorrection_1_1Momentum" kindref="compound">Momentum</ref>(</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cartesianMomenta[g],<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a2d43f73135f2e57a449fd065a6a6c960" kindref="member">structureFactors</ref>[g],<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a44840efaf12698bdbf9c22c648564656" kindref="member">VofG</ref>[g]</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>according<sp/>to<sp/>vector<sp/>length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>std::sort(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>,<sp/>&amp;<ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>],<sp/><ref refid="classFiniteSizeCorrection_1_1Momentum_1a0678f2c906a19f42b976a9f69f29b89e" kindref="member">Momentum::sortByLength</ref>);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>3<sp/>unit<sp/>vectors;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1Vector" kindref="compound">sisi4s::Vector&lt;&gt;</ref><sp/>a(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[1].v);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>GC<sp/>is<sp/>the<sp/>shortest<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" kindref="member">isArgumentGiven</ref>(</highlight><highlight class="stringliteral">&quot;shortestGvector&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a48841ae1b52308fb0d55c2e0c77a58e8" kindref="member">GC</ref><sp/>=<sp/><ref refid="classsisi4s_1_1Algorithm_1a36c632fbb19dae4ce2f415705fa5cbcb" kindref="member">getRealArgument</ref>(</highlight><highlight class="stringliteral">&quot;shortestGvector&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a48841ae1b52308fb0d55c2e0c77a58e8" kindref="member">GC</ref><sp/>=<sp/>a.<ref refid="classsisi4s_1_1Vector_1a136ec801253ede3aa5c4b20b16951230" kindref="member">length</ref>();</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>a<sp/>small<sp/>length<sp/>on<sp/>the<sp/>scale<sp/>of<sp/>the<sp/>cell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon(1e-9*a.<ref refid="classsisi4s_1_1Vector_1a136ec801253ede3aa5c4b20b16951230" kindref="member">length</ref>());</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(2,<sp/></highlight><highlight class="stringliteral">&quot;GridSearch&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;b1=#1&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=2;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//a<sp/>and<sp/>b<sp/>should<sp/>not<sp/>be<sp/>parallel;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((a.<ref refid="classsisi4s_1_1Vector_1acf318cab813d8dcc4e7b062cf260f3d6" kindref="member">cross</ref>(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[j].<ref refid="classFiniteSizeCorrection_1_1Momentum_1a30aaac3c853a744a6c561799b47bedbb" kindref="member">v</ref>)).length()<sp/>&lt;<sp/>epsilon)<sp/>++j;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1Vector" kindref="compound">sisi4s::Vector&lt;&gt;</ref><sp/>b(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[j].v);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(2,<sp/></highlight><highlight class="stringliteral">&quot;GridSearch&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;b2=#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//a,<sp/>b<sp/>and<sp/>c<sp/>should<sp/>not<sp/>be<sp/>on<sp/>the<sp/>same<sp/>plane;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>((a.<ref refid="classsisi4s_1_1Vector_1acf318cab813d8dcc4e7b062cf260f3d6" kindref="member">cross</ref>(b)).dot(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[j].<ref refid="classFiniteSizeCorrection_1_1Momentum_1a30aaac3c853a744a6c561799b47bedbb" kindref="member">v</ref>))<sp/>&lt;<sp/>epsilon)<sp/>++j;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1Vector" kindref="compound">sisi4s::Vector&lt;&gt;</ref><sp/>c(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[j].v);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(2,<sp/></highlight><highlight class="stringliteral">&quot;GridSearch&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;b3=#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>basis<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(2,<sp/></highlight><highlight class="stringliteral">&quot;GridSearch&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;b1=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>a<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(2,<sp/></highlight><highlight class="stringliteral">&quot;GridSearch&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;b2=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>b<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(2,<sp/></highlight><highlight class="stringliteral">&quot;GridSearch&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;b3=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>c<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//construct<sp/>the<sp/>transformation<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>std::vector&lt;Vector&lt;&gt;&gt;<sp/>T(3);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Omega((a.<ref refid="classsisi4s_1_1Vector_1acf318cab813d8dcc4e7b062cf260f3d6" kindref="member">cross</ref>(b)).dot(c));</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>T[0]<sp/>=<sp/>b.<ref refid="classsisi4s_1_1Vector_1acf318cab813d8dcc4e7b062cf260f3d6" kindref="member">cross</ref>(c)/Omega;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>T[1]<sp/>=<sp/>c.<ref refid="classsisi4s_1_1Vector_1acf318cab813d8dcc4e7b062cf260f3d6" kindref="member">cross</ref>(a)/Omega;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>T[2]<sp/>=<sp/>a.<ref refid="classsisi4s_1_1Vector_1acf318cab813d8dcc4e7b062cf260f3d6" kindref="member">cross</ref>(b)/Omega;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>std::vector&lt;Vector&lt;&gt;&gt;<sp/>ReciprocalLattice(3);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>ReciprocalLattice[0]<sp/>=<sp/>a*M_PI*2.;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>ReciprocalLattice[1]<sp/>=<sp/>b*M_PI*2.;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>ReciprocalLattice[2]<sp/>=<sp/>c*M_PI*2.;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ctfReciprocalLattice(</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CTF::Tensor&lt;&gt;(2,<sp/>std::vector&lt;int&gt;({3,3}).data())</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ctfRealLattice(</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CTF::Tensor&lt;&gt;(2,<sp/>std::vector&lt;int&gt;({3,3}).data())</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>indices(ctfReciprocalLattice-&gt;wrld-&gt;rank<sp/>==<sp/>0<sp/>?<sp/>3*3<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>indices.size();<sp/>++i)<sp/>{<sp/>indices[i]<sp/>=<sp/>i;<sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>ctfReciprocalLattice-&gt;write(</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>indices.size(),<sp/>indices.data(),<sp/>ReciprocalLattice.data()-&gt;coordinate</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>ctfRealLattice-&gt;write(</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>indices.size(),<sp/>indices.data(),<sp/>T.data()-&gt;coordinate</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" kindref="member">isArgumentGiven</ref>(</highlight><highlight class="stringliteral">&quot;ReciprocalLattice&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>allocatedTensorArgument&lt;&gt;(</highlight><highlight class="stringliteral">&quot;ReciprocalLattice&quot;</highlight><highlight class="normal">,<sp/>ctfReciprocalLattice);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" kindref="member">isArgumentGiven</ref>(</highlight><highlight class="stringliteral">&quot;RealLattice&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>allocatedTensorArgument&lt;&gt;(</highlight><highlight class="stringliteral">&quot;RealLattice&quot;</highlight><highlight class="normal">,<sp/>ctfRealLattice);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>bounding<sp/>box<sp/>in<sp/>direct<sp/>(reciprocal)<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1Vector" kindref="compound">Vector&lt;&gt;</ref><sp/>directMin,<sp/>directMax;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g(0);<sp/>g<sp/>&lt;<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>;<sp/>++g)<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d(0);<sp/>d<sp/>&lt;<sp/>3;<sp/>++d)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>directComponent(T[d].<ref refid="namespacesisi4s_1a92d239b67d4a13717f4e7f93ad9591f2" kindref="member">dot</ref>(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[g].v));</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>directMin[d]<sp/>=<sp/>std::min(directMin[d],<sp/>directComponent);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>directMax[d]<sp/>=<sp/>std::max(directMax[d],<sp/>directComponent);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(2,<sp/></highlight><highlight class="stringliteral">&quot;FiniteSizeInterpolation&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;directMin=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>directMin<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>directMax=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>directMax<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>grid<sp/>for<sp/>the<sp/>entire<sp/>bounding<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>boxDimensions,<sp/>boxOrigin;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>int64_t<sp/>boxSize(1);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d(0);<sp/>d<sp/>&lt;<sp/>3;<sp/>++d)<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>boxSize<sp/>*=</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boxDimensions[d]<sp/>=<sp/>std::floor(directMax[d]<sp/>-<sp/>directMin[d]<sp/>+<sp/>1.5);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>boxOrigin[d]<sp/>=<sp/>std::floor(directMin[d]<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(2,<sp/></highlight><highlight class="stringliteral">&quot;FiniteSizeInterpolation&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;boxOrigin=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>boxOrigin<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>boxDimensions=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>boxDimensions<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>and<sp/>initialize<sp/>regular<sp/>grid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*regularSG(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[boxSize]);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>g(0);<sp/>g<sp/>&lt;<sp/>boxSize;<sp/>++g)<sp/>regularSG[g]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>enter<sp/>known<sp/>SG<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g(0);<sp/>g<sp/>&lt;<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>;<sp/>++g)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>index(0);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1Vector" kindref="compound">Vector&lt;&gt;</ref><sp/>directG;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d(2);<sp/>d<sp/>&gt;=<sp/>0;<sp/>--d)<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>directG[d]<sp/>=<sp/>T[d].<ref refid="classsisi4s_1_1Vector_1a8d8a0dd7fa816afad751865285eec6be" kindref="member">dot</ref>(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[g].v);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>*=<sp/>boxDimensions[d];</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>+=<sp/>std::floor(directG[d]<sp/>+<sp/>0.5)<sp/>-<sp/>boxOrigin[d];</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regularSG[index]<sp/>!=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(2,<sp/></highlight><highlight class="stringliteral">&quot;FiniteSizeInterpolation&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Overwriting<sp/>previous<sp/>grid<sp/>value<sp/>G_direct=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>directG<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>index=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>index<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>regularSG[index]<sp/>=<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[g].<ref refid="classFiniteSizeCorrection_1_1Momentum_1ac63d8096de034b3c0b33ca15eca8e4f6" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>number<sp/>of<sp/>points<sp/>in<sp/>the<sp/>interior<sp/>and<sp/>on<sp/>the<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>int64_t<sp/>interiorPointsCount(0),<sp/>boundaryPointsCount(0);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z(1);<sp/>z<sp/>&lt;<sp/>boxDimensions[2]-1;<sp/>++z)<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y(1);<sp/>y<sp/>&lt;<sp/>boxDimensions[1]-1;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x(1);<sp/>x<sp/>&lt;<sp/>boxDimensions[0]-1;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>index(x<sp/>+<sp/>boxDimensions[0]<sp/>*<sp/>(y<sp/>+<sp/>boxDimensions[1]*z));</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inside(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dz(-1);<sp/>dz<sp/>&lt;=<sp/>1;<sp/>++dz)<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dy(-1);<sp/>dy<sp/>&lt;=<sp/>1;<sp/>++dy)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dx(-1);<sp/>dx<sp/>&lt;=<sp/>1;<sp/>++dx)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>offset(dx<sp/>+<sp/>boxDimensions[0]*(dy<sp/>+<sp/>boxDimensions[1]*dz));</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inside<sp/>&amp;=<sp/>regularSG[index+offset]<sp/>!=<sp/>0.0;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inside)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inside)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inside)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interiorPointsCount<sp/>+=<sp/>inside<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundaryPointsCount<sp/>+=<sp/>regularSG[index]<sp/>!=<sp/>0.0<sp/>&amp;&amp;<sp/>!inside<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(2,<sp/></highlight><highlight class="stringliteral">&quot;FiniteSizeInterpolation&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>momentum<sp/>points<sp/>inside<sp/>cutoff=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>interiorPointsCount<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Number<sp/>of<sp/>momentum<sp/>points<sp/>on<sp/>boundary=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>boundaryPointsCount<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>trilinear<sp/>or<sp/>tricubic<sp/>interpolator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>use<sp/>factory<sp/>to<sp/>select<sp/>different<sp/>interpolators,<sp/>similar<sp/>to<sp/>mixers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//int<sp/>fTricubic(getIntegerArgument(&quot;fTricubic&quot;,<sp/>1));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><ref refid="classgte_1_1IntpTricubic3" kindref="compound">gte::IntpTricubic3&lt;double&gt;</ref><sp/>interpolatedSG(</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>boxDimensions[0],<sp/>boxDimensions[1],<sp/>boxDimensions[2],</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>boxOrigin[0],<sp/>1,<sp/>boxOrigin[1],<sp/>1,<sp/>boxOrigin[2],<sp/>1,</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>regularSG,</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>spherically<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>int64_t<sp/>N(</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1Algorithm_1a5db14be3b0d33bf80218a37223e27667" kindref="member">getIntegerArgument</ref>(</highlight><highlight class="stringliteral">&quot;gridPointsFibonacci&quot;</highlight><highlight class="normal">,<ref refid="classsisi4s_1_1FiniteSizeCorrection_1a0183e40d0c45804bed455771a6b2f583" kindref="member">DEFAULT_NUM_FIBONACCI</ref>)</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lastLength(-1);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a7f21fa46115ceffd8e205ea2c3f8c706" kindref="member">averageSGs</ref>.clear();<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1aff5b228d981afbaa9c83aa5430e70b9d" kindref="member">GLengths</ref>.clear();</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1acb4a2d84298739a8bcad2937d7ebf6bb" kindref="member">meanErrorSG</ref>.clear();</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxlength(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[0].l);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g(1);<sp/>g<sp/>&lt;<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>;<sp/>++g)<sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>maxlength<sp/>=<sp/>std::max(maxlength,<ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[g].l);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num=1000;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1000<sp/>gridpoints<sp/>for<sp/>G=0..G_{max}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g(0);<sp/>g<sp/>&lt;<sp/>num;<sp/>++g)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>length(maxlength/1000.*</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(g));</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(length<sp/>-<sp/>lastLength)<sp/>&gt;<sp/>1e-3)<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1abe853aa5dccd41090fc1d8282937d60a" kindref="member">constructFibonacciGrid</ref>(length,N);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sumSG(0.);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f(0);<sp/>f<sp/>&lt;<sp/>N;<sp/>++f)<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1Vector" kindref="compound">Vector&lt;&gt;</ref><sp/>directG;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d(0);<sp/>d<sp/>&lt;<sp/>3;<sp/>++d)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>directG[d]<sp/>=<sp/>T[d].<ref refid="classsisi4s_1_1Vector_1a8d8a0dd7fa816afad751865285eec6be" kindref="member">dot</ref>(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1a2b291585932615723bc227b7b649481c" kindref="member">fibonacciGrid</ref>[f].v);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lookup<sp/>interpolated<sp/>value<sp/>in<sp/>direct<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sumSG<sp/>+=<sp/>interpolatedSG(directG[0],<sp/>directG[1],<sp/>directG[2]);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sumSG<sp/>/=<sp/>N;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a7f21fa46115ceffd8e205ea2c3f8c706" kindref="member">averageSGs</ref>.push_back(sumSG);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1aff5b228d981afbaa9c83aa5430e70b9d" kindref="member">GLengths</ref>.push_back(length);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>meanError(0.);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f(0);<sp/>f<sp/>&lt;<sp/>N;<sp/>++f)<sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1Vector" kindref="compound">Vector&lt;&gt;</ref><sp/>directG;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d(0);<sp/>d<sp/>&lt;<sp/>3;<sp/>++d)<sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>directG[d]<sp/>=<sp/>T[d].<ref refid="classsisi4s_1_1Vector_1a8d8a0dd7fa816afad751865285eec6be" kindref="member">dot</ref>(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1a2b291585932615723bc227b7b649481c" kindref="member">fibonacciGrid</ref>[f].v);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>interpol(interpolatedSG(directG[0],<sp/>directG[1],<sp/>directG[2]));</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>meanError<sp/>+=<sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">std::abs</ref>(interpol<sp/>-<sp/>sumSG);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1acb4a2d84298739a8bcad2937d7ebf6bb" kindref="member">meanErrorSG</ref>.push_back(meanError/N);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastLength<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>for<sp/>(int<sp/>g(0);<sp/>g&lt;num;<sp/>++g){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>LOG(2,&quot;sphericalAv&quot;)<sp/>&lt;&lt;<sp/>GLengths[g]<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>averageSGs[g]<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>meanErrorSG[g]<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Define<sp/>the<sp/>3D<sp/>zone<sp/>close<sp/>to<sp/>the<sp/>Gamma<sp/>point<sp/>which<sp/>needed<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//integrated<sp/>over.<sp/>Find<sp/>the<sp/>vectors<sp/>which<sp/>define<sp/>it.<sp/>Small<sp/>BZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>for<sp/>(int<sp/>t(0);<sp/>t<sp/>&lt;<sp/>20;<sp/>t++){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>LOG(0,&quot;G<sp/>vectors<sp/>by<sp/>length&quot;)<sp/>&lt;&lt;<sp/>cartesianGrid[t].v<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>std::vector&lt;Vector&lt;&gt;&gt;<sp/>smallBZ;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>smallBZ.push_back(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[1].v);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t(2);<sp/>t&lt;<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>;<sp/>t++){</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1a5debe508e1f3f2713edc13d922058da1" kindref="member">IsInSmallBZ</ref>(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[t].v,<sp/>1.,<sp/>smallBZ)){</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>smallBZ.push_back(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[t].v);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(1,</highlight><highlight class="stringliteral">&quot;interpolation3D&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>basis<sp/>vectors<sp/>of<sp/>small<sp/>BZ=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>smallBZ.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;int&gt;::size_type<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>smallBZ.size();<sp/>i++){</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(2,</highlight><highlight class="stringliteral">&quot;interpolation3D&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;smallBZ<sp/>basis<sp/>vector:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>smallBZ[i]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>integration<sp/>in<sp/>3D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>constantFactor(<ref refid="classsisi4s_1_1Algorithm_1a36c632fbb19dae4ce2f415705fa5cbcb" kindref="member">getRealArgument</ref>(</highlight><highlight class="stringliteral">&quot;constantFactor&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gridPointsInterpolation(<ref refid="classsisi4s_1_1Algorithm_1a5db14be3b0d33bf80218a37223e27667" kindref="member">getIntegerArgument</ref>(</highlight><highlight class="stringliteral">&quot;gridPointsInterpolation&quot;</highlight><highlight class="normal">,<sp/>61));</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cutOffRadius<sp/>is<sp/>set<sp/>to<sp/>a<sp/>big<sp/>default<sp/>value<sp/>100<sp/>to<sp/>ensure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>integration<sp/>is<sp/>over<sp/>the<sp/>whole<sp/>G<sp/>grid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cutOffRadius(<ref refid="classsisi4s_1_1Algorithm_1a36c632fbb19dae4ce2f415705fa5cbcb" kindref="member">getRealArgument</ref>(</highlight><highlight class="stringliteral">&quot;cutOffRadius&quot;</highlight><highlight class="normal">,<sp/>100));</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,</highlight><highlight class="stringliteral">&quot;interpolation3D&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;constantFactor:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>constantFactor<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,</highlight><highlight class="stringliteral">&quot;interpolation3D&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gridPointsInterpolation:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>gridPointsInterpolation<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,</highlight><highlight class="stringliteral">&quot;interpolation3D&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;cutOffRadius:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>cutOffRadius<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N0(gridPointsInterpolation)</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>N1(gridPointsInterpolation)</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>N2(gridPointsInterpolation)</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ab08a52965354202703ac3372c1cc63af" kindref="member">inter3D</ref><sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ad0f40dfd289d147867e1c682a7c8c0ed" kindref="member">sum3D</ref><sp/><sp/><sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>countNO(0);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>countNOg(0);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>std::vector&lt;Vector&lt;&gt;&gt;<sp/>gridWithinRadius;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[i].l<sp/>&lt;<sp/>cutOffRadius)<sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gridWithinRadius.push_back(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[i].v);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[i].l<sp/>&gt;<sp/>epsilon)<sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum3D<sp/>+=<sp/>cartesianGrid[i].vg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ad0f40dfd289d147867e1c682a7c8c0ed" kindref="member">sum3D</ref><sp/>+=<sp/>constantFactor/<ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[i].<ref refid="classFiniteSizeCorrection_1_1Momentum_1ae18396efa4021eacd358997c9221f19a" kindref="member">l</ref>/<ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[i].<ref refid="classFiniteSizeCorrection_1_1Momentum_1ae18396efa4021eacd358997c9221f19a" kindref="member">l</ref></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[i].<ref refid="classFiniteSizeCorrection_1_1Momentum_1ac63d8096de034b3c0b33ca15eca8e4f6" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(0,&quot;inter3Dsum3D&quot;)<sp/>&lt;&lt;<sp/>cartesianGrid[i].l<sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>cartesianGrid[i].s<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>constantFactor/cartesianGrid[i].l/cartesianGrid[i].l</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1MpiCommunicator" kindref="compound">MpiCommunicator</ref><sp/>communicator(</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1Sisi4s_1a9c828aff8cbaa346d4669ff89dfc6f5c" kindref="member">Sisi4s::world</ref>-&gt;rank,<sp/><ref refid="classsisi4s_1_1Sisi4s_1a9c828aff8cbaa346d4669ff89dfc6f5c" kindref="member">Sisi4s::world</ref>-&gt;np,<sp/><ref refid="classsisi4s_1_1Sisi4s_1a9c828aff8cbaa346d4669ff89dfc6f5c" kindref="member">Sisi4s::world</ref>-&gt;comm</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>communicator.<ref refid="classsisi4s_1_1MpiCommunicator_1a9e2b81f7b5f964584b006b816bf81f21" kindref="member">barrier</ref>();</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t0(-N0);<sp/>t0<sp/>&lt;=<sp/>N0;<sp/>++t0)<sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t1(-N1);<sp/>t1<sp/>&lt;=<sp/>N1;<sp/>++t1)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t2(-N2);<sp/>t2<sp/>&lt;=<sp/>N2;<sp/>++t2)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">std::abs</ref>(t0+t1+t2))<sp/>%<sp/><ref refid="classsisi4s_1_1Sisi4s_1a9c828aff8cbaa346d4669ff89dfc6f5c" kindref="member">Sisi4s::world</ref>-&gt;np<sp/>==<sp/><ref refid="classsisi4s_1_1Sisi4s_1a9c828aff8cbaa346d4669ff89dfc6f5c" kindref="member">Sisi4s::world</ref>-&gt;rank)<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1Vector" kindref="compound">Vector&lt;double&gt;</ref><sp/>directg;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1Vector" kindref="compound">Vector&lt;double&gt;</ref><sp/>ga(((a/</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(N0))*</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(t0)));</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1Vector" kindref="compound">Vector&lt;double&gt;</ref><sp/>gb(((b/</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(N1))*</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(t1)));</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1Vector" kindref="compound">Vector&lt;double&gt;</ref><sp/>gc(((c/</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(N2))*</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(t2)));</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1Vector" kindref="compound">Vector&lt;double&gt;</ref><sp/>g(ga+gb+gc);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>each<sp/>g<sp/>that<sp/>is<sp/>within<sp/>smallBZ,<sp/>add<sp/>its<sp/>contribution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//and<sp/>that<sp/>of<sp/>all<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//periodic<sp/>images<sp/>that<sp/>differ<sp/>only<sp/>in<sp/>a<sp/>reciprocal<sp/>lattice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//to<sp/>inter3D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1a5debe508e1f3f2713edc13d922058da1" kindref="member">IsInSmallBZ</ref>(g,<sp/>2,<sp/>smallBZ)){</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>countNOg++;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;int&gt;::size_type<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>gridWithinRadius.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//reset<sp/>g<sp/>to<sp/>the<sp/>vector<sp/>that<sp/>is<sp/>within<sp/>the<sp/>first<sp/>smallBZ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g=ga+gb+gc;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>an<sp/>reciprocal<sp/>lattice<sp/>vector<sp/>to<sp/>g<sp/>to<sp/>get<sp/>a<sp/>periodic<sp/>image<sp/>of<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>+=<sp/>gridWithinRadius[i];</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d(0);<sp/>d<sp/>&lt;3;<sp/>++d){</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>directg[d]=T[d].<ref refid="classsisi4s_1_1Vector_1a8d8a0dd7fa816afad751865285eec6be" kindref="member">dot</ref>(g);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>countNO++;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>interpol;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g.<ref refid="classsisi4s_1_1Vector_1a136ec801253ede3aa5c4b20b16951230" kindref="member">length</ref>()<sp/>&gt;<sp/>epsilon)<sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interpol<sp/>=<sp/>interpolatedSG(directg[0],<sp/>directg[1],<sp/>directg[2]);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ab08a52965354202703ac3372c1cc63af" kindref="member">inter3D</ref><sp/>+=<sp/>interpol<sp/>*<sp/>constantFactor/g.<ref refid="classsisi4s_1_1Vector_1a136ec801253ede3aa5c4b20b16951230" kindref="member">length</ref>()/g.<ref refid="classsisi4s_1_1Vector_1a136ec801253ede3aa5c4b20b16951230" kindref="member">length</ref>();</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(0,&quot;inter3Dfun&quot;)<sp/>&lt;&lt;<sp/>g.length()<sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/><sp/>&lt;&lt;<sp/>interpol<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>constantFactor/g.length()/g.length()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totalInter3D(0);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalCountNOg(0);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>communicator.<ref refid="classsisi4s_1_1MpiCommunicator_1acf97e26d4d096c1ab248bb09864ebd26" kindref="member">allReduce</ref>(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ab08a52965354202703ac3372c1cc63af" kindref="member">inter3D</ref>,<sp/>totalInter3D);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>communicator.<ref refid="classsisi4s_1_1MpiCommunicator_1acf97e26d4d096c1ab248bb09864ebd26" kindref="member">allReduce</ref>(countNOg,<sp/>totalCountNOg);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(2,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;integration3D&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;countNOg=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>totalCountNOg<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(2,<sp/></highlight><highlight class="stringliteral">&quot;interpolation3D&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sum3D=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ad0f40dfd289d147867e1c682a7c8c0ed" kindref="member">sum3D</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ab08a52965354202703ac3372c1cc63af" kindref="member">inter3D</ref>=totalInter3D/totalCountNOg;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(2,<sp/></highlight><highlight class="stringliteral">&quot;interpolation3D&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>points<sp/>in<sp/>summation=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>countNO<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909" refid="classsisi4s_1_1FiniteSizeCorrection_1a200f4c2590c7f573670d778ce6d4dc71" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a200f4c2590c7f573670d778ce6d4dc71" kindref="member">FiniteSizeCorrection::dryInterpolation3D</ref>()<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">//scale=1<sp/>is<sp/>used<sp/>to<sp/>search<sp/>for<sp/>the<sp/>vectors<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="comment">//define<sp/>smallBZ;<sp/>scale<sp/>=<sp/>2<sp/>is<sp/>used<sp/>to<sp/>tell<sp/>if<sp/>a<sp/>vector<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="comment">//within<sp/>the<sp/>smallBZ<sp/>or<sp/>not.<sp/>For<sp/>a<sp/>vector<sp/>that<sp/>is<sp/>within<sp/>the<sp/>smallBZ,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="comment">//its<sp/>projection<sp/>on<sp/>any<sp/>vectors<sp/>which<sp/>define<sp/>smallBZ<sp/>must<sp/>be<sp/>less</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="comment">//than<sp/>1/2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917" refid="classsisi4s_1_1FiniteSizeCorrection_1a5debe508e1f3f2713edc13d922058da1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a5debe508e1f3f2713edc13d922058da1" kindref="member">FiniteSizeCorrection::IsInSmallBZ</ref>(</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1Vector" kindref="compound">Vector&lt;&gt;</ref><sp/>point,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale,<sp/>std::vector&lt;<ref refid="classsisi4s_1_1Vector" kindref="compound">Vector&lt;&gt;</ref>&gt;<sp/>smallBZ</highlight></codeline>
<codeline lineno="919"><highlight class="normal">)</highlight></codeline>
<codeline lineno="920"><highlight class="normal">{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;::size_type<sp/>countVector(0);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;int&gt;::size_type<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>smallBZ.size();<sp/>i++){</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>use<sp/>an<sp/>epsilon<sp/>instead<sp/>of<sp/>1e-9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon(smallBZ[0].length()<sp/>*<sp/>1e-10);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(<ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(smallBZ[i].<ref refid="namespacesisi4s_1a92d239b67d4a13717f4e7f93ad9591f2" kindref="member">dot</ref>(point))/smallBZ[i].length()/smallBZ[i].length()</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*scale<sp/>-1.0)<sp/>&lt;<sp/>epsilon</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(smallBZ[i].<ref refid="namespacesisi4s_1a92d239b67d4a13717f4e7f93ad9591f2" kindref="member">dot</ref>(point))/smallBZ[i].length()/smallBZ[i].length()*scale</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1.0<sp/>&lt;<sp/>-epsilon</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>countVector++;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(countVector<sp/>==<sp/>smallBZ.size()){</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944" refid="classsisi4s_1_1FiniteSizeCorrection_1aa51e7e10b5bd2964732bc007fa28d8ad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa51e7e10b5bd2964732bc007fa28d8ad" kindref="member">FiniteSizeCorrection::integrate</ref>(</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1Inter1D" kindref="compound">sisi4s::Inter1D&lt;double&gt;</ref><sp/>Int1d,</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>steps</highlight></codeline>
<codeline lineno="947"><highlight class="normal">){</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>(end-start)/steps;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>steps;<sp/>++i)</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>s<sp/>+=<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a8e228d06ce5699114b77698c9c0ddbee" kindref="member">simpson</ref>(Int1d,<sp/>start<sp/>+<sp/>h*i,<sp/>h);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h*s;</highlight></codeline>
<codeline lineno="953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955" refid="classsisi4s_1_1FiniteSizeCorrection_1a8e228d06ce5699114b77698c9c0ddbee" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a8e228d06ce5699114b77698c9c0ddbee" kindref="member">FiniteSizeCorrection::simpson</ref>(</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1Inter1D" kindref="compound">sisi4s::Inter1D&lt;double&gt;</ref><sp/>Int1d,</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h</highlight></codeline>
<codeline lineno="958"><highlight class="normal">){</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classsisi4s_1_1FiniteSizeCorrection_1a0b0230201e4d274b939c205e3f0464f5" kindref="member">SGxVG</ref>(Int1d,<sp/>x)<sp/>+<sp/>4*<ref refid="classsisi4s_1_1FiniteSizeCorrection_1a0b0230201e4d274b939c205e3f0464f5" kindref="member">SGxVG</ref>(Int1d,<sp/>x+h/2.)<sp/>+<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a0b0230201e4d274b939c205e3f0464f5" kindref="member">SGxVG</ref>(Int1d,<sp/>x+h))/6.;</highlight></codeline>
<codeline lineno="960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962" refid="classsisi4s_1_1FiniteSizeCorrection_1a0b0230201e4d274b939c205e3f0464f5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a0b0230201e4d274b939c205e3f0464f5" kindref="member">FiniteSizeCorrection::SGxVG</ref>(</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1Inter1D" kindref="compound">sisi4s::Inter1D&lt;double&gt;</ref><sp/>Int1d,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x</highlight></codeline>
<codeline lineno="964"><highlight class="normal">){</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>0.<sp/>&amp;&amp;<sp/>x&lt;<ref refid="classsisi4s_1_1FiniteSizeCorrection_1a48841ae1b52308fb0d55c2e0c77a58e8" kindref="member">GC</ref>)<sp/>?<sp/>(cos(x/<ref refid="classsisi4s_1_1FiniteSizeCorrection_1a48841ae1b52308fb0d55c2e0c77a58e8" kindref="member">GC</ref>*M_PI)+1)*1./2/x/x*Int1d.<ref refid="classsisi4s_1_1Inter1D_1a09df214d5aab2db417ef87280fe54200" kindref="member">getValue</ref>(x)*x*x<sp/>:<sp/>0.;</highlight></codeline>
<codeline lineno="966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968" refid="classsisi4s_1_1FiniteSizeCorrection_1a22f55b903c4a3f38bd3e395bf51f7aa3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a22f55b903c4a3f38bd3e395bf51f7aa3" kindref="member">FiniteSizeCorrection::calculateFiniteSizeCorrection</ref>()<sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1Inter1D" kindref="compound">sisi4s::Inter1D&lt;double&gt;</ref><sp/>Int1d(</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1aff5b228d981afbaa9c83aa5430e70b9d" kindref="member">GLengths</ref>.size(),<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1aff5b228d981afbaa9c83aa5430e70b9d" kindref="member">GLengths</ref>.data(),<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a7f21fa46115ceffd8e205ea2c3f8c706" kindref="member">averageSGs</ref>.data()</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>Int1d.<ref refid="classsisi4s_1_1Inter1D_1aa6373f49148397cef6d09a6dc985a1a1" kindref="member">cubicSpline</ref>(0.,<sp/>0.,<sp/></highlight><highlight class="stringliteral">&quot;M&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x=0.;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(1);<sp/>i&lt;1000;<sp/>i++){</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(2,<sp/></highlight><highlight class="stringliteral">&quot;Interpolation&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Int1d.<ref refid="classsisi4s_1_1Inter1D_1a09df214d5aab2db417ef87280fe54200" kindref="member">getValue</ref>(x)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>i*0.001;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1aff5b228d981afbaa9c83aa5430e70b9d" kindref="member">GLengths</ref>.size();<sp/>++i){</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(2,<sp/></highlight><highlight class="stringliteral">&quot;StructureFactor&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1aff5b228d981afbaa9c83aa5430e70b9d" kindref="member">GLengths</ref>[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a7f21fa46115ceffd8e205ea2c3f8c706" kindref="member">averageSGs</ref>[i]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kpoints(<ref refid="classsisi4s_1_1Algorithm_1a5db14be3b0d33bf80218a37223e27667" kindref="member">getIntegerArgument</ref>(</highlight><highlight class="stringliteral">&quot;kpoints&quot;</highlight><highlight class="normal">,1));</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>volume(<ref refid="classsisi4s_1_1Algorithm_1a36c632fbb19dae4ce2f415705fa5cbcb" kindref="member">getRealArgument</ref>(</highlight><highlight class="stringliteral">&quot;volume&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>constantFactor(<ref refid="classsisi4s_1_1Algorithm_1a36c632fbb19dae4ce2f415705fa5cbcb" kindref="member">getRealArgument</ref>(</highlight><highlight class="stringliteral">&quot;constantFactor&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r1<sp/>=<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa51e7e10b5bd2964732bc007fa28d8ad" kindref="member">integrate</ref>(Int1d,<sp/>0.0,<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a48841ae1b52308fb0d55c2e0c77a58e8" kindref="member">GC</ref>,<sp/>1000)*constantFactor*volume*kpoints*4*M_PI;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>sumSGVG(0.);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>assume<sp/>the<sp/>first<sp/>entry<sp/>of<sp/>cartesianGrid<sp/>corresponds<sp/>to<sp/>G=0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d(0);<sp/>d<sp/>&lt;<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ac4259a8834b9fd0996e9905a4a4c93a2" kindref="member">NG</ref>;<sp/>++d)<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>sumSGVG<sp/>+=<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[d].<ref refid="classFiniteSizeCorrection_1_1Momentum_1a4c5a9a87b0983f09b1c8557f225ef6fa" kindref="member">vg</ref><sp/>*<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1aa90205ef2a30f792951481f3f04e03fb" kindref="member">cartesianGrid</ref>[d].<ref refid="classFiniteSizeCorrection_1_1Momentum_1ac63d8096de034b3c0b33ca15eca8e4f6" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;FiniteSize&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Uncorrected<sp/>e=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sumSGVG<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;FiniteSize&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Corrected<sp/>e=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sumSGVG+<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ab08a52965354202703ac3372c1cc63af" kindref="member">inter3D</ref>-<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ad0f40dfd289d147867e1c682a7c8c0ed" kindref="member">sum3D</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>stream;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>std::setprecision(10)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Summation<sp/>within<sp/>cutoff<sp/>radius=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ad0f40dfd289d147867e1c682a7c8c0ed" kindref="member">sum3D</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(1,</highlight><highlight class="stringliteral">&quot;FiniteSize&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>stream.str();</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>stream;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>std::setprecision(10)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Integral<sp/>within<sp/>cutoff<sp/>radius=&quot;</highlight><highlight class="normal">&lt;&lt;<sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1ab08a52965354202703ac3372c1cc63af" kindref="member">inter3D</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(1,</highlight><highlight class="stringliteral">&quot;FiniteSize&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>stream.str();</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>stream;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>std::setprecision(10)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Spherical<sp/>Averaging<sp/>Correction=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>r1<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(1,</highlight><highlight class="stringliteral">&quot;FiniteSize&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>stream.str();</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>stream;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>std::setprecision(10)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Spherical<sp/>Averaging<sp/>Corrected=&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>sumSGVG<sp/>+<sp/>r1<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(1,</highlight><highlight class="stringliteral">&quot;FiniteSize&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>stream.str();</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1Algorithm_1af6f931ab83742cc23b4f4350d54a3fcd" kindref="member">setRealArgument</ref>(</highlight><highlight class="stringliteral">&quot;CorrectedEnergy&quot;</highlight><highlight class="normal"><sp/><sp/>,<sp/>sumSGVG+<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ab08a52965354202703ac3372c1cc63af" kindref="member">inter3D</ref>-<ref refid="classsisi4s_1_1FiniteSizeCorrection_1ad0f40dfd289d147867e1c682a7c8c0ed" kindref="member">sum3D</ref>);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022" refid="classsisi4s_1_1FiniteSizeCorrection_1a100128dd8d514f54d7897e858ac0b8cf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1FiniteSizeCorrection_1a100128dd8d514f54d7897e858ac0b8cf" kindref="member">FiniteSizeCorrection::dryCalculateFiniteSizeCorrection</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1Algorithm_1a5db14be3b0d33bf80218a37223e27667" kindref="member">getIntegerArgument</ref>(</highlight><highlight class="stringliteral">&quot;kpoints&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1Algorithm_1a36c632fbb19dae4ce2f415705fa5cbcb" kindref="member">getRealArgument</ref>(</highlight><highlight class="stringliteral">&quot;volume&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1Algorithm_1a36c632fbb19dae4ce2f415705fa5cbcb" kindref="member">getRealArgument</ref>(</highlight><highlight class="stringliteral">&quot;constantFactor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1Algorithm_1af6f931ab83742cc23b4f4350d54a3fcd" kindref="member">setRealArgument</ref>(</highlight><highlight class="stringliteral">&quot;CorrectedEnergy&quot;</highlight><highlight class="normal">,<sp/>0.0);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/sisi4s/sisi4s/src/algorithms/FiniteSizeCorrection.cxx"/>
  </compounddef>
</doxygen>
