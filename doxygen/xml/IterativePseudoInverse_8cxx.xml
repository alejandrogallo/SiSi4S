<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="IterativePseudoInverse_8cxx" kind="file" language="C++">
    <compoundname>IterativePseudoInverse.cxx</compoundname>
    <includes refid="IterativePseudoInverse_8hpp" local="no">math/IterativePseudoInverse.hpp</includes>
    <includes refid="MathFunctions_8hpp" local="no">math/MathFunctions.hpp</includes>
    <includes refid="RandomTensor_8hpp" local="no">math/RandomTensor.hpp</includes>
    <includes refid="Exception_8hpp" local="no">util/Exception.hpp</includes>
    <includes refid="Log_8hpp" local="no">util/Log.hpp</includes>
    <includes local="no">complex</includes>
    <includes local="no">array</includes>
    <includes local="no">limits</includes>
    <includes refid="Tensor_8hpp" local="no">util/Tensor.hpp</includes>
    <incdepgraph>
      <node id="7">
        <label>DryTensor.hpp</label>
        <link refid="DryTensor_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>Options.hpp</label>
        <link refid="Options_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Sisi4s.hpp</label>
        <link refid="Sisi4s_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>extern/CLI11.hpp</label>
        <link refid="CLI11_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>math/Complex.hpp</label>
        <link refid="Complex_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>math/Float.hpp</label>
        <link refid="Float_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>IterativePseudoInverse.cxx</label>
        <link refid="IterativePseudoInverse_8cxx"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>math/IterativePseudoInverse.hpp</label>
        <link refid="IterativePseudoInverse_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>math/MathFunctions.hpp</label>
        <link refid="MathFunctions_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>math/RandomTensor.hpp</label>
        <link refid="RandomTensor_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>util/CTF.hpp</label>
        <link refid="CTF_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>util/Exception.hpp</label>
        <link refid="Exception_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>util/Log.hpp</label>
        <link refid="Log_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>util/SourceLocation.hpp</label>
        <link refid="SourceLocation_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>util/Tensor.hpp</label>
        <link refid="Tensor_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>util/Time.hpp</label>
        <link refid="Time_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>algorithm</label>
      </node>
      <node id="47">
        <label>array</label>
      </node>
      <node id="16">
        <label>cmath</label>
      </node>
      <node id="6">
        <label>complex</label>
      </node>
      <node id="14">
        <label>cstdint</label>
      </node>
      <node id="23">
        <label>ctf.hpp</label>
      </node>
      <node id="13">
        <label>ctime</label>
      </node>
      <node id="43">
        <label>exception</label>
      </node>
      <node id="19">
        <label>fstream</label>
      </node>
      <node id="31">
        <label>functional</label>
      </node>
      <node id="15">
        <label>iomanip</label>
      </node>
      <node id="17">
        <label>iostream</label>
      </node>
      <node id="40">
        <label>iterator</label>
      </node>
      <node id="42">
        <label>limits</label>
      </node>
      <node id="36">
        <label>locale</label>
      </node>
      <node id="33">
        <label>map</label>
      </node>
      <node id="30">
        <label>memory</label>
      </node>
      <node id="32">
        <label>numeric</label>
      </node>
      <node id="5">
        <label>ostream</label>
      </node>
      <node id="24">
        <label>random</label>
      </node>
      <node id="38">
        <label>set</label>
      </node>
      <node id="10">
        <label>sstream</label>
      </node>
      <node id="41">
        <label>stdexcept</label>
      </node>
      <node id="18">
        <label>streambuf</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="44">
        <label>sys/stat.h</label>
      </node>
      <node id="45">
        <label>sys/types.h</label>
      </node>
      <node id="34">
        <label>tuple</label>
      </node>
      <node id="39">
        <label>type_traits</label>
      </node>
      <node id="35">
        <label>utility</label>
      </node>
      <node id="20">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="IterativePseudoInverse_8hpp" kindref="compound">math/IterativePseudoInverse.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="MathFunctions_8hpp" kindref="compound">math/MathFunctions.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="RandomTensor_8hpp" kindref="compound">math/RandomTensor.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Exception_8hpp" kindref="compound">util/Exception.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Log_8hpp" kindref="compound">util/Log.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Tensor_8hpp" kindref="compound">util/Tensor.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesisi4s" kindref="compound">sisi4s</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="16" refid="classsisi4s_1_1IterativePseudoInverse_1ab865765b2ebd1f1b988e397aa5587bf6" refkind="member"><highlight class="normal"><ref refid="classsisi4s_1_1IterativePseudoInverse" kindref="compound">IterativePseudoInverse&lt;F&gt;::IterativePseudoInverse</ref>(</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;matrix_,<sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>accuracy</highlight></codeline>
<codeline lineno="18"><highlight class="normal">):</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>matrix(matrix_),</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>square(2,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;int,2&gt;{{(int)matrix_.lens[0],</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)matrix_.lens[0]}}.data(),</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;int,2&gt;{{NS,NS}}.data(),<sp/>*matrix_.wrld</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>),</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><ref refid="DiisMixer_8cxx_1ae6495ef1bd76c6cd022e102143fbed2f" kindref="member">inverse</ref>(2,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;int,2&gt;{{(int)matrix_.lens[0],</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)matrix_.lens[1]}}.data(),</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;int,2&gt;{{NS,NS}}.data(),<sp/>*matrix_.wrld</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>),</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><ref refid="namespacepars_1aeacba27dd76dc4dea5604c90285023ac" kindref="member">alpha</ref>()</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref><sp/><ref refid="namespacesisi4s_1ab3f1696a0e7735d418f8996311daa8c4" kindref="member">conjugate</ref>(2,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;int,2&gt;{{(int)matrix.lens[1],</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)matrix.lens[0]}}.data(),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;int,2&gt;{{NS,NS}}.data(),<sp/>*matrix.wrld</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>CTF::Univar_Function&lt;F&gt;<sp/>fConj(&amp;conj&lt;F&gt;);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1ab3f1696a0e7735d418f8996311daa8c4" kindref="member">conjugate</ref>.sum(1.0,matrix,</highlight><highlight class="stringliteral">&quot;ij&quot;</highlight><highlight class="normal">,<sp/>0.0,</highlight><highlight class="stringliteral">&quot;ji&quot;</highlight><highlight class="normal">,fConj);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>square[</highlight><highlight class="stringliteral">&quot;ij&quot;</highlight><highlight class="normal">]<sp/>=<sp/>matrix[</highlight><highlight class="stringliteral">&quot;ik&quot;</highlight><highlight class="normal">]<sp/>*<sp/><ref refid="namespacesisi4s_1ab3f1696a0e7735d418f8996311daa8c4" kindref="member">conjugate</ref>[</highlight><highlight class="stringliteral">&quot;kj&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>CTF::Univar_Function&lt;F&gt;<sp/>fAbs(&amp;abs&lt;F&gt;);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>CTF::Vector&lt;F&gt;<sp/>rowAbsNorms(square.lens[0],<sp/>*matrix.wrld);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>rowAbsNorms.sum(1.0,square,</highlight><highlight class="stringliteral">&quot;ij&quot;</highlight><highlight class="normal">,<sp/>0.0,</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">,fAbs);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>std::vector&lt;F&gt;<sp/>normValues(rowAbsNorms.lens[0]);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>rowAbsNorms.read_all(normValues.data());</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[K.L.<sp/>11.07.2019]<sp/>complex<sp/>infinity<sp/>has<sp/>undefined<sp/>behaviour<sp/>depending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>compiler.<sp/>Tested<sp/>using<sp/>icc-debug<sp/>and<sp/>icc<sp/>config<sp/>in<sp/>complex<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>it<sp/>gives<sp/>(-0,-0).<sp/>That&apos;s<sp/>why<sp/>in<sp/>complex<sp/>case<sp/>it<sp/>works<sp/>while<sp/>in<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>it<sp/>doesn&apos;t<sp/>(max=infinity).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Anyway,<sp/>it<sp/>doesn&apos;t<sp/>make<sp/>sense<sp/>to<sp/>compare<sp/>if<sp/>a<sp/>number<sp/>is<sp/>larger<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>abs(-infinity).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>F<sp/>max(-std::numeric_limits&lt;F&gt;::infinity());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>temporary<sp/>fix:<sp/>set<sp/>max<sp/>default<sp/>to<sp/>double<sp/>type<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max(0.);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>square.lens[0];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(normValues[i])<sp/>&gt;<sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(max))<sp/>max<sp/>=<sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(normValues[i]);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="namespacepars_1aeacba27dd76dc4dea5604c90285023ac" kindref="member">alpha</ref><sp/>=<sp/>1.0/max;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(4,<sp/></highlight><highlight class="stringliteral">&quot;PseudoInverse&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;alpha=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacepars_1aeacba27dd76dc4dea5604c90285023ac" kindref="member">alpha</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><ref refid="DiisMixer_8cxx_1ae6495ef1bd76c6cd022e102143fbed2f" kindref="member">inverse</ref>[</highlight><highlight class="stringliteral">&quot;ji&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(<ref refid="namespacepars_1aeacba27dd76dc4dea5604c90285023ac" kindref="member">alpha</ref>)<sp/>*<sp/><ref refid="namespacesisi4s_1ab3f1696a0e7735d418f8996311daa8c4" kindref="member">conjugate</ref>[</highlight><highlight class="stringliteral">&quot;ji&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>iterateQuadratically(accuracy);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>iterate(accuracy);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="65" refid="classsisi4s_1_1IterativePseudoInverse_1a96558b1a79ac7e0bcdeb64127855241e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1IterativePseudoInverse_1a96558b1a79ac7e0bcdeb64127855241e" kindref="member">IterativePseudoInverse&lt;F&gt;::iterate</ref>(<ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>accuracy)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>CTF::Scalar&lt;F&gt;<sp/>s;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref><sp/><ref refid="namespacesisi4s_1ab3f1696a0e7735d418f8996311daa8c4" kindref="member">conjugate</ref>(2,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;int,2&gt;{{(int)matrix.lens[1],</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)matrix.lens[0]}}.data(),</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;int,2&gt;{{NS,NS}}.data(),<sp/>*matrix.wrld</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>CTF::Univar_Function&lt;F&gt;<sp/>fConj(&amp;conj&lt;F&gt;);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1ab3f1696a0e7735d418f8996311daa8c4" kindref="member">conjugate</ref>.sum(1.0,matrix,</highlight><highlight class="stringliteral">&quot;ij&quot;</highlight><highlight class="normal">,<sp/>0.0,</highlight><highlight class="stringliteral">&quot;ji&quot;</highlight><highlight class="normal">,fConj);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref><sp/>sqr(2,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;int,2&gt;{{(int)matrix.lens[0],</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)matrix.lens[0]}}.data(),</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;int,2&gt;{{NS,NS}}.data(),<sp/>*matrix.wrld</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>remainder(1.0),<sp/>minRemainder(std::numeric_limits&lt;F&gt;::infinity());</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n(0),<sp/>nMin(0);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>use<sp/>constants<sp/>for<sp/>limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>test<sp/>rectangular<sp/>matrices<sp/>with<sp/>lens[0]&gt;lens[1]<sp/>&amp;<sp/>lens[0]&gt;lens[1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(remainder)<sp/>&gt;<sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(accuracy*accuracy)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>n-nMin<sp/>&lt;<sp/>100<sp/>&amp;&amp;<sp/>n<sp/>&lt;<sp/>10000</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>sqr[</highlight><highlight class="stringliteral">&quot;ij&quot;</highlight><highlight class="normal">]<sp/>=<sp/>-1.0<sp/>*<sp/><ref refid="DiisMixer_8cxx_1ae6495ef1bd76c6cd022e102143fbed2f" kindref="member">inverse</ref>[</highlight><highlight class="stringliteral">&quot;ik&quot;</highlight><highlight class="normal">]<sp/>*<sp/>matrix[</highlight><highlight class="stringliteral">&quot;kj&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>sqr[</highlight><highlight class="stringliteral">&quot;ii&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>1.0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>s[</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>=<sp/>sqr[</highlight><highlight class="stringliteral">&quot;ij&quot;</highlight><highlight class="normal">]<sp/>*<sp/>sqr[</highlight><highlight class="stringliteral">&quot;ij&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="DiisMixer_8cxx_1ae6495ef1bd76c6cd022e102143fbed2f" kindref="member">inverse</ref>[</highlight><highlight class="stringliteral">&quot;ij&quot;</highlight><highlight class="normal">]<sp/>+=<sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(<ref refid="namespacepars_1aeacba27dd76dc4dea5604c90285023ac" kindref="member">alpha</ref>)<sp/>*<sp/>sqr[</highlight><highlight class="stringliteral">&quot;ik&quot;</highlight><highlight class="normal">]<sp/>*<sp/><ref refid="namespacesisi4s_1ab3f1696a0e7735d418f8996311daa8c4" kindref="member">conjugate</ref>[</highlight><highlight class="stringliteral">&quot;kj&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>remainder<sp/>=<sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(s.get_val());</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(remainder)<sp/>&lt;<sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(minRemainder))<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minRemainder<sp/>=<sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(remainder);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nMin<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>++n;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>10000)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>failed<sp/>to<sp/>convege</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;PseudoInverse&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>converge,<sp/>remainder=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>remainder</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>minRemainder=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>minRemainder<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="Exception_8hpp_1aa49c727f91093a79c46ee6ecd83548bb" kindref="member">EXCEPTION</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>converge<sp/>iterative<sp/>pseudo<sp/>inverse.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="107" refid="classsisi4s_1_1IterativePseudoInverse_1a206b9b605d859aec9f8abbc15e919ed1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1IterativePseudoInverse_1a206b9b605d859aec9f8abbc15e919ed1" kindref="member">IterativePseudoInverse&lt;F&gt;::iterateQuadratically</ref>(<ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>accuracy)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>CTF::Scalar&lt;F&gt;<sp/>s(*matrix.wrld);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>remainder(1.0),<sp/>minRemainder(std::numeric_limits&lt;F&gt;::infinity());</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n(0),<sp/>nMin(0);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>use<sp/>constants<sp/>for<sp/>limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(remainder)<sp/>&gt;<sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(accuracy*accuracy)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>n-nMin<sp/>&lt;<sp/>2<sp/>&amp;&amp;<sp/>n<sp/>&lt;<sp/>10000</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>square[</highlight><highlight class="stringliteral">&quot;ij&quot;</highlight><highlight class="normal">]<sp/>=<sp/>-1.0<sp/>*<sp/>matrix[</highlight><highlight class="stringliteral">&quot;ik&quot;</highlight><highlight class="normal">]<sp/>*<sp/><ref refid="DiisMixer_8cxx_1ae6495ef1bd76c6cd022e102143fbed2f" kindref="member">inverse</ref>[</highlight><highlight class="stringliteral">&quot;kj&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>square[</highlight><highlight class="stringliteral">&quot;ii&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>2.0;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="DiisMixer_8cxx_1ae6495ef1bd76c6cd022e102143fbed2f" kindref="member">inverse</ref>[</highlight><highlight class="stringliteral">&quot;ij&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="DiisMixer_8cxx_1ae6495ef1bd76c6cd022e102143fbed2f" kindref="member">inverse</ref>[</highlight><highlight class="stringliteral">&quot;ik&quot;</highlight><highlight class="normal">]<sp/>*<sp/>square[</highlight><highlight class="stringliteral">&quot;kj&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>square[</highlight><highlight class="stringliteral">&quot;ii&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>-1.0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>s[</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>=<sp/>square[</highlight><highlight class="stringliteral">&quot;ij&quot;</highlight><highlight class="normal">]<sp/>*<sp/>square[</highlight><highlight class="stringliteral">&quot;ij&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>remainder<sp/>=<sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(s.get_val());</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(4,<sp/></highlight><highlight class="stringliteral">&quot;PseudoInverse&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;remainder=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>remainder<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(remainder)<sp/>&lt;<sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(minRemainder))<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minRemainder<sp/>=<sp/><ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(remainder);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nMin<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>++n;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>10000)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>failed<sp/>to<sp/>convege</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(0,<sp/></highlight><highlight class="stringliteral">&quot;PseudoInverse&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>converge,<sp/>remainder=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>remainder</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>minRemainder=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>minRemainder<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="Exception_8hpp_1aa49c727f91093a79c46ee6ecd83548bb" kindref="member">EXCEPTION</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>converge<sp/>iterative<sp/>pseudo<sp/>inverse.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="138" refid="classsisi4s_1_1IterativePseudoInverse_1a1549bac3e662a0bdf1cf6ab25608dff4" refkind="member"><highlight class="normal"><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref><sp/>&amp;<ref refid="classsisi4s_1_1IterativePseudoInverse_1a1549bac3e662a0bdf1cf6ab25608dff4" kindref="member">IterativePseudoInverse&lt;F&gt;::get</ref>()<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="DiisMixer_8cxx_1ae6495ef1bd76c6cd022e102143fbed2f" kindref="member">inverse</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instantiate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsisi4s_1_1IterativePseudoInverse" kindref="compound">sisi4s::IterativePseudoInverse&lt;sisi4s::Float64&gt;</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsisi4s_1_1IterativePseudoInverse" kindref="compound">sisi4s::IterativePseudoInverse&lt;sisi4s::Complex64&gt;</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="150" refid="classsisi4s_1_1IterativePseudoInverse_1acb238f35c76e5800a9d97fc9c3af32b1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1IterativePseudoInverse_1acb238f35c76e5800a9d97fc9c3af32b1" kindref="member">IterativePseudoInverse&lt;F&gt;::generateHilbertMatrix</ref>(<ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref><sp/>&amp;m)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>int64_t<sp/>indicesCount,<sp/>*indices;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>*values;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>m.read_local(&amp;indicesCount,<sp/>&amp;indices,<sp/>&amp;values);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>l(0);<sp/>l<sp/>&lt;<sp/>indicesCount;<sp/>++l)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>int(l<sp/>%<sp/>m.lens[0]);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>int(l<sp/>/<sp/>m.lens[0]);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>values[l]<sp/>=<sp/>1.0<sp/>/<sp/>(i+j+1);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>m.write(indicesCount,<sp/>indices,<sp/>values);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>free(indices);<sp/>free(values);</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="164" refid="classsisi4s_1_1IterativePseudoInverse_1a1998a3534a76b40320d273d324b2470e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1IterativePseudoInverse_1a1998a3534a76b40320d273d324b2470e" kindref="member">IterativePseudoInverse&lt;F&gt;::test</ref>(CTF::World<sp/>*world)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref><sp/>m(</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>2,<sp/>std::array&lt;int,2&gt;{{5,8}}.data(),<sp/>std::array&lt;int,2&gt;{{NS,NS}}.data(),</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>*world</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>generateHilbertMatrix(m);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1IterativePseudoInverse" kindref="compound">IterativePseudoInverse</ref><sp/>pseudoInverse(m);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref><sp/>im(pseudoInverse.<ref refid="classsisi4s_1_1IterativePseudoInverse_1a1549bac3e662a0bdf1cf6ab25608dff4" kindref="member">get</ref>());</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>im[</highlight><highlight class="stringliteral">&quot;ij&quot;</highlight><highlight class="normal">]<sp/>=<sp/>m[</highlight><highlight class="stringliteral">&quot;ik&quot;</highlight><highlight class="normal">]<sp/>*<sp/>im[</highlight><highlight class="stringliteral">&quot;kj&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>im[</highlight><highlight class="stringliteral">&quot;ii&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>-1.0;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>CTF::Scalar&lt;F&gt;<sp/>s(*world);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>s[</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>=<sp/>im[</highlight><highlight class="stringliteral">&quot;ij&quot;</highlight><highlight class="normal">]<sp/>*<sp/>im[</highlight><highlight class="stringliteral">&quot;ij&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>n(<ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(s.get_val()));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(3)<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1DefaultRandomEngine" kindref="compound">DefaultRandomEngine</ref><sp/>random;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>std::normal_distribution&lt;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1ComplexTraits_1a90628a1dacc4c843f189dc61232f2823" kindref="member">ComplexTraits&lt;F&gt;::ExtendedType</ref></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<sp/>normalDistribution(</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>1.0</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacesisi4s_1adb5622106d23e3d14c736c4793512e5c" kindref="member">setRandomTensor</ref>(m,<sp/>normalDistribution,<sp/>random);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1IterativePseudoInverse" kindref="compound">IterativePseudoInverse</ref><sp/>pseudoInverse(m);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref><sp/>im(pseudoInverse.<ref refid="classsisi4s_1_1IterativePseudoInverse_1a1549bac3e662a0bdf1cf6ab25608dff4" kindref="member">get</ref>());</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>im[</highlight><highlight class="stringliteral">&quot;ij&quot;</highlight><highlight class="normal">]<sp/>=<sp/>m[</highlight><highlight class="stringliteral">&quot;ik&quot;</highlight><highlight class="normal">]<sp/>*<sp/>im[</highlight><highlight class="stringliteral">&quot;kj&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>im[</highlight><highlight class="stringliteral">&quot;ii&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>-1.0;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>CTF::Scalar&lt;F&gt;<sp/>s(*world);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>s[</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>=<sp/>im[</highlight><highlight class="stringliteral">&quot;ij&quot;</highlight><highlight class="normal">]<sp/>*<sp/>im[</highlight><highlight class="stringliteral">&quot;ij&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408ad9a58ab20a9d26589d9044a920984a3a" kindref="member">F</ref><sp/>n(<ref refid="namespacesisi4s_1ab4577a58307bc686ea6f58bc3d0249d3" kindref="member">abs</ref>(s.get_val()));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(3)<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instantiate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1IterativePseudoInverse_1a1998a3534a76b40320d273d324b2470e" kindref="member">sisi4s::IterativePseudoInverse&lt;sisi4s::Float64&gt;::test</ref>(CTF::World<sp/>*world);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1IterativePseudoInverse_1a1998a3534a76b40320d273d324b2470e" kindref="member">sisi4s::IterativePseudoInverse&lt;sisi4s::Complex64&gt;::test</ref>(CTF::World<sp/>*world);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="207" refid="classsisi4s_1_1DryIterativePseudoInverse_1ac50ff2b016cd6c5b1c1383d6435d806b" refkind="member"><highlight class="normal"><ref refid="classsisi4s_1_1DryIterativePseudoInverse_1ac50ff2b016cd6c5b1c1383d6435d806b" kindref="member">DryIterativePseudoInverse&lt;F&gt;::DryIterativePseudoInverse</ref>(</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;F&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;matrix_</highlight></codeline>
<codeline lineno="209"><highlight class="normal">):</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>matrix(matrix_),</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>square(2,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;int,2&gt;{{(int)matrix_.<ref refid="classsisi4s_1_1DryTensor_1a6f3b537c168473549d60e5af723a4751" kindref="member">lens</ref>[0],</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)matrix_.<ref refid="classsisi4s_1_1DryTensor_1a6f3b537c168473549d60e5af723a4751" kindref="member">lens</ref>[0]}}.data(),</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;int,2&gt;{{NS,NS}}.data(),<sp/><ref refid="SourceLocation_8hpp_1ae6177c1e611b3ab1996a17ffc75194de" kindref="member">SOURCE_LOCATION</ref></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>),</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><ref refid="DiisMixer_8cxx_1ae6495ef1bd76c6cd022e102143fbed2f" kindref="member">inverse</ref>(2,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;int,2&gt;{{(int)matrix_.lens[0],</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>matrix_.lens[1]}}.data(),</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;int,2&gt;{{NS,NS}}.data(),<sp/><ref refid="SourceLocation_8hpp_1ae6177c1e611b3ab1996a17ffc75194de" kindref="member">SOURCE_LOCATION</ref></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;F&gt;</ref><sp/><ref refid="namespacesisi4s_1ab3f1696a0e7735d418f8996311daa8c4" kindref="member">conjugate</ref>(2,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;int,2&gt;{{(int)matrix_.lens[0],</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)matrix_.lens[1]}}.data(),</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;int,2&gt;{{NS,NS}}.data(),<sp/><ref refid="SourceLocation_8hpp_1ae6177c1e611b3ab1996a17ffc75194de" kindref="member">SOURCE_LOCATION</ref></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1DryVector" kindref="compound">DryVector&lt;F&gt;</ref><sp/>rowAbsNorms(square.lens[0]);</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="231" refid="classsisi4s_1_1DryIterativePseudoInverse_1a5ff102b8c781f0a691fb55c1e17df138" refkind="member"><highlight class="normal"><ref refid="classsisi4s_1_1DryTensor" kindref="compound">DryTensor&lt;F&gt;</ref><sp/>&amp;<ref refid="classsisi4s_1_1DryIterativePseudoInverse_1a5ff102b8c781f0a691fb55c1e17df138" kindref="member">DryIterativePseudoInverse&lt;F&gt;::get</ref>()<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="DiisMixer_8cxx_1ae6495ef1bd76c6cd022e102143fbed2f" kindref="member">inverse</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instantiate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsisi4s_1_1DryIterativePseudoInverse" kindref="compound">sisi4s::DryIterativePseudoInverse&lt;sisi4s::Float64&gt;</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsisi4s_1_1DryIterativePseudoInverse" kindref="compound">sisi4s::DryIterativePseudoInverse&lt;sisi4s::Complex64&gt;</ref>;</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/sisi4s/sisi4s/src/math/IterativePseudoInverse.cxx"/>
  </compounddef>
</doxygen>
