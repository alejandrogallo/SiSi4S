<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="MoReader_8cxx" kind="file" language="C++">
    <compoundname>MoReader.cxx</compoundname>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">algorithm</includes>
    <includes refid="MoReader_8hpp" local="no">algorithms/MoReader.hpp</includes>
    <includes refid="Sisi4s_8hpp" local="no">Sisi4s.hpp</includes>
    <includes refid="Log_8hpp" local="no">util/Log.hpp</includes>
    <includes local="no">fstream</includes>
    <includes refid="CTF_8hpp" local="no">util/CTF.hpp</includes>
    <includes local="no">numeric</includes>
    <includes local="no">set</includes>
    <includes local="no">map</includes>
    <includes refid="Parsing_8hpp" local="no">util/Parsing.hpp</includes>
    <includes refid="AngularMomentum_8hpp" local="no">util/AngularMomentum.hpp</includes>
    <includes refid="BasisSet_8hpp" local="no">util/BasisSet.hpp</includes>
    <includes refid="Emitter_8hpp" local="no">util/Emitter.hpp</includes>
    <includes refid="XyzParser_8hpp" local="no">util/XyzParser.hpp</includes>
    <includes refid="BasisParser_8hpp" local="no">nwchem/BasisParser.hpp</includes>
    <includes refid="MovecsParser_8hpp" local="no">nwchem/MovecsParser.hpp</includes>
    <includes refid="MosParser_8hpp" local="no">turbomole/MosParser.hpp</includes>
    <includes local="no">regex</includes>
    <includes local="no">iterator</includes>
    <incdepgraph>
      <node id="7">
        <label>Data.hpp</label>
        <link refid="Data_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Options.hpp</label>
        <link refid="Options_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>Sisi4s.hpp</label>
        <link refid="Sisi4s_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>algorithms/Algorithm.hpp</label>
        <link refid="Algorithm_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>MoReader.cxx</label>
        <link refid="MoReader_8cxx"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>algorithms/MoReader.hpp</label>
        <link refid="MoReader_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>extern/CLI11.hpp</label>
        <link refid="CLI11_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>math/Complex.hpp</label>
        <link refid="Complex_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>math/Float.hpp</label>
        <link refid="Float_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>nwchem/BasisParser.hpp</label>
        <link refid="BasisParser_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>nwchem/MovecsParser.hpp</label>
        <link refid="MovecsParser_8hpp"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>turbomole/MosParser.hpp</label>
        <link refid="MosParser_8hpp"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>util/AngularMomentum.hpp</label>
        <link refid="AngularMomentum_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>util/BasisSet.hpp</label>
        <link refid="BasisSet_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>util/CTF.hpp</label>
        <link refid="CTF_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>util/Emitter.hpp</label>
        <link refid="Emitter_8hpp"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>util/Exception.hpp</label>
        <link refid="Exception_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>util/Log.hpp</label>
        <link refid="Log_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>util/Parsing.hpp</label>
        <link refid="Parsing_8hpp"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>util/SharedPointer.hpp</label>
        <link refid="SharedPointer_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>util/Time.hpp</label>
        <link refid="Time_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>util/XyzParser.hpp</label>
        <link refid="XyzParser_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>algorithm</label>
      </node>
      <node id="53">
        <label>assert.h</label>
      </node>
      <node id="15">
        <label>cmath</label>
      </node>
      <node id="21">
        <label>complex</label>
      </node>
      <node id="11">
        <label>cstdint</label>
      </node>
      <node id="24">
        <label>ctf.hpp</label>
      </node>
      <node id="10">
        <label>ctime</label>
      </node>
      <node id="40">
        <label>exception</label>
      </node>
      <node id="18">
        <label>fstream</label>
      </node>
      <node id="30">
        <label>functional</label>
      </node>
      <node id="13">
        <label>iomanip</label>
      </node>
      <node id="16">
        <label>iostream</label>
      </node>
      <node id="37">
        <label>iterator</label>
      </node>
      <node id="39">
        <label>limits</label>
      </node>
      <node id="34">
        <label>locale</label>
      </node>
      <node id="22">
        <label>map</label>
      </node>
      <node id="29">
        <label>memory</label>
      </node>
      <node id="31">
        <label>numeric</label>
      </node>
      <node id="12">
        <label>ostream</label>
      </node>
      <node id="44">
        <label>regex</label>
      </node>
      <node id="35">
        <label>set</label>
      </node>
      <node id="14">
        <label>sstream</label>
      </node>
      <node id="38">
        <label>stdexcept</label>
      </node>
      <node id="17">
        <label>streambuf</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="41">
        <label>sys/stat.h</label>
      </node>
      <node id="42">
        <label>sys/types.h</label>
      </node>
      <node id="32">
        <label>tuple</label>
      </node>
      <node id="36">
        <label>type_traits</label>
      </node>
      <node id="33">
        <label>utility</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
      <node id="49">
        <label>yaml-cpp/yaml.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structShellParser" prot="public">ShellParser</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="MoReader_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" prot="public" static="no">
        <name>LOGGER</name>
        <param><defname>_l</defname></param>
        <initializer><ref refid="Log_8hpp_1a3577749fb48d57a158b8ac1a0b3ab57e" kindref="member">LOG</ref>(_l, &quot;MoReader&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/sisi4s/sisi4s/src/algorithms/MoReader.cxx" line="22" column="12" bodyfile="/home/runner/work/sisi4s/sisi4s/src/algorithms/MoReader.cxx" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="MoReader_8cxx_1a2c6b636f505e7848aa4e9d039c74ea71" prot="public" static="no">
        <name>IF_GIVEN</name>
        <param><defname>_l</defname></param>
        <param><defname>...</defname></param>
        <initializer>if (isArgumentGiven(_l)) { __VA_ARGS__ }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/sisi4s/sisi4s/src/algorithms/MoReader.cxx" line="23" column="9" bodyfile="/home/runner/work/sisi4s/sisi4s/src/algorithms/MoReader.cxx" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="MoReader_8cxx_1a4bf5f610a118a6a7960598e15fa0350c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int frozenElement</definition>
        <argsstring>(std::string e)</argsstring>
        <name>frozenElement</name>
        <param>
          <type>std::string</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/sisi4s/sisi4s/src/algorithms/MoReader.cxx" line="29" column="5" bodyfile="/home/runner/work/sisi4s/sisi4s/src/algorithms/MoReader.cxx" bodystart="29" bodyend="37"/>
        <referencedby refid="classsisi4s_1_1MoReader_1a379f28cce98f856ff1e9d6f26de76d29" compoundref="MoReader_8cxx" startline="144" endline="429">sisi4s::MoReader::run</referencedby>
      </memberdef>
      <memberdef kind="function" id="MoReader_8cxx_1a718024b869cdd4f94ad15f06f8a47372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; size_t &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; size_t &gt; &gt; findShellIndices</definition>
        <argsstring>(const BasisSet &amp;bs, const std::vector&lt; std::string &gt; &amp;atoms, const am::AngularMomentum &amp;am)</argsstring>
        <name>findShellIndices</name>
        <param>
          <type>const <ref refid="BasisSet_8hpp_1ad0ff2dd7a949f1830da34b68ceb30575" kindref="member">BasisSet</ref> &amp;</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>atoms</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408" kindref="member">am::AngularMomentum</ref> &amp;</type>
          <declname>am</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/sisi4s/sisi4s/src/algorithms/MoReader.cxx" line="39" column="13" bodyfile="/home/runner/work/sisi4s/sisi4s/src/algorithms/MoReader.cxx" bodystart="40" bodyend="69"/>
        <references refid="namespaceam_1a04e47e5931d5d6e94c7052151abe8650" compoundref="AngularMomentum_8cxx" startline="6" endline="6">am::toInt</references>
        <referencedby refid="classsisi4s_1_1MoReader_1a379f28cce98f856ff1e9d6f26de76d29" compoundref="MoReader_8cxx" startline="144" endline="429">sisi4s::MoReader::run</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="MoReader_8hpp" kindref="compound">algorithms/MoReader.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Sisi4s_8hpp" kindref="compound">Sisi4s.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Log_8hpp" kindref="compound">util/Log.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="CTF_8hpp" kindref="compound">util/CTF.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Parsing_8hpp" kindref="compound">util/Parsing.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AngularMomentum_8hpp" kindref="compound">util/AngularMomentum.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="BasisSet_8hpp" kindref="compound">util/BasisSet.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Emitter_8hpp" kindref="compound">util/Emitter.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="XyzParser_8hpp" kindref="compound">util/XyzParser.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="BasisParser_8hpp" kindref="compound">nwchem/BasisParser.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="MovecsParser_8hpp" kindref="compound">nwchem/MovecsParser.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="MosParser_8hpp" kindref="compound">turbomole/MosParser.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;regex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="MoReader_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOGGER(_l)<sp/>LOG(_l,<sp/>&quot;MoReader&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="23" refid="MoReader_8cxx_1a2c6b636f505e7848aa4e9d039c74ea71" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IF_GIVEN(_l,<sp/>...)<sp/>if<sp/>(isArgumentGiven(_l))<sp/>{<sp/>__VA_ARGS__<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesisi4s" kindref="compound">sisi4s</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="Algorithm_8hpp_1a07e9ffa67ed21886a687b27719c949e1" kindref="member">ALGORITHM_REGISTRAR_DEFINITION</ref>(<ref refid="classsisi4s_1_1MoReader" kindref="compound">MoReader</ref>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="MoReader_8cxx_1a4bf5f610a118a6a7960598e15fa0350c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="MoReader_8cxx_1a4bf5f610a118a6a7960598e15fa0350c" kindref="member">frozenElement</ref>(std::string<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>e<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;H&quot;</highlight><highlight class="normal"><sp/><sp/>||<sp/>e<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;He&quot;</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>e<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Li&quot;</highlight><highlight class="normal"><sp/>||<sp/>e<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Be&quot;</highlight><highlight class="normal"><sp/>||<sp/>e<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal"><sp/><sp/>||<sp/>e<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>e<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;N&quot;</highlight><highlight class="normal"><sp/><sp/>||<sp/>e<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;O&quot;</highlight><highlight class="normal"><sp/><sp/>||<sp/>e<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;F&quot;</highlight><highlight class="normal"><sp/><sp/>||<sp/>e<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Ne&quot;</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>e<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Na&quot;</highlight><highlight class="normal"><sp/>||<sp/>e<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Mg&quot;</highlight><highlight class="normal"><sp/>||<sp/>e<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Al&quot;</highlight><highlight class="normal"><sp/>||<sp/>e<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Si&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>e<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal"><sp/><sp/>||<sp/>e<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;S&quot;</highlight><highlight class="normal"><sp/><sp/>||<sp/>e<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Cl&quot;</highlight><highlight class="normal"><sp/>||<sp/>e<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Ar&quot;</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>10;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>a<sp/>quantum<sp/>chemist.<sp/>I<sp/>dont<sp/>know<sp/>your<sp/>crazy<sp/>element:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>e;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="MoReader_8cxx_1a718024b869cdd4f94ad15f06f8a47372" refkind="member"><highlight class="normal">std::vector&lt;<sp/>std::vector&lt;size_t&gt;<sp/>&gt;<sp/><ref refid="MoReader_8cxx_1a718024b869cdd4f94ad15f06f8a47372" kindref="member">findShellIndices</ref></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="BasisSet_8hpp_1ad0ff2dd7a949f1830da34b68ceb30575" kindref="member">BasisSet</ref><sp/>&amp;bs</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;atoms<sp/></highlight><highlight class="comment">//<sp/>atom<sp/>names<sp/>in<sp/>our<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408" kindref="member">am::AngularMomentum</ref><sp/>&amp;<ref refid="namespaceam" kindref="compound">am</ref></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>std::vector&lt;size_t&gt;<sp/>&gt;<sp/>indices;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>atomBlock(0);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a:<sp/>atoms)<sp/></highlight><highlight class="comment">//<sp/>e.g.<sp/>{N<sp/>,<sp/>N<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;b:<sp/>bs)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b.atom<sp/>!=<sp/>a<sp/>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Basis<sp/>b<sp/>of<sp/>atom<sp/>a<sp/>in<sp/>the<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;shell:<sp/>b.shells)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbf(<ref refid="namespaceam_1a04e47e5931d5d6e94c7052151abe8650" kindref="member">am::toInt</ref>(shell.am));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shell.am<sp/>!=<sp/><ref refid="namespaceam" kindref="compound">am</ref>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>e.g.<sp/>we&apos;re<sp/>looking<sp/>for<sp/>D<sp/>and<sp/>get<sp/>S<sp/>shell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomBlock<sp/>+=<sp/>nbf;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/>_indices(nbf);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::iota(<sp/>_indices.begin()</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>_indices.end()</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>atomBlock</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices.push_back(_indices);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomBlock<sp/>+=<sp/>nbf;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>indices;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="structShellParser" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structShellParser" kindref="compound">ShellParser</ref><sp/>{</highlight></codeline>
<codeline lineno="72" refid="structShellParser_1a43788583963f9257c2f38ed107b29926" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpars_1_1Regex" kindref="compound">Regex</ref><sp/><ref refid="structShellParser_1a43788583963f9257c2f38ed107b29926" kindref="member">shell_symbol</ref><sp/>=<sp/><ref refid="namespacepars_1abf63d88b9d2972448bb8e2e8f3e86300" kindref="member">pars::oneOf</ref>({</highlight><highlight class="stringliteral">&quot;S&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;F&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;H&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;I&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="73" refid="structShellParser_1af8a5825f5c78d2114312104c5d2219e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structShellParser_1af8a5825f5c78d2114312104c5d2219e9" kindref="member">atom</ref><sp/>=<sp/><ref refid="namespacepars_1a8e4122733980cf5623d19f2ba68ccf12" kindref="member">pars::upper</ref><sp/>+<sp/><ref refid="namespacepars_1a020cf386310223423b06c230ee658c13" kindref="member">pars::lower</ref><sp/>+<sp/><ref refid="namespacepars_1a832dec230b6f898fda8c99bf54323d18" kindref="member">pars::optional</ref></highlight></codeline>
<codeline lineno="74" refid="structShellParser_1a0fd93fb86f4e83dbc0efcfa63848ed3d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structShellParser_1a0fd93fb86f4e83dbc0efcfa63848ed3d" kindref="member">sep</ref><sp/>=<sp/><ref refid="namespacepars_1a1cce466723c30e92152dd3a9ede48df0" kindref="member">pars::blank</ref><sp/>+<sp/><ref refid="namespacepars_1a71161c67c796117fe14c18beb97b4de2" kindref="member">pars::oneOrMore</ref></highlight></codeline>
<codeline lineno="75" refid="structShellParser_1a68ac3a9fbc765070c8bf0650569cba1a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structShellParser_1a68ac3a9fbc765070c8bf0650569cba1a" kindref="member">shell</ref><sp/>=<sp/><ref refid="namespacepars_1a1cce466723c30e92152dd3a9ede48df0" kindref="member">pars::blank</ref><sp/>+<sp/><ref refid="namespacepars_1a6dd95daa3e3817a64dd5b6d4fff8d417" kindref="member">pars::anyOf</ref></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>shells</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespacepars_1a9253594a7f8dfb9207a05eb210460d8d" kindref="member">pars::capture</ref>(<ref refid="namespacepars_1aa92e8770e3c0ac070ea65b8e6f97dc65" kindref="member">pars::digit</ref><sp/>+<sp/><ref refid="namespacepars_1a71161c67c796117fe14c18beb97b4de2" kindref="member">pars::oneOrMore</ref>)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shell<sp/>sybmol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespacepars_1a9253594a7f8dfb9207a05eb210460d8d" kindref="member">pars::capture</ref>(<ref refid="structShellParser_1a43788583963f9257c2f38ed107b29926" kindref="member">shell_symbol</ref>.<ref refid="structpars_1_1Regex_1abf07e459897fa63a5e8a60b114d9db31" kindref="member">s</ref>)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespacepars_1a1cce466723c30e92152dd3a9ede48df0" kindref="member">pars::blank</ref><sp/>+<sp/><ref refid="namespacepars_1a6dd95daa3e3817a64dd5b6d4fff8d417" kindref="member">pars::anyOf</ref></highlight></codeline>
<codeline lineno="81" refid="structShellParser_1a872fe339e7dbdfb28786db05b589346e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structShellParser_1a872fe339e7dbdfb28786db05b589346e" kindref="member">basis_line</ref><sp/>=<sp/><ref refid="namespacepars_1a9253594a7f8dfb9207a05eb210460d8d" kindref="member">pars::capture</ref>(<ref refid="structShellParser_1af8a5825f5c78d2114312104c5d2219e9" kindref="member">atom</ref>.<ref refid="structpars_1_1Regex_1abf07e459897fa63a5e8a60b114d9db31" kindref="member">s</ref>)<sp/>+<sp/><ref refid="structShellParser_1a0fd93fb86f4e83dbc0efcfa63848ed3d" kindref="member">sep</ref>.<ref refid="structpars_1_1Regex_1abf07e459897fa63a5e8a60b114d9db31" kindref="member">s</ref></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespacepars_1a9253594a7f8dfb9207a05eb210460d8d" kindref="member">pars::capture</ref>(<ref refid="namespacepars_1a56722e3642335e4646823756ceb888ca" kindref="member">pars::group</ref>(<ref refid="structShellParser_1a68ac3a9fbc765070c8bf0650569cba1a" kindref="member">shell</ref>.<ref refid="structpars_1_1Regex_1abf07e459897fa63a5e8a60b114d9db31" kindref="member">s</ref>)+<sp/><ref refid="namespacepars_1a71161c67c796117fe14c18beb97b4de2" kindref="member">pars::oneOrMore</ref>)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="84" refid="structShellParser_1a56f3162c870481b312406801f061ee68" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="BasisSet_8hpp_1ad0ff2dd7a949f1830da34b68ceb30575" kindref="member">BasisSet</ref><sp/><ref refid="structShellParser_1a56f3162c870481b312406801f061ee68" kindref="member">parseString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>std::smatch<sp/>basisMatch,<sp/>shellMatch;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408a3376046bb91bb0e6c548a5d9b7a4e31e" kindref="member">S</ref>(s);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BasisSet_8hpp_1ad0ff2dd7a949f1830da34b68ceb30575" kindref="member">BasisSet</ref><sp/>bs;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(std::regex_search(<ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408a3376046bb91bb0e6c548a5d9b7a4e31e" kindref="member">S</ref>,<sp/>basisMatch,<sp/><ref refid="structShellParser_1a872fe339e7dbdfb28786db05b589346e" kindref="member">basis_line</ref>.<ref refid="structpars_1_1Regex_1a79e1cba281b5ea7efe06b5de947037ff" kindref="member">r</ref>))<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>atomSymbol<sp/>=<sp/>basisMatch[1].str()</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>shellLine<sp/>=<sp/>basisMatch[2].str()</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>basisMatch[0].str()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;shellLine:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>shellLine<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Shell&gt;<sp/>shells;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(std::regex_search(shellLine,<sp/>shellMatch,<sp/><ref refid="structShellParser_1a68ac3a9fbc765070c8bf0650569cba1a" kindref="member">shell</ref>.<ref refid="structpars_1_1Regex_1a79e1cba281b5ea7efe06b5de947037ff" kindref="member">r</ref>))<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nShells(std::atoi(shellMatch[1].<ref refid="namespaceCLI_1_1detail_1ab4542375c903302c3876ce0403d55596" kindref="member">str</ref>().c_str()));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;nshells<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nShells<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408" kindref="member">am::AngularMomentum</ref><sp/><ref refid="namespaceam" kindref="compound">am</ref>(<ref refid="namespaceam_1ac6b40085587bff5481ac689700436e24" kindref="member">am::fromString</ref>(shellMatch[2].<ref refid="namespaceCLI_1_1detail_1ab4542375c903302c3876ce0403d55596" kindref="member">str</ref>()));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>nShells;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shells.push_back({<sp/>atomSymbol,<sp/><ref refid="namespaceam" kindref="compound">am</ref>,<sp/>{}<sp/>});</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shellLine<sp/>=<sp/>shellMatch.suffix();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408a3376046bb91bb0e6c548a5d9b7a4e31e" kindref="member">S</ref><sp/>=<sp/>basisMatch.suffix();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bs.push_back({atomSymbol,<sp/></highlight><highlight class="stringliteral">&quot;Unnamed&quot;</highlight><highlight class="normal">,<sp/>shells});</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bs;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal">};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">std::map&lt;std::string,<sp/>std::map&lt;std::string,<sp/>std::string&gt;&gt;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">MoReader::DEFAULT_SCALINGS<sp/>=</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>{<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;nwchem&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>{<sp/>{</highlight><highlight class="stringliteral">&quot;DScaling&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1,1,1,-1,1&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;FScaling&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1,1,1,1,-1,1,-1&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;GScaling&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1,1,1,1,1,-1,1,-1,1&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;HScaling&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1,1,1,1,1,1,-1,1,-1,1,-1&quot;</highlight><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;IScaling&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1,1,1,1,1,1,1,-1,1,-1,1,-1,1&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>,<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;psi4&quot;</highlight><highlight class="normal">,<sp/>{}<sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>,<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;turbomole&quot;</highlight><highlight class="normal">,<sp/>{<sp/>{</highlight><highlight class="stringliteral">&quot;FScaling&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,-1&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;GScaling&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>1,<sp/>1,<sp/>1,<sp/>1,-1,<sp/>1,-1,<sp/>1,<sp/>1&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;HScaling&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1&quot;</highlight><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">std::map&lt;std::string,<sp/>std::map&lt;std::string,<sp/>std::string&gt;&gt;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">MoReader::DEFAULT_REORDER<sp/>=</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>{<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;nwchem&quot;</highlight><highlight class="normal">,<sp/>{}<sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>,<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;psi4&quot;</highlight><highlight class="normal">,<sp/>{}<sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>,<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;turbomole&quot;</highlight><highlight class="normal">,<sp/>{<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;DReorder&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;3,2,0,1,4&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;FReorder&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;6,3,2,0,1,4,5&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;GReorder&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;7,6,3,2,0,1,4,5,8&quot;</highlight><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;HReorder&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;10,7,6,3,2,0,1,4,5,8,9&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">MoReader::BACKENDS<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;nwchem&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;psi4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;turbomole&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="classsisi4s_1_1MoReader_1a379f28cce98f856ff1e9d6f26de76d29" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MoReader::run()<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>args;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>fileName(<ref refid="classsisi4s_1_1Algorithm_1a5e80a507fac066ab5714b62364cabaaf" kindref="member">getTextArgument</ref>(</highlight><highlight class="stringliteral">&quot;file&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>xyz(<ref refid="classsisi4s_1_1Algorithm_1a5e80a507fac066ab5714b62364cabaaf" kindref="member">getTextArgument</ref>(</highlight><highlight class="stringliteral">&quot;xyzStructureFile&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>basisFile(<ref refid="classsisi4s_1_1Algorithm_1a5e80a507fac066ab5714b62364cabaaf" kindref="member">getTextArgument</ref>(</highlight><highlight class="stringliteral">&quot;basisFile&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>shellsFile(<ref refid="classsisi4s_1_1Algorithm_1a5e80a507fac066ab5714b62364cabaaf" kindref="member">getTextArgument</ref>(</highlight><highlight class="stringliteral">&quot;shellsFile&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>backend(<ref refid="classsisi4s_1_1Algorithm_1a5e80a507fac066ab5714b62364cabaaf" kindref="member">getTextArgument</ref>(</highlight><highlight class="stringliteral">&quot;backend&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>frozenCore(<ref refid="classsisi4s_1_1Algorithm_1a5db14be3b0d33bf80218a37223e27667" kindref="member">getIntegerArgument</ref>(</highlight><highlight class="stringliteral">&quot;frozenCore&quot;</highlight><highlight class="normal">,<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(<ref refid="classsisi4s_1_1MoReader_1ad4d6ddcd3a21326537127f5723656f6b" kindref="member">BACKENDS</ref>.begin(),<sp/><ref refid="classsisi4s_1_1MoReader_1ad4d6ddcd3a21326537127f5723656f6b" kindref="member">BACKENDS</ref>.end(),<sp/>backend)<sp/>==<sp/><ref refid="classsisi4s_1_1MoReader_1ad4d6ddcd3a21326537127f5723656f6b" kindref="member">BACKENDS</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>backend<sp/>value:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>backend;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>&lt;shell&gt;Scaling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_s</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/>[&amp;](std::string<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair&lt;<sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408" kindref="member">am::AngularMomentum</ref></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>std::vector&lt;double&gt;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;<sp/>(<sp/><ref refid="namespaceam_1ac6b40085587bff5481ac689700436e24" kindref="member">am::fromString</ref>(s)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="namespacepars_1afa37affba88c42a393cc80f2b42caf50" kindref="member">pars::parseVector&lt;double&gt;</ref>(</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classsisi4s_1_1Algorithm_1a5e80a507fac066ab5714b62364cabaaf" kindref="member">getTextArgument</ref></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>s<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;Scaling&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>this-&gt;<ref refid="classsisi4s_1_1MoReader_1af4e10550fae8882d093b5f0b10607d1c" kindref="member">DEFAULT_SCALINGS</ref>[backend][s<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;Scaling&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>))</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>&lt;shell&gt;Reorder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_r</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/>[&amp;](std::string<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair&lt;<sp/><ref refid="namespaceam_1a28c180222fe17a6f2cec62efac96b408" kindref="member">am::AngularMomentum</ref></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>std::vector&lt;int&gt;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;<sp/>(<sp/><ref refid="namespaceam_1ac6b40085587bff5481ac689700436e24" kindref="member">am::fromString</ref>(s)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="namespacepars_1a6d4a77824971572b20b53e09f62618bd" kindref="member">pars::parseVector&lt;int&gt;</ref>(</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classsisi4s_1_1Algorithm_1a5e80a507fac066ab5714b62364cabaaf" kindref="member">getTextArgument</ref></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>s+<sp/></highlight><highlight class="stringliteral">&quot;Reorder&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>this-&gt;<ref refid="classsisi4s_1_1MoReader_1a423e8844bb037527b06cb50f295b08c9" kindref="member">DEFAULT_REORDER</ref>[backend][s<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;Reorder&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>))</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;am::AngularMomentum,<sp/>std::vector&lt;double&gt;&gt;<sp/>scaling;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;am::AngularMomentum,<sp/>std::vector&lt;int&gt;<sp/><sp/><sp/>&gt;<sp/>reorder;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}<sp/>transformation<sp/>=<sp/>{<sp/>{<sp/>_s(</highlight><highlight class="stringliteral">&quot;S&quot;</highlight><highlight class="normal">),<sp/>_s(</highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal">),<sp/>_s(</highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal">),<sp/>_s(</highlight><highlight class="stringliteral">&quot;F&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>_s(</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">),<sp/>_s(</highlight><highlight class="stringliteral">&quot;H&quot;</highlight><highlight class="normal">),<sp/>_s(</highlight><highlight class="stringliteral">&quot;I&quot;</highlight><highlight class="normal">),<sp/>_s(</highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">)<sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>{<sp/>_r(</highlight><highlight class="stringliteral">&quot;S&quot;</highlight><highlight class="normal">),<sp/>_r(</highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal">),<sp/>_r(</highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal">),<sp/>_r(</highlight><highlight class="stringliteral">&quot;F&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>_r(</highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">),<sp/>_r(</highlight><highlight class="stringliteral">&quot;H&quot;</highlight><highlight class="normal">),<sp/>_r(</highlight><highlight class="stringliteral">&quot;I&quot;</highlight><highlight class="normal">),<sp/>_r(</highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">)<sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><ref refid="MoReader_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;NOTE:<sp/>it<sp/>only<sp/>works<sp/>now<sp/>for<sp/>restricted<sp/>references&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><ref refid="MoReader_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;file:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fileName<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><ref refid="BasisSet_8hpp_1ad0ff2dd7a949f1830da34b68ceb30575" kindref="member">BasisSet</ref><sp/>basis;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(basisFile.size())<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>basis<sp/>=<sp/><ref refid="structnwchem_1_1BasisSetParser" kindref="compound">nwchem::BasisSetParser</ref>().<ref refid="structnwchem_1_1BasisSetParser_1a191753ecb9daab8db5bc1a01a2624218" kindref="member">parseFile</ref>(basisFile);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="MoReader_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#basis<sp/>in&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>basisFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>basis.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shellsFile.size())<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="MoReader_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;basis<sp/>in<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>shellsFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>f(shellsFile);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>contents(std::istreambuf_iterator&lt;char&gt;(f),<sp/>{});</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>basis<sp/>=<sp/><ref refid="structShellParser" kindref="compound">ShellParser</ref>().<ref refid="structShellParser_1a56f3162c870481b312406801f061ee68" kindref="member">parseString</ref>(contents);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!basis.size())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Shell<sp/>information<sp/>not<sp/>read<sp/>properly.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;b:<sp/>basis)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="MoReader_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;::<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>b.atom<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:name<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>b.name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:#shells&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>b.shells.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>atoms;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frozenElectrons(0);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xyz.size())<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>structure(<ref refid="structpars_1_1XyzParser" kindref="compound">pars::XyzParser</ref>().parseFile(xyz));</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a:<sp/>structure)<sp/>atoms.push_back(a.symbol);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="MoReader_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;xyzStructureFile:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>xyz<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="MoReader_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#atoms:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>structure.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>a:<sp/>structure)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MoReader_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(0)<sp/>&lt;&lt;<sp/>a.symbol<sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>a.position.x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>a.position.y<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>a.position.z<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frozenCore)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a:<sp/>structure){</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MoReader_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;atoms:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>a.symbol<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frozenElectrons<sp/>+=<sp/><ref refid="MoReader_8cxx_1a4bf5f610a118a6a7960598e15fa0350c" kindref="member">frozenElement</ref>(a.symbol);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MoReader_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;frozen:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>frozenElectrons<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>mos,<sp/>eigenvalues,<sp/>occupations;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Np;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(backend<sp/>==<sp/><ref refid="classsisi4s_1_1MoReader_1a5a49c54ccab1d3a4ac7f00ee3e54a443" kindref="member">NWCHEM</ref>)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnwchem_1_1MovecReader" kindref="compound">nwchem::MovecReader</ref><sp/>movec(fileName);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>mos<sp/>=<sp/>movec.<ref refid="structnwchem_1_1MovecReader_1a36c15b9782dd991bb9ad507269b48630" kindref="member">mos</ref>;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenvalues<sp/>=<sp/>movec.<ref refid="structnwchem_1_1MovecReader_1ad8716ffd74cd3b18bbe44bac84266a4a" kindref="member">eigenvalues</ref>;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>occupations<sp/>=<sp/>movec.<ref refid="structnwchem_1_1MovecReader_1a200b59e33c9e65da13546a46e01b1822" kindref="member">occupations</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>Np<sp/>=<sp/>movec.<ref refid="structnwchem_1_1MovecReader_1a60ca0713cc3cdf01299b48e2ae9464f1" kindref="member">Np</ref>;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/>*<sp/>else<sp/>if<sp/>(backend<sp/>==<sp/>TURBOMOLE)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>tmole::MosParser<sp/>movec(fileName);</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/><sp/>mos<sp/>=<sp/>movec.mos;</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/><sp/>eigenvalues<sp/>=<sp/>movec.eigenvalues;</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/><sp/>occupations<sp/>=<sp/>movec.occupations;</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/><sp/>Np<sp/>=<sp/>movec.Np;</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/>}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>every<sp/>spin<sp/>channel,<sp/>reorder<sp/>and<sp/>rescale<sp/>the<sp/>mos.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>_mos:<sp/>mos)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>scaling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p:<sp/>transformation.scaling)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceam" kindref="compound">am</ref><sp/>=<sp/><ref refid="namespaceam_1a04e47e5931d5d6e94c7052151abe8650" kindref="member">am::toInt</ref>(p.first);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>scaling<sp/>=<sp/>p.second;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scaling.size())<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MoReader_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;doing<sp/>scaling<sp/>of<sp/>am:<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/><ref refid="namespaceam" kindref="compound">am</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MoReader_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;You<sp/>should<sp/>have<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/><ref refid="namespaceam" kindref="compound">am</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>numbers&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(scaling.size()<sp/>==<sp/><ref refid="namespaceam" kindref="compound">am</ref>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>indicesVector(<ref refid="MoReader_8cxx_1a718024b869cdd4f94ad15f06f8a47372" kindref="member">findShellIndices</ref>(basis,<sp/>atoms,<sp/>p.first));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>through<sp/>every<sp/>state<sp/>(column<sp/>of<sp/>mos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j(0);<sp/>j&lt;Np;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>indices:<sp/>indicesVector)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(indices.size()<sp/>==<sp/><ref refid="namespaceam" kindref="compound">am</ref>);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ii(0);<sp/>ii&lt;<ref refid="namespaceam" kindref="compound">am</ref>;<sp/>ii++)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(indices[ii]<sp/>&lt;<sp/>Np);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mos[<sp/>indices[ii]<sp/>+<sp/>j<sp/>*<sp/>Np<sp/>]<sp/>*=<sp/>scaling[ii];</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MoReader_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;done<sp/>with<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/><ref refid="namespaceam" kindref="compound">am</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>reorder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p:<sp/>transformation.reorder)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceam" kindref="compound">am</ref><sp/>=<sp/><ref refid="namespaceam_1a04e47e5931d5d6e94c7052151abe8650" kindref="member">am::toInt</ref>(p.first);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>reorder<sp/>=<sp/>p.second;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reorder.size())<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MoReader_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;doing<sp/>reorder<sp/>of<sp/>am:<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/><ref refid="namespaceam" kindref="compound">am</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MoReader_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;You<sp/>should<sp/>have<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/><ref refid="namespaceam" kindref="compound">am</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>numbers&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(reorder.size()<sp/>==<sp/><ref refid="namespaceam" kindref="compound">am</ref>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>indicesVector(<ref refid="MoReader_8cxx_1a718024b869cdd4f94ad15f06f8a47372" kindref="member">findShellIndices</ref>(basis,<sp/>atoms,<sp/>p.first));</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>through<sp/>every<sp/>state<sp/>(column<sp/>of<sp/>mos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j(0);<sp/>j&lt;Np;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>indices:<sp/>indicesVector)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(indices.size()<sp/>==<sp/><ref refid="namespaceam" kindref="compound">am</ref>);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>a<sp/>backup<sp/>of<sp/>the<sp/>indices<sp/>thunk<sp/>to<sp/>be<sp/>settable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>backup(indices.size());</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ii(0);<sp/>ii&lt;<ref refid="namespaceam" kindref="compound">am</ref>;<sp/>ii++)<sp/>backup[ii]<sp/>=<sp/>_mos[indices[ii]<sp/>+<sp/>j*Np];</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ii(0);<sp/>ii&lt;<ref refid="namespaceam" kindref="compound">am</ref>;<sp/>ii++)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(indices[ii]<sp/>&lt;<sp/>Np);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mos[<sp/>indices[ii]<sp/>+<sp/>j<sp/>*<sp/>Np<sp/>]<sp/>=<sp/>backup[reorder[ii]];</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MoReader_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;done<sp/>with<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/><ref refid="namespaceam" kindref="compound">am</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>pp(2,<sp/>Np),<sp/>syms(2,<sp/>NS),<sp/>o(1),<sp/>v(1),<sp/>p(1,<sp/>Np);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>no(0);<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nv(0);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>ids;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>unrestricted<sp/>=<sp/>mos.size()<sp/>==<sp/>2;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank_m<sp/>=<sp/>int(<ref refid="classsisi4s_1_1Sisi4s_1a9c828aff8cbaa346d4669ff89dfc6f5c" kindref="member">Sisi4s::world</ref>-&gt;rank<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>rank<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>outMos,<sp/>outEigenvalues,<sp/>outOccupations,<sp/>outSpins;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unrestricted)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="MoReader_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;considering<sp/>UNRESTRICTED<sp/>system&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>na(eigenvalues[0].size());</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb(eigenvalues[1].size());</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>npp(na+nb);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>b(0);<sp/>b<sp/>&lt;<sp/>occupations[0].size();<sp/>b++){</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>&lt;<sp/>frozenElectrons/2)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>occ(occupations[0][b]);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>occ<sp/>&lt;<sp/>0.5)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>no++;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outOccupations.push_back(occ);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outSpins.push_back(0.5);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outEigenvalues.push_back(eigenvalues[0][b]);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>jj(0);<sp/>jj<sp/>&lt;<sp/>Np;<sp/>jj++)<sp/>outMos.push_back(mos[0][b*Np<sp/>+<sp/>jj]);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>b(0);<sp/>b<sp/>&lt;<sp/>occupations[1].size();<sp/>b++){</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>&lt;<sp/>frozenElectrons/2)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>occ(occupations[1][b]);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>occ<sp/>&lt;<sp/>0.5)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>no++;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outOccupations.push_back(occ);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outSpins.push_back(-0.5);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outEigenvalues.push_back(eigenvalues[1][b]);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>jj(0);<sp/>jj<sp/>&lt;<sp/>Np;<sp/>jj++)<sp/>outMos.push_back(mos[1][b*Np<sp/>+<sp/>jj]);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>b(0);<sp/>b<sp/>&lt;<sp/>occupations[0].size();<sp/>b++){</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>&lt;<sp/>frozenElectrons/2)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>occ(occupations[0][b]);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>occ<sp/>&gt;<sp/>0.5)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nv++;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outOccupations.push_back(occ);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outSpins.push_back(0.5);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outEigenvalues.push_back(eigenvalues[0][b]);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>jj(0);<sp/>jj<sp/>&lt;<sp/>Np;<sp/>jj++)<sp/>outMos.push_back(mos[0][b*Np<sp/>+<sp/>jj]);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>b(0);<sp/>b<sp/>&lt;<sp/>occupations[1].size();<sp/>b++){</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>&lt;<sp/>frozenElectrons/2)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>occ(occupations[1][b]);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>occ<sp/>&gt;<sp/>0.5)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nv++;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outOccupations.push_back(occ);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outSpins.push_back(-0.5);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outEigenvalues.push_back(eigenvalues[1][b]);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>jj(0);<sp/>jj<sp/>&lt;<sp/>Np;<sp/>jj++)<sp/>outMos.push_back(mos[1][b*Np<sp/>+<sp/>jj]);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>o[0]<sp/>=<sp/>no;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>v[0]<sp/>=<sp/>nv;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>no+nv;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>pp[1]<sp/>=<sp/>p[0];</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="MoReader_8cxx_1a69b675a9468ba9cfcccefdf2bce2d3b1" kindref="member">LOGGER</ref>(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;considering<sp/>RESTRICTED<sp/>system&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ii(0);<sp/>ii<sp/>&lt;<sp/>occupations[0].size();<sp/>ii++){</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ii<sp/>&lt;<sp/>frozenElectrons/2)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>occ(occupations[0][ii]);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>occ<sp/>&gt;<sp/>0.5)<sp/>{<sp/>no++;}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>nv++;}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outEigenvalues.push_back(eigenvalues[0][ii]);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outOccupations.push_back(occ);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>jj(0);<sp/>jj<sp/>&lt;<sp/>Np;<sp/>jj++)<sp/>outMos.push_back(mos[0][ii*Np<sp/>+<sp/>jj]);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>o[0]<sp/>=<sp/>no;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>v[0]<sp/>=<sp/>nv;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>no+nv;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>pp[1]<sp/>=<sp/>p[0];</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><ref refid="MoReader_8cxx_1a2c6b636f505e7848aa4e9d039c74ea71" kindref="member">IF_GIVEN</ref>(</highlight><highlight class="stringliteral">&quot;HoleEigenEnergies&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>ids.resize(rank_m<sp/>*<sp/>o[0]);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>std::iota(ids.begin(),<sp/>ids.end(),<sp/>0);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>epsi(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CTF::Tensor&lt;double&gt;(1,<sp/>o.data(),<sp/>syms.data(),<sp/>*<ref refid="classsisi4s_1_1Sisi4s_1a9c828aff8cbaa346d4669ff89dfc6f5c" kindref="member">Sisi4s::world</ref>));</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>epsi-&gt;write(ids.size(),<sp/>ids.data(),<sp/>outEigenvalues.data());</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>allocatedTensorArgument&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;HoleEigenEnergies&quot;</highlight><highlight class="normal">,<sp/>epsi);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><ref refid="MoReader_8cxx_1a2c6b636f505e7848aa4e9d039c74ea71" kindref="member">IF_GIVEN</ref>(</highlight><highlight class="stringliteral">&quot;ParticleEigenEnergies&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>ids.resize(rank_m<sp/>*<sp/>v[0]);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>std::iota(ids.begin(),<sp/>ids.end(),<sp/>0);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>epsa(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CTF::Tensor&lt;double&gt;(1,<sp/>v.data(),<sp/>syms.data(),<sp/>*<ref refid="classsisi4s_1_1Sisi4s_1a9c828aff8cbaa346d4669ff89dfc6f5c" kindref="member">Sisi4s::world</ref>));</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>epsa-&gt;write(ids.size(),<sp/>ids.data(),<sp/>outEigenvalues.data()<sp/>+<sp/>o[0]);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>allocatedTensorArgument&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;ParticleEigenEnergies&quot;</highlight><highlight class="normal">,<sp/>epsa);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><ref refid="MoReader_8cxx_1a2c6b636f505e7848aa4e9d039c74ea71" kindref="member">IF_GIVEN</ref>(</highlight><highlight class="stringliteral">&quot;OccupationNumbers&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>ids.resize(rank_m<sp/>*<sp/>p[0]);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>std::iota(ids.begin(),<sp/>ids.end(),<sp/>0);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>os(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CTF::Tensor&lt;double&gt;(1,<sp/>p.data(),<sp/>syms.data(),<sp/>*<ref refid="classsisi4s_1_1Sisi4s_1a9c828aff8cbaa346d4669ff89dfc6f5c" kindref="member">Sisi4s::world</ref>));</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>os-&gt;write(ids.size(),<sp/>ids.data(),<sp/>outOccupations.data());</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>allocatedTensorArgument&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;OccupationNumbers&quot;</highlight><highlight class="normal">,<sp/>os);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unrestricted){</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>ids.resize(rank_m<sp/>*<sp/>p[0]);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>std::iota(ids.begin(),<sp/>ids.end(),<sp/>0);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>spin(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CTF::Tensor&lt;double&gt;(1,<sp/>p.data(),<sp/>syms.data(),<sp/>*<ref refid="classsisi4s_1_1Sisi4s_1a9c828aff8cbaa346d4669ff89dfc6f5c" kindref="member">Sisi4s::world</ref>));</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>spin-&gt;write(ids.size(),<sp/>ids.data(),<sp/>outSpins.data());</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>allocatedTensorArgument&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;Spins&quot;</highlight><highlight class="normal">,<sp/>spin);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsisi4s_1_1Algorithm_1aec9041b31cb64a42ee1fd79d32774266" kindref="member">isArgumentGiven</ref>(</highlight><highlight class="stringliteral">&quot;OrbitalCoefficients&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>ids.resize(rank_m<sp/>*<sp/>pp[0]*pp[1]);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>std::iota(ids.begin(),<sp/>ids.end(),<sp/>0);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>coef(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CTF::Tensor&lt;double&gt;(2,<sp/>pp.data(),<sp/>syms.data(),<sp/>*<ref refid="classsisi4s_1_1Sisi4s_1a9c828aff8cbaa346d4669ff89dfc6f5c" kindref="member">Sisi4s::world</ref>));</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>coef-&gt;write(ids.size(),<sp/>ids.data(),<sp/>outMos.data());</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>allocatedTensorArgument&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;OrbitalCoefficients&quot;</highlight><highlight class="normal">,<sp/>coef);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/sisi4s/sisi4s/src/algorithms/MoReader.cxx"/>
  </compounddef>
</doxygen>
