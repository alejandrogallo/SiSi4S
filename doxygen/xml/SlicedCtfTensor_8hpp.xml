<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="SlicedCtfTensor_8hpp" kind="file" language="C++">
    <compoundname>SlicedCtfTensor.hpp</compoundname>
    <includes refid="Permutation_8hpp" local="no">math/Permutation.hpp</includes>
    <includes refid="Tensor_8hpp" local="no">util/Tensor.hpp</includes>
    <includes local="no">initializer_list</includes>
    <includes local="no">vector</includes>
    <includes local="no">string</includes>
    <includedby refid="CcsdPerturbativeTriples_8hpp" local="no">CcsdPerturbativeTriples.hpp</includedby>
    <includedby refid="CcsdPerturbativeTriplesComplex_8hpp" local="no">CcsdPerturbativeTriplesComplex.hpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>math/Permutation.hpp</label>
        <link refid="Permutation_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>util/CTF.hpp</label>
        <link refid="CTF_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>SlicedCtfTensor.hpp</label>
        <link refid="SlicedCtfTensor_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>util/Tensor.hpp</label>
        <link refid="Tensor_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ctf.hpp</label>
      </node>
      <node id="4">
        <label>initializer_list</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>CcsdPerturbativeTriples.cxx</label>
        <link refid="CcsdPerturbativeTriples_8cxx"/>
      </node>
      <node id="2">
        <label>CcsdPerturbativeTriples.hpp</label>
        <link refid="CcsdPerturbativeTriples_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>CcsdPerturbativeTriplesComplex.cxx</label>
        <link refid="CcsdPerturbativeTriplesComplex_8cxx"/>
      </node>
      <node id="4">
        <label>CcsdPerturbativeTriplesComplex.hpp</label>
        <link refid="CcsdPerturbativeTriplesComplex_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>SlicedCtfTensor.hpp</label>
        <link refid="SlicedCtfTensor_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classsisi4s_1_1SlicedCtfTensor" prot="public">sisi4s::SlicedCtfTensor</innerclass>
    <innernamespace refid="namespacesisi4s">sisi4s</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>SLICED_CTF_TENSOR_DEFINED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SLICED_CTF_TENSOR_DEFINED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Permutation_8hpp" kindref="compound">math/Permutation.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Tensor_8hpp" kindref="compound">util/Tensor.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;initializer_list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesisi4s" kindref="compound">sisi4s</ref><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F<sp/>=<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="12" refid="classsisi4s_1_1SlicedCtfTensor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsisi4s_1_1SlicedCtfTensor" kindref="compound">SlicedCtfTensor</ref><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="14" refid="classsisi4s_1_1SlicedCtfTensor_1a9702a8aa2e5c2b4e302c6627a5de92f3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1SlicedCtfTensor_1a9702a8aa2e5c2b4e302c6627a5de92f3" kindref="member">SlicedCtfTensor</ref>(<ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref><sp/>&amp;T,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;int&gt;<sp/>&amp;list)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1SlicedCtfTensor_1af24cc1bf2a2e39ac341294c616356a8b" kindref="member">create</ref>(T,<sp/>std::vector&lt;int&gt;(list));</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterator&gt;</highlight></codeline>
<codeline lineno="18" refid="classsisi4s_1_1SlicedCtfTensor_1aa8d3d34a4a751e7f7d81db66a00eb840" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1SlicedCtfTensor_1aa8d3d34a4a751e7f7d81db66a00eb840" kindref="member">SlicedCtfTensor</ref>(<ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref><sp/>&amp;T,<sp/>Iterator<sp/>begin,<sp/>Iterator<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1SlicedCtfTensor_1af24cc1bf2a2e39ac341294c616356a8b" kindref="member">create</ref>(T,<sp/>std::vector&lt;int&gt;(begin,<sp/>end));</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="21" refid="classsisi4s_1_1SlicedCtfTensor_1af24cc1bf2a2e39ac341294c616356a8b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1SlicedCtfTensor_1af24cc1bf2a2e39ac341294c616356a8b" kindref="member">create</ref>(<ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref><sp/>&amp;T,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;slicedDims)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>indexNames<sp/>=<sp/>&quot;abcd...&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>indexNames(T.order,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d(0);<sp/>d<sp/>&lt;<sp/>T.order;<sp/>++d)<sp/>indexNames[d]<sp/>+=<sp/>d;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>figure<sp/>out<sp/>how<sp/>many<sp/>slices<sp/>we<sp/>have<sp/>in<sp/>each<sp/>sliced<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1SlicedCtfTensor_1ac320ac20e3b670a03ebbc4b6f7909760" kindref="member">slicedLens</ref>.resize(slicedDims.size());</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>slicesCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d(0);<sp/>d<sp/>&lt;<sp/>slicedDims.size();<sp/>++d)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slicesCount<sp/>*=<sp/><ref refid="classsisi4s_1_1SlicedCtfTensor_1ac320ac20e3b670a03ebbc4b6f7909760" kindref="member">slicedLens</ref>[d]<sp/>=<sp/>T.lens[slicedDims[d]];</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>all<sp/>slices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1SlicedCtfTensor_1a20530bce2fe964052ff9d16dade33fd4" kindref="member">slices</ref>.resize(slicesCount);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>sliceIndex(0);<sp/>sliceIndex<sp/>&lt;<sp/>slicesCount;<sp/>++sliceIndex)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>slice<sp/>position<sp/>from<sp/>its<sp/>index<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>i(sliceIndex);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>slicePosition(slicedDims.size());</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d(0);<sp/>d<sp/>&lt;<sp/>slicedDims.size();<sp/>++d)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slicePosition[d]<sp/>=<sp/>i<sp/>%<sp/><ref refid="classsisi4s_1_1SlicedCtfTensor_1ac320ac20e3b670a03ebbc4b6f7909760" kindref="member">slicedLens</ref>[d];</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>/=<sp/><ref refid="classsisi4s_1_1SlicedCtfTensor_1ac320ac20e3b670a03ebbc4b6f7909760" kindref="member">slicedLens</ref>[d];</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>=<sp/>(0,...,0),<sp/>end<sp/>=<sp/>(lens[0],...,lend[order-1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>start(T.order),<sp/>end(T.lens,<sp/>T.lens<sp/>+<sp/>T.order);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>enter<sp/>the<sp/>slice<sp/>position<sp/>in<sp/>the<sp/>sliced<sp/>dimensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d(0);<sp/>d<sp/>&lt;<sp/>slicedDims.size();<sp/>++d)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start[slicedDims[d]]<sp/>=<sp/>slicePosition[d];</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end[slicedDims[d]]<sp/>=<sp/>slicePosition[d]<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1SlicedCtfTensor_1a20530bce2fe964052ff9d16dade33fd4" kindref="member">slices</ref>[sliceIndex]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref>(T.slice(start.data(),<sp/>end.data()));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51" refid="classsisi4s_1_1SlicedCtfTensor_1a97761a0216b2563d16efeaa63270c6d3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classsisi4s_1_1SlicedCtfTensor_1a97761a0216b2563d16efeaa63270c6d3" kindref="member">~SlicedCtfTensor</ref>()<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i(0);<sp/>i<sp/>&lt;<sp/><ref refid="classsisi4s_1_1SlicedCtfTensor_1a20530bce2fe964052ff9d16dade33fd4" kindref="member">slices</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsisi4s_1_1SlicedCtfTensor_1a20530bce2fe964052ff9d16dade33fd4" kindref="member">slices</ref>[i])<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="classsisi4s_1_1SlicedCtfTensor_1a20530bce2fe964052ff9d16dade33fd4" kindref="member">slices</ref>[i];</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsisi4s_1_1SlicedCtfTensor_1a20530bce2fe964052ff9d16dade33fd4" kindref="member">slices</ref>[i]<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="classsisi4s_1_1SlicedCtfTensor_1ac5415993dc6251cc86348a8ec2a12404" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref><sp/>&amp;<ref refid="classsisi4s_1_1SlicedCtfTensor_1ac5415993dc6251cc86348a8ec2a12404" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;int&gt;<sp/>&amp;slicePos)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(std::vector&lt;int&gt;(slicePos));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterator&gt;</highlight></codeline>
<codeline lineno="62" refid="classsisi4s_1_1SlicedCtfTensor_1a2366c16729661b0bab47fefdc01e482b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref><sp/>&amp;<ref refid="classsisi4s_1_1SlicedCtfTensor_1a2366c16729661b0bab47fefdc01e482b" kindref="member">operator()</ref>(Iterator<sp/>begin,<sp/>Iterator<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(std::vector&lt;int&gt;(begin,<sp/>end));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65" refid="classsisi4s_1_1SlicedCtfTensor_1a6165029dd8af282d82e362ac696565cb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacesisi4s_1a1695e67f99e3219626943923a40886a1" kindref="member">Tensor&lt;F&gt;</ref><sp/>&amp;<ref refid="classsisi4s_1_1SlicedCtfTensor_1a6165029dd8af282d82e362ac696565cb" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;slicePosition)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>slice<sp/>number<sp/>from<sp/>its<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>sliceIndex(0);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d(<ref refid="classsisi4s_1_1SlicedCtfTensor_1ac320ac20e3b670a03ebbc4b6f7909760" kindref="member">slicedLens</ref>.size()<sp/>-<sp/>1);<sp/>d<sp/>&gt;=<sp/>0;<sp/>--d)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sliceIndex<sp/>*=<sp/><ref refid="classsisi4s_1_1SlicedCtfTensor_1ac320ac20e3b670a03ebbc4b6f7909760" kindref="member">slicedLens</ref>[d];</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sliceIndex<sp/>+=<sp/>slicePosition[d];</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="classsisi4s_1_1SlicedCtfTensor_1a20530bce2fe964052ff9d16dade33fd4" kindref="member">slices</ref>[sliceIndex];</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="classsisi4s_1_1SlicedCtfTensor_1ac320ac20e3b670a03ebbc4b6f7909760" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="classsisi4s_1_1SlicedCtfTensor_1ac320ac20e3b670a03ebbc4b6f7909760" kindref="member">slicedLens</ref>;</highlight></codeline>
<codeline lineno="76" refid="classsisi4s_1_1SlicedCtfTensor_1a20530bce2fe964052ff9d16dade33fd4" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;Tensor&lt;F&gt;<sp/>*&gt;<sp/><ref refid="classsisi4s_1_1SlicedCtfTensor_1a20530bce2fe964052ff9d16dade33fd4" kindref="member">slices</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">};</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>sisi4s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/sisi4s/sisi4s/src/util/SlicedCtfTensor.hpp"/>
  </compounddef>
</doxygen>
