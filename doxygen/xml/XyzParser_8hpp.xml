<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="XyzParser_8hpp" kind="file" language="C++">
    <compoundname>XyzParser.hpp</compoundname>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">fstream</includes>
    <includes local="no">map</includes>
    <includes refid="Parsing_8hpp" local="no">util/Parsing.hpp</includes>
    <includes local="no">regex</includes>
    <includedby refid="MoReader_8cxx" local="no">MoReader.cxx</includedby>
    <incdepgraph>
      <node id="7">
        <label>util/Parsing.hpp</label>
        <link refid="Parsing_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>XyzParser.hpp</label>
        <link refid="XyzParser_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>algorithm</label>
      </node>
      <node id="5">
        <label>fstream</label>
      </node>
      <node id="6">
        <label>map</label>
      </node>
      <node id="8">
        <label>regex</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>MoReader.cxx</label>
        <link refid="MoReader_8cxx"/>
      </node>
      <node id="1">
        <label>XyzParser.hpp</label>
        <link refid="XyzParser_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structAtom" prot="public">Atom</innerclass>
    <innerclass refid="structpars_1_1XyzParser" prot="public">pars::XyzParser</innerclass>
    <innernamespace refid="namespacepars">pars</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_XYZ_PARSER_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_XYZ_PARSER_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Parsing_8hpp" kindref="compound">util/Parsing.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;regex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="structAtom" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structAtom" kindref="compound">Atom</ref><sp/>{</highlight></codeline>
<codeline lineno="14" refid="structAtom_1a645a8cf3b812cef54393a68c206055cc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="structAtom_1a645a8cf3b812cef54393a68c206055cc" kindref="member">symbol</ref>;</highlight></codeline>
<codeline lineno="15" refid="structAtom_1a42fed25f1d6382cb37fce5f2fa463bb7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structAtom_1a382da4a2a8d20faa2fd1eca986f44056" kindref="member">x</ref>,<sp/><ref refid="structAtom_1aab210323240ea76e6f866113e590cd22" kindref="member">y</ref>,<sp/><ref refid="structAtom_1af1c8b6cd65e2a489b9be339efd7a77ac" kindref="member">z</ref>;<sp/>}<sp/><ref refid="structAtom_1a42fed25f1d6382cb37fce5f2fa463bb7" kindref="member">position</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal">};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacepars" kindref="compound">pars</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="structpars_1_1XyzParser" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpars_1_1XyzParser" kindref="compound">XyzParser</ref><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="structpars_1_1XyzParser_1ab07fca5fd1fd24a0c1e579d10c3fc094" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpars_1_1Regex" kindref="compound">Regex</ref><sp/><ref refid="structpars_1_1XyzParser_1ab07fca5fd1fd24a0c1e579d10c3fc094" kindref="member">sep</ref><sp/>=<sp/><ref refid="namespacepars_1a1cce466723c30e92152dd3a9ede48df0" kindref="member">blank</ref><sp/>+<sp/><ref refid="namespacepars_1a71161c67c796117fe14c18beb97b4de2" kindref="member">oneOrMore</ref><sp/></highlight><highlight class="comment">//<sp/>any<sp/>number<sp/>&gt;<sp/>1<sp/>of<sp/>spaces<sp/>or<sp/>tabs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="structpars_1_1XyzParser_1a232db37903c3fc26aad014503685f46d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structpars_1_1XyzParser_1a232db37903c3fc26aad014503685f46d" kindref="member">atom</ref><sp/>=<sp/><ref refid="namespacepars_1a8e4122733980cf5623d19f2ba68ccf12" kindref="member">upper</ref><sp/>+<sp/><ref refid="namespacepars_1a020cf386310223423b06c230ee658c13" kindref="member">lower</ref><sp/>+<sp/><ref refid="namespacepars_1a832dec230b6f898fda8c99bf54323d18" kindref="member">optional</ref><sp/></highlight><highlight class="comment">//<sp/>atom<sp/>is<sp/>Upper<sp/>+<sp/>lower?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="structpars_1_1XyzParser_1a50c77e1045f5768048c39606d3fd69ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structpars_1_1XyzParser_1a50c77e1045f5768048c39606d3fd69ad" kindref="member">xyz_line</ref><sp/>=<sp/><ref refid="namespacepars_1a07f6fdb3a7f7f358ee1330f866f144db" kindref="member">bof</ref><sp/>+<sp/><ref refid="namespacepars_1a1cce466723c30e92152dd3a9ede48df0" kindref="member">blank</ref><sp/>+<sp/><ref refid="namespacepars_1a6dd95daa3e3817a64dd5b6d4fff8d417" kindref="member">anyOf</ref><sp/></highlight><highlight class="comment">//<sp/>spaces<sp/>at<sp/>the<sp/>start<sp/>allowed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespacepars_1a9253594a7f8dfb9207a05eb210460d8d" kindref="member">capture</ref>(<ref refid="structpars_1_1XyzParser_1a232db37903c3fc26aad014503685f46d" kindref="member">atom</ref>.<ref refid="structpars_1_1Regex_1abf07e459897fa63a5e8a60b114d9db31" kindref="member">s</ref>)<sp/>+<sp/><ref refid="structpars_1_1XyzParser_1ab07fca5fd1fd24a0c1e579d10c3fc094" kindref="member">sep</ref>.<ref refid="structpars_1_1Regex_1abf07e459897fa63a5e8a60b114d9db31" kindref="member">s</ref><sp/></highlight><highlight class="comment">//<sp/>capture<sp/>atom<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespacepars_1a9253594a7f8dfb9207a05eb210460d8d" kindref="member">capture</ref>(<ref refid="namespacepars_1abd0d3ec23684cfcbfd53a65509861855" kindref="member">realNumber</ref>)<sp/>+<sp/><ref refid="structpars_1_1XyzParser_1ab07fca5fd1fd24a0c1e579d10c3fc094" kindref="member">sep</ref>.<ref refid="structpars_1_1Regex_1abf07e459897fa63a5e8a60b114d9db31" kindref="member">s</ref></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespacepars_1a9253594a7f8dfb9207a05eb210460d8d" kindref="member">capture</ref>(<ref refid="namespacepars_1abd0d3ec23684cfcbfd53a65509861855" kindref="member">realNumber</ref>)<sp/>+<sp/><ref refid="structpars_1_1XyzParser_1ab07fca5fd1fd24a0c1e579d10c3fc094" kindref="member">sep</ref>.<ref refid="structpars_1_1Regex_1abf07e459897fa63a5e8a60b114d9db31" kindref="member">s</ref></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespacepars_1a9253594a7f8dfb9207a05eb210460d8d" kindref="member">capture</ref>(<ref refid="namespacepars_1abd0d3ec23684cfcbfd53a65509861855" kindref="member">realNumber</ref>)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespacepars_1a1cce466723c30e92152dd3a9ede48df0" kindref="member">blank</ref><sp/>+<sp/><ref refid="namespacepars_1a6dd95daa3e3817a64dd5b6d4fff8d417" kindref="member">anyOf</ref><sp/>+<sp/><ref refid="namespacepars_1a2fea7aec0ef4f24e5b90e588d96f4cc2" kindref="member">eof</ref></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="structpars_1_1XyzParser_1ad32856f5f42e02bd28ba3cb39b6a8c28" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structAtom" kindref="compound">Atom</ref><sp/><ref refid="structpars_1_1XyzParser_1ad32856f5f42e02bd28ba3cb39b6a8c28" kindref="member">parseLine</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;line)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::smatch<sp/>m;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::regex_match(line,<sp/>m,<sp/><ref refid="structpars_1_1XyzParser_1a50c77e1045f5768048c39606d3fd69ad" kindref="member">xyz_line</ref>.<ref refid="structpars_1_1Regex_1a79e1cba281b5ea7efe06b5de947037ff" kindref="member">r</ref>);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m.size()<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Line<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>line<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>malformed&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>std::string(m[1])</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>{<sp/>std::atof(std::string(m[2]).c_str())</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>std::atof(std::string(m[3]).c_str())</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>std::atof(std::string(m[4]).c_str())</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="structpars_1_1XyzParser_1a7709a85b9e6a9f1cd9483bca92a40d9d" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;Atom&gt;<sp/><ref refid="structpars_1_1XyzParser_1a7709a85b9e6a9f1cd9483bca92a40d9d" kindref="member">parseFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;fileName)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fstream<sp/>f(fileName);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Atom&gt;<sp/>atoms;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f.good())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;File<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>fileName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f.is_open())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;File<sp/>IO<sp/>error:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>fileName;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>std::getline(f,<sp/>line);<sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>atoms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>natoms<sp/>=<sp/>std::atoi(line.c_str());</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>std::getline(f,<sp/>line);<sp/></highlight><highlight class="comment">//<sp/>Title<sp/>of<sp/>xyz<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i&lt;natoms;<sp/>i++){</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::getline(f,<sp/>line);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>atoms.push_back(<ref refid="structpars_1_1XyzParser_1ad32856f5f42e02bd28ba3cb39b6a8c28" kindref="member">parseLine</ref>(line));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atoms;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/sisi4s/sisi4s/src/util/XyzParser.hpp"/>
  </compounddef>
</doxygen>
